(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[377],{8818:function(t,e,n){(function(){"use strict";var t;function e(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}var r="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){return t==Array.prototype||t==Object.prototype||(t[e]=n.value),t};var a=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g];for(var e=0;e<t.length;++e){var r=t[e];if(r&&r.Math==Math)return r}throw Error("Cannot find global object")}(this);function s(t,e){if(e)t:{var n=a;t=t.split(".");for(var s=0;s<t.length-1;s++){var i=t[s];if(!(i in n))break t;n=n[i]}(e=e(s=n[t=t[t.length-1]]))!=s&&null!=e&&r(n,t,{configurable:!0,writable:!0,value:e})}}function i(t){return(t={next:t})[Symbol.iterator]=function(){return this},t}function o(t){var n="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return n?n.call(t):{next:e(t)}}function u(t){if(!(t instanceof Array)){t=o(t);for(var e,n=[];!(e=t.next()).done;)n.push(e.value);t=n}return t}s("Symbol",(function(t){function e(t,e){this.g=t,r(this,"description",{configurable:!0,writable:!0,value:e})}if(t)return t;e.prototype.toString=function(){return this.g};var n="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",a=0;return function t(r){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return new e(n+(r||"")+"_"+a++,r)}})),s("Symbol.iterator",(function(t){if(t)return t;t=Symbol("Symbol.iterator");for(var n="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),s=0;s<n.length;s++){var o=a[n[s]];"function"===typeof o&&"function"!=typeof o.prototype[t]&&r(o.prototype,t,{configurable:!0,writable:!0,value:function(){return i(e(this))}})}return t}));var p,c="function"==typeof Object.create?Object.create:function(t){function e(){}return e.prototype=t,new e};if("function"==typeof Object.setPrototypeOf)p=Object.setPrototypeOf;else{var l;t:{var h={};try{h.__proto__={a:!0},l=h.a;break t}catch(ge){}l=!1}p=l?function(t,e){if(t.__proto__=e,t.__proto__!==e)throw new TypeError(t+" is not extensible");return t}:null}var f=p;function m(t,e){if(t.prototype=c(e.prototype),t.prototype.constructor=t,f)f(t,e);else for(var n in e)if("prototype"!=n)if(Object.defineProperties){var r=Object.getOwnPropertyDescriptor(e,n);r&&Object.defineProperty(t,n,r)}else t[n]=e[n];t.ea=e.prototype}function d(){this.l=!1,this.i=null,this.h=void 0,this.g=1,this.s=this.m=0,this.j=null}function y(t){if(t.l)throw new TypeError("Generator is already running");t.l=!0}function g(t,e){t.j={U:e,V:!0},t.g=t.m||t.s}function v(t,e,n){return t.g=n,{value:e}}function b(t){this.g=new d,this.h=t}function x(t,e,n,r){try{var a=e.call(t.g.i,n);if(!(a instanceof Object))throw new TypeError("Iterator result "+a+" is not an object");if(!a.done)return t.g.l=!1,a;var s=a.value}catch(i){return t.g.i=null,g(t.g,i),N(t)}return t.g.i=null,r.call(t.g,s),N(t)}function N(t){for(;t.g.g;)try{var e=t.h(t.g);if(e)return t.g.l=!1,{value:e.value,done:!1}}catch(n){t.g.h=void 0,g(t.g,n)}if(t.g.l=!1,t.g.j){if(e=t.g.j,t.g.j=null,e.V)throw e.U;return{value:e.return,done:!0}}return{value:void 0,done:!0}}function T(t){this.next=function(e){return y(t.g),t.g.i?e=x(t,t.g.i.next,e,t.g.o):(t.g.o(e),e=N(t)),e},this.throw=function(e){return y(t.g),t.g.i?e=x(t,t.g.i.throw,e,t.g.o):(g(t.g,e),e=N(t)),e},this.return=function(e){return function(t,e){y(t.g);var n=t.g.i;return n?x(t,"return"in n?n.return:function(t){return{value:t,done:!0}},e,t.g.return):(t.g.return(e),N(t))}(t,e)},this[Symbol.iterator]=function(){return this}}function w(t,e){return e=new T(new b(e)),f&&t.prototype&&f(e,t.prototype),e}d.prototype.o=function(t){this.h=t},d.prototype.return=function(t){this.j={return:t},this.g=this.s};var S="function"==typeof Object.assign?Object.assign:function(t,e){for(var n=1;n<arguments.length;n++){var r=arguments[n];if(r)for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a])}return t};s("Object.assign",(function(t){return t||S})),s("Promise",(function(t){function e(t){this.h=0,this.i=void 0,this.g=[],this.o=!1;var e=this.j();try{t(e.resolve,e.reject)}catch(n){e.reject(n)}}function n(){this.g=null}function r(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.h=function(t){if(null==this.g){this.g=[];var e=this;this.i((function(){e.l()}))}this.g.push(t)};var s=a.setTimeout;n.prototype.i=function(t){s(t,0)},n.prototype.l=function(){for(;this.g&&this.g.length;){var t=this.g;this.g=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(r){this.j(r)}}}this.g=null},n.prototype.j=function(t){this.i((function(){throw t}))},e.prototype.j=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.C),reject:t(this.l)}},e.prototype.C=function(t){if(t===this)this.l(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.F(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.u(t):this.m(t)}},e.prototype.u=function(t){var e=void 0;try{e=t.then}catch(n){return void this.l(n)}"function"==typeof e?this.G(e,t):this.m(t)},e.prototype.l=function(t){this.s(2,t)},e.prototype.m=function(t){this.s(1,t)},e.prototype.s=function(t,e){if(0!=this.h)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.h);this.h=t,this.i=e,2===this.h&&this.D(),this.A()},e.prototype.D=function(){var t=this;s((function(){if(t.B()){var e=a.console;"undefined"!==typeof e&&e.error(t.i)}}),1)},e.prototype.B=function(){if(this.o)return!1;var t=a.CustomEvent,e=a.Event,n=a.dispatchEvent;return"undefined"===typeof n||("function"===typeof t?t=new t("unhandledrejection",{cancelable:!0}):"function"===typeof e?t=new e("unhandledrejection",{cancelable:!0}):(t=a.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,t),t.promise=this,t.reason=this.i,n(t))},e.prototype.A=function(){if(null!=this.g){for(var t=0;t<this.g.length;++t)i.h(this.g[t]);this.g=null}};var i=new n;return e.prototype.F=function(t){var e=this.j();t.J(e.resolve,e.reject)},e.prototype.G=function(t,e){var n=this.j();try{t.call(e,n.resolve,n.reject)}catch(r){n.reject(r)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{a(t(e))}catch(n){s(n)}}:e}var a,s,i=new e((function(t,e){a=t,s=e}));return this.J(r(t,a),r(n,s)),i},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.J=function(t,e){function n(){switch(r.h){case 1:t(r.i);break;case 2:e(r.i);break;default:throw Error("Unexpected state: "+r.h)}}var r=this;null==this.g?i.h(n):this.g.push(n),this.o=!0},e.resolve=r,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var a=o(t),s=a.next();!s.done;s=a.next())r(s.value).J(e,n)}))},e.all=function(t){var n=o(t),a=n.next();return a.done?r([]):new e((function(t,e){function s(e){return function(n){i[e]=n,0==--o&&t(i)}}var i=[],o=0;do{i.push(void 0),o++,r(a.value).J(s(i.length-1),e),a=n.next()}while(!a.done)}))},e})),s("Object.is",(function(t){return t||function(t,e){return t===e?0!==t||1/t===1/e:t!==t&&e!==e}})),s("Array.prototype.includes",(function(t){return t||function(t,e){var n=this;n instanceof String&&(n=String(n));var r=n.length;for(0>(e=e||0)&&(e=Math.max(e+r,0));e<r;e++){var a=n[e];if(a===t||Object.is(a,t))return!0}return!1}})),s("String.prototype.includes",(function(t){return t||function(t,e){if(null==this)throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(t instanceof RegExp)throw new TypeError("First argument to String.prototype.includes must not be a regular expression");return-1!==this.indexOf(t,e||0)}})),s("Array.prototype.keys",(function(t){return t||function(){return function(t,e){t instanceof String&&(t+="");var n=0,r=!1,a={next:function(){if(!r&&n<t.length){var a=n++;return{value:e(a,t[a]),done:!1}}return r=!0,{done:!0,value:void 0}}};return a[Symbol.iterator]=function(){return a},a}(this,(function(t){return t}))}}));var _=this||self;function O(t,e){t=t.split(".");var n,r=_;t[0]in r||"undefined"==typeof r.execScript||r.execScript("var "+t[0]);for(;t.length&&(n=t.shift());)t.length||void 0===e?r=r[n]&&r[n]!==Object.prototype[n]?r[n]:r[n]={}:r[n]=e}function A(t,e){return e=String.fromCharCode.apply(null,e),null==t?e:t+e}var E,M,k="undefined"!==typeof TextDecoder,I="undefined"!==typeof TextEncoder;function F(t){if(I)t=(M||(M=new TextEncoder)).encode(t);else{var e=void 0;e=void 0!==e&&e;for(var n=0,r=new Uint8Array(3*t.length),a=0;a<t.length;a++){var s=t.charCodeAt(a);if(128>s)r[n++]=s;else{if(2048>s)r[n++]=s>>6|192;else{if(55296<=s&&57343>=s){if(56319>=s&&a<t.length){var i=t.charCodeAt(++a);if(56320<=i&&57343>=i){s=1024*(s-55296)+i-56320+65536,r[n++]=s>>18|240,r[n++]=s>>12&63|128,r[n++]=s>>6&63|128,r[n++]=63&s|128;continue}a--}if(e)throw Error("Found an unpaired surrogate");s=65533}r[n++]=s>>12|224,r[n++]=s>>6&63|128}r[n++]=63&s|128}}t=r.subarray(0,n)}return t}var D={},C=null;function L(t,e){void 0===e&&(e=0),j(),e=D[e];for(var n=Array(Math.floor(t.length/3)),r=e[64]||"",a=0,s=0;a<t.length-2;a+=3){var i=t[a],o=t[a+1],u=t[a+2],p=e[i>>2];i=e[(3&i)<<4|o>>4],o=e[(15&o)<<2|u>>6],u=e[63&u],n[s++]=p+i+o+u}switch(p=0,u=r,t.length-a){case 2:u=e[(15&(p=t[a+1]))<<2]||r;case 1:t=t[a],n[s]=e[t>>2]+e[(3&t)<<4|p>>4]+u+r}return n.join("")}function R(t){var e=t.length,n=3*e/4;n%3?n=Math.floor(n):-1!="=.".indexOf(t[e-1])&&(n=-1!="=.".indexOf(t[e-2])?n-2:n-1);var r=new Uint8Array(n),a=0;return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),a=C[n];if(null!=a)return a;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}j();for(var r=0;;){var a=n(-1),s=n(0),i=n(64),o=n(64);if(64===o&&-1===a)break;e(a<<2|s>>4),64!=i&&(e(s<<4&240|i>>2),64!=o&&e(i<<6&192|o))}}(t,(function(t){r[a++]=t})),r.subarray(0,a)}function j(){if(!C){C={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++){var r=t.concat(e[n].split(""));D[n]=r;for(var a=0;a<r.length;a++){var s=r[a];void 0===C[s]&&(C[s]=a)}}}}var P,V="function"===typeof Uint8Array.prototype.slice;function B(t,e,n){return e===n?P||(P=new Uint8Array(0)):V?t.slice(e,n):new Uint8Array(t.subarray(e,n))}var z=0;function U(t,e){e=void 0!==(e=void 0===e?{}:e).v&&e.v,this.h=null,this.g=this.j=this.l=0,this.m=!1,this.v=e,t&&$(this,t)}function $(t,e){e=e.constructor===Uint8Array?e:e.constructor===ArrayBuffer||e.constructor===Array?new Uint8Array(e):e.constructor===String?R(e):e instanceof Uint8Array?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(0),t.h=e,t.l=0,t.j=t.h.length,t.g=t.l}function H(t){for(var e=128,n=0,r=0,a=0;4>a&&128<=e;a++)n|=(127&(e=t.h[t.g++]))<<7*a;if(128<=e&&(n|=(127&(e=t.h[t.g++]))<<28,r|=(127&e)>>4),128<=e)for(a=0;5>a&&128<=e;a++)r|=(127&(e=t.h[t.g++]))<<7*a+3;if(128>e)return t=n>>>0,(r=2147483648&(e=r>>>0))&&(e=~e>>>0,0==(t=1+~t>>>0)&&(e=e+1>>>0)),t=4294967296*e+(t>>>0),r?-t:t;t.m=!0}U.prototype.reset=function(){this.g=this.l},U.prototype.i=function(){var t=this.h,e=t[this.g],n=127&e;return 128>e?(this.g+=1,n):(n|=(127&(e=t[this.g+1]))<<7,128>e?(this.g+=2,n):(n|=(127&(e=t[this.g+2]))<<14,128>e?(this.g+=3,n):(n|=(127&(e=t[this.g+3]))<<21,128>e?(this.g+=4,n):(n|=(15&(e=t[this.g+4]))<<28,128>e?(this.g+=5,n>>>0):(this.g+=5,128<=t[this.g++]&&128<=t[this.g++]&&128<=t[this.g++]&&128<=t[this.g++]&&this.g++,n)))))},U.prototype.o=function(){var t=this.h[this.g],e=this.h[this.g+1],n=this.h[this.g+2],r=this.h[this.g+3];return this.g+=4,t=2*((n=(t<<0|e<<8|n<<16|r<<24)>>>0)>>31)+1,e=n>>>23&255,n&=8388607,255==e?n?NaN:1/0*t:0==e?t*Math.pow(2,-149)*n:t*Math.pow(2,e-150)*(n+Math.pow(2,23))};var G=[];function W(){this.g=new Uint8Array(64),this.h=0}function X(t,e){for(;127<e;)t.push(127&e|128),e>>>=7;t.push(e)}function q(t){var e={},n=void 0!==e.N&&e.N;this.o={v:void 0!==e.v&&e.v},this.N=n,e=this.o,G.length?(n=G.pop(),e&&(n.v=e.v),t&&$(n,t),t=n):t=new U(t,e),this.g=t,this.m=this.g.g,this.h=this.i=this.l=-1,this.j=!1}function K(t){var e=t.g;if((e=e.g==e.j)||(e=t.j)||(e=(e=t.g).m||0>e.g||e.g>e.j),e)return!1;t.m=t.g.g;var n=7&(e=t.g.i());return 0!=n&&5!=n&&1!=n&&2!=n&&3!=n&&4!=n?(t.j=!0,!1):(t.i=e,t.l=e>>>3,t.h=n,!0)}function Y(t){switch(t.h){case 0:if(0!=t.h)Y(t);else{for(t=t.g;128&t.h[t.g];)t.g++;t.g++}break;case 1:1!=t.h?Y(t):(t=t.g).g+=8;break;case 2:if(2!=t.h)Y(t);else{var e=t.g.i();(t=t.g).g+=e}break;case 5:5!=t.h?Y(t):(t=t.g).g+=4;break;case 3:for(e=t.l;;){if(!K(t)){t.j=!0;break}if(4==t.h){t.l!=e&&(t.j=!0);break}Y(t)}break;default:t.j=!0}}function Q(t,e,n){var r=t.g.j,a=t.g.i(),s=t.g.g+a;if(t.g.j=s,n(e,t),0!==(n=s-t.g.g))throw Error("Message parsing ended unexpectedly. Expected to read "+a+" bytes, instead read "+(a-n)+" bytes, either the data ended unexpectedly or the message misreported its own length");return t.g.g=s,t.g.j=r,e}function J(t){return t.g.o()}function Z(t){var e,n=t.g.i(),r=(t=t.g).g;if(t.g+=n,t=t.h,k)(e=E)||(e=E=new TextDecoder("utf-8",{fatal:!1})),e=e.decode(t.subarray(r,r+n));else{n=r+n;for(var a,s,i,o=[],u=null;r<n;)128>(a=t[r++])?o.push(a):224>a?r>=n?o.push(65533):(s=t[r++],194>a||128!==(192&s)?(r--,o.push(65533)):o.push((31&a)<<6|63&s)):240>a?r>=n-1?o.push(65533):128!==(192&(s=t[r++]))||224===a&&160>s||237===a&&160<=s||128!==(192&(e=t[r++]))?(r--,o.push(65533)):o.push((15&a)<<12|(63&s)<<6|63&e):244>=a?r>=n-2?o.push(65533):128!==(192&(s=t[r++]))||0!==s-144+(a<<28)>>30||128!==(192&(e=t[r++]))||128!==(192&(i=t[r++]))?(r--,o.push(65533)):(a=(7&a)<<18|(63&s)<<12|(63&e)<<6|63&i,a-=65536,o.push(55296+(a>>10&1023),56320+(1023&a))):o.push(65533),8192<=o.length&&(u=A(u,o),o.length=0);e=A(u,o)}return e}function tt(t,e,n){var r=t.g.i();for(r=t.g.g+r;t.g.g<r;)n.push(e.call(t.g))}function et(t,e){2==t.h?tt(t,U.prototype.o,e):e.push(J(t))}function nt(){this.h=[],this.i=0,this.g=new W}function rt(t,e){0!==e.length&&(t.h.push(e),t.i+=e.length)}function at(t){var e=t.i+t.g.length();if(0===e)return new Uint8Array(0);e=new Uint8Array(e);for(var n=t.h,r=n.length,a=0,s=0;s<r;s++){var i=n[s];0!==i.length&&(e.set(i,a),a+=i.length)}return 0!==(r=(n=t.g).h)&&(e.set(n.g.subarray(0,r),a),n.h=0),t.h=[e],e}function st(t,e,n){if(null!=n){X(t.g,8*e+5),t=t.g;var r=n;0===(r=(n=0>r?1:0)?-r:r)?0<1/r?z=0:(0,z=2147483648):isNaN(r)?(0,z=2147483647):34028234663852886e22<r?(0,z=(n<<31|2139095040)>>>0):11754943508222875e-54>r?(r=Math.round(r/Math.pow(2,-149)),0,z=(n<<31|r)>>>0):(e=Math.floor(Math.log(r)/Math.LN2),r*=Math.pow(2,-e),16777216<=(r=Math.round(8388608*r))&&++e,0,z=(n<<31|e+127<<23|8388607&r)>>>0),n=z,t.push(n>>>0&255),t.push(n>>>8&255),t.push(n>>>16&255),t.push(n>>>24&255)}}W.prototype.push=function(t){if(!(this.h+1<this.g.length)){var e=this.g;this.g=new Uint8Array(Math.ceil(1+2*this.g.length)),this.g.set(e)}this.g[this.h++]=t},W.prototype.length=function(){return this.h},W.prototype.end=function(){var t=this.g,e=this.h;return this.h=0,B(t,0,e)},q.prototype.reset=function(){this.g.reset(),this.h=this.l=-1};var it="function"===typeof Uint8Array;function ot(t,e,n){if(null!=t)return"object"===typeof t?it&&t instanceof Uint8Array?n(t):ut(t,e,n):e(t)}function ut(t,e,n){if(Array.isArray(t)){for(var r=Array(t.length),a=0;a<t.length;a++)r[a]=ot(t[a],e,n);return Array.isArray(t)&&t.W&&ht(r),r}for(a in r={},t)r[a]=ot(t[a],e,n);return r}function pt(t){return"number"===typeof t?isFinite(t)?t:String(t):t}var ct,lt={W:{value:!0,configurable:!0}};function ht(t){return Array.isArray(t)&&!Object.isFrozen(t)&&Object.defineProperties(t,lt),t}function ft(t,e,n){var r=ct;if(ct=null,t||(t=r),r=this.constructor.ca,t||(t=r?[r]:[]),this.j=r?0:-1,this.m=this.g=null,this.h=t,t=(r=this.h.length)-1,!r||(null===(r=this.h[t])||"object"!=typeof r||Array.isArray(r)||it&&r instanceof Uint8Array)?void 0!==e&&-1<e?(this.l=Math.max(e,t+1-this.j),this.i=null):this.l=Number.MAX_VALUE:(this.l=t-this.j,this.i=r),n)for(e=0;e<n.length;e++)(t=n[e])<this.l?(t+=this.j,(r=this.h[t])?ht(r):this.h[t]=mt):(dt(this),(r=this.i[t])?ht(r):this.i[t]=mt)}var mt=Object.freeze(ht([]));function dt(t){var e=t.l+t.j;t.h[e]||(t.i=t.h[e]={})}function yt(t,e,n){return-1===e?null:void 0!==n&&n||e>=t.l?t.i?t.i[e]:void 0:t.h[e+t.j]}function gt(t,e){var n=void 0!==n&&n,r=yt(t,e,n);return null==r&&(r=mt),r===mt&&Nt(t,e,r=ht([]),n),r}function vt(t){var e=gt(t,3);if(t.m||(t.m={}),!t.m[3]){for(var n=0;n<e.length;n++)e[n]=+e[n];t.m[3]=!0}return e}function bt(t,e,n){return null==(t=yt(t,e))?n:t}function xt(t,e,n){return null==(t=null==(t=yt(t,e))?t:+t)?void 0===n?0:n:t}function Nt(t,e,n,r){void 0!==r&&r||e>=t.l?(dt(t),t.i[e]=n):t.h[e+t.j]=n}function Tt(t,e,n){if(-1===n)return null;if(t.g||(t.g={}),!t.g[n]){var r=yt(t,n,!1);r&&(t.g[n]=new e(r))}return t.g[n]}function wt(t,e){t.g||(t.g={});var n=t.g[1];if(!n){var r=gt(t,1);n=[];for(var a=0;a<r.length;a++)n[a]=new e(r[a]);t.g[1]=n}return n}function St(t,e,n){var r=void 0!==r&&r;t.g||(t.g={});var a=n?Ot(n,!1):n;t.g[e]=n,Nt(t,e,a,r)}function _t(t,e,n,r){var a=wt(t,n);e=e||new n,t=gt(t,1),void 0!=r?(a.splice(r,0,e),t.splice(r,0,Ot(e,!1))):(a.push(e),t.push(Ot(e,!1)))}function Ot(t,e){if(t.g)for(var n in t.g){var r=t.g[n];if(Array.isArray(r))for(var a=0;a<r.length;a++)r[a]&&Ot(r[a],e);else r&&Ot(r,e)}return t.h}function At(t,e){if(t=t.o){rt(e,e.g.end());for(var n=0;n<t.length;n++)rt(e,t[n])}}function Et(t,e){if(4==e.h)return!1;var n=e.m;return Y(e),e.N||(e=B(e.g.h,n,e.g.g),(n=t.o)?n.push(e):t.o=[e]),!0}function Mt(t){ft.call(this,t,-1,It)}function kt(t,e){for(;K(e);)switch(e.i){case 8:var n=e.g.i();Nt(t,1,n);break;case 16:Nt(t,2,n=e.g.i());break;case 29:case 26:et(e,t.getPackedDataList());break;case 32:Nt(t,4,n=H(e.g));break;default:if(!Et(t,e))return t}return t}ft.prototype.toJSON=function(){return ut(Ot(this,!1),pt,L)},ft.prototype.toString=function(){return Ot(this,!1).toString()},m(Mt,ft),Mt.prototype.getRows=function(){return yt(this,1)},Mt.prototype.getCols=function(){return yt(this,2)},Mt.prototype.getPackedDataList=function(){return vt(this)},Mt.prototype.getLayout=function(){return bt(this,4,0)};var It=[3];function Ft(t,e){var n=void 0;return new(n||(n=Promise))((function(r,a){function s(t){try{o(e.next(t))}catch(n){a(n)}}function i(t){try{o(e.throw(t))}catch(n){a(n)}}function o(t){t.done?r(t.value):new n((function(e){e(t.value)})).then(s,i)}o((e=e.apply(t,void 0)).next())}))}function Dt(t){ft.call(this,t)}function Ct(t,e){for(;K(e);)switch(e.i){case 8:var n=e.g.i();Nt(t,1,n);break;case 21:Nt(t,2,n=J(e));break;case 26:Nt(t,3,n=Z(e));break;case 34:Nt(t,4,n=Z(e));break;default:if(!Et(t,e))return t}return t}function Lt(t){ft.call(this,t,-1,Rt)}m(Dt,ft),m(Lt,ft),Lt.prototype.addClassification=function(t,e){return _t(this,t,Dt,e),this};var Rt=[1];function jt(t){ft.call(this,t)}function Pt(t,e){for(;K(e);)switch(e.i){case 13:var n=J(e);Nt(t,1,n);break;case 21:Nt(t,2,n=J(e));break;case 29:Nt(t,3,n=J(e));break;case 37:Nt(t,4,n=J(e));break;case 45:Nt(t,5,n=J(e));break;default:if(!Et(t,e))return t}return t}function Vt(t){ft.call(this,t,-1,zt)}function Bt(t){t:{var e=new Vt;for(t=new q(t);K(t);)switch(t.i){case 10:_t(e,Q(t,new jt,Pt),jt,void 0);break;default:if(!Et(e,t))break t}}return e}m(jt,ft),m(Vt,ft);var zt=[1];function Ut(t){ft.call(this,t)}function $t(t){ft.call(this,t,-1,Gt)}function Ht(t,e){for(;K(e);)switch(e.i){case 8:var n=H(e.g);Nt(t,1,n);break;case 16:Nt(t,2,n=H(e.g));break;case 29:case 26:et(e,t.getVertexBufferList());break;case 32:case 34:n=e;var r=t.getIndexBufferList();2==n.h?tt(n,U.prototype.i,r):r.push(n.g.i());break;default:if(!Et(t,e))return t}return t}m(Ut,ft),m($t,ft),$t.prototype.getVertexType=function(){return bt(this,1,0)},$t.prototype.getPrimitiveType=function(){return bt(this,2,0)},$t.prototype.getVertexBufferList=function(){return vt(this)},$t.prototype.getIndexBufferList=function(){return gt(this,4)};var Gt=[3,4];function Wt(t){ft.call(this,t)}function Xt(t,e,n){if(n=t.createShader(0===n?t.VERTEX_SHADER:t.FRAGMENT_SHADER),t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+t.getShaderInfoLog(n));return n}function qt(t){return wt(t,Dt).map((function(t){return{index:bt(t,1,0),Y:xt(t,2),label:null!=yt(t,3)?bt(t,3,""):void 0,displayName:null!=yt(t,4)?bt(t,4,""):void 0}}))}function Kt(t){return{x:xt(t,1),y:xt(t,2),z:xt(t,3),visibility:null!=yt(t,4)?xt(t,4):void 0}}function Yt(t,e){this.h=t,this.g=e,this.l=0}function Qt(t,e,n){return function(t,e){var n=t.g;if(void 0===t.m){var r=Xt(n,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),a=Xt(n,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),s=n.createProgram();if(n.attachShader(s,r),n.attachShader(s,a),n.linkProgram(s),!n.getProgramParameter(s,n.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+n.getProgramInfoLog(s));r=t.m=s,n.useProgram(r),a=n.getUniformLocation(r,"sampler0"),t.j={I:n.getAttribLocation(r,"aVertex"),H:n.getAttribLocation(r,"aTex"),da:a},t.s=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,t.s),n.enableVertexAttribArray(t.j.I),n.vertexAttribPointer(t.j.I,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),t.o=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,t.o),n.enableVertexAttribArray(t.j.H),n.vertexAttribPointer(t.j.H,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),n.uniform1i(a,0)}r=t.j,n.useProgram(t.m),n.canvas.width=e.width,n.canvas.height=e.height,n.viewport(0,0,e.width,e.height),n.activeTexture(n.TEXTURE0),t.h.bindTexture2d(e.glName),n.enableVertexAttribArray(r.I),n.bindBuffer(n.ARRAY_BUFFER,t.s),n.vertexAttribPointer(r.I,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(r.H),n.bindBuffer(n.ARRAY_BUFFER,t.o),n.vertexAttribPointer(r.H,2,n.FLOAT,!1,0,0),n.bindFramebuffer(n.DRAW_FRAMEBUFFER?n.DRAW_FRAMEBUFFER:n.FRAMEBUFFER,null),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.colorMask(!0,!0,!0,!0),n.drawArrays(n.TRIANGLE_FAN,0,4),n.disableVertexAttribArray(r.I),n.disableVertexAttribArray(r.H),n.bindBuffer(n.ARRAY_BUFFER,null),t.h.bindTexture2d(0)}(t,e),"function"===typeof t.g.canvas.transferToImageBitmap?Promise.resolve(t.g.canvas.transferToImageBitmap()):n?Promise.resolve(t.g.canvas):"function"===typeof createImageBitmap?createImageBitmap(t.g.canvas):(void 0===t.i&&(t.i=document.createElement("canvas")),new Promise((function(e){t.i.height=t.g.canvas.height,t.i.width=t.g.canvas.width,t.i.getContext("2d",{}).drawImage(t.g.canvas,0,0,t.g.canvas.width,t.g.canvas.height),e(t.i)})))}function Jt(t){this.g=t}m(Wt,ft),Wt.prototype.getMesh=function(){return Tt(this,$t,1)},Wt.prototype.getPoseTransformMatrix=function(){return Tt(this,Mt,2)};var Zt=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function te(t,e){return e+t}function ee(t,e){window[t]=e}function ne(t){if(this.g=t,this.listeners={},this.j={},this.F={},this.m={},this.s={},this.G=this.o=this.R=!0,this.C=Promise.resolve(),this.P="",this.B={},this.locateFile=t&&t.locateFile||te,"object"===typeof window)var e=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else{if("undefined"===typeof location)throw Error("solutions can only be loaded on a web page or in a web worker");e=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/"}if(this.S=e,t.options)for(var n=(e=o(Object.keys(t.options))).next();!n.done;n=e.next()){n=n.value;var r=t.options[n].default;void 0!==r&&(this.j[n]="function"===typeof r?r():r)}}function re(t){return Ft(t,(function t(){var e,n,r,a,s,i,o,p,c,l,h,f=this;return w(t,(function(t){switch(t.g){case 1:return e=f,f.R?(n=function(t,e){return void 0===t.g.files?[]:"function"===typeof t.g.files?t.g.files(e):t.g.files}(f,f.j),v(t,function(){return Ft(this,(function t(){return w(t,(function(t){switch(t.g){case 1:return t.m=2,v(t,WebAssembly.instantiate(Zt),4);case 4:t.g=3,t.m=0;break;case 2:return t.m=0,t.j=null,t.return(!1);case 3:return t.return(!0)}}))}))}(),2)):t.return();case 2:if(r=t.h,"object"===typeof window)return ee("createMediapipeSolutionsWasm",{locateFile:f.locateFile}),ee("createMediapipeSolutionsPackedAssets",{locateFile:f.locateFile}),i=n.filter((function(t){return void 0!==t.data})),o=n.filter((function(t){return void 0===t.data})),p=Promise.all(i.map((function(t){var n=ae(e,t.url);if(void 0!==t.path){var r=t.path;n=n.then((function(t){return e.overrideFile(r,t),Promise.resolve(t)}))}return n}))),c=Promise.all(o.map((function(t){return void 0===t.simd||t.simd&&r||!t.simd&&!r?function(t){var e=document.createElement("script");return e.setAttribute("src",t),e.setAttribute("crossorigin","anonymous"),new Promise((function(t){e.addEventListener("load",(function(){t()}),!1),e.addEventListener("error",(function(){t()}),!1),document.body.appendChild(e)}))}(e.locateFile(t.url,e.S)):Promise.resolve()}))).then((function(){return Ft(e,(function t(){var e,n,r=this;return w(t,(function(t){if(1==t.g)return e=window.createMediapipeSolutionsWasm,n=window.createMediapipeSolutionsPackedAssets,v(t,e(n),2);r.h=t.h,t.g=0}))}))})),l=Ft(e,(function t(){var e=this;return w(t,(function(t){return e.g.graph&&e.g.graph.url?t=v(t,ae(e,e.g.graph.url),0):(t.g=0,t=void 0),t}))})),v(t,Promise.all([c,p,l]),7);if("function"!==typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");return a=n.filter((function(t){return void 0===t.simd||t.simd&&r||!t.simd&&!r})).map((function(t){return e.locateFile(t.url,e.S)})),importScripts.apply(null,u(a)),v(t,createMediapipeSolutionsWasm(Module),6);case 6:f.h=t.h,f.l=new OffscreenCanvas(1,1),f.h.canvas=f.l,s=f.h.GL.createContext(f.l,{antialias:!1,alpha:!1,ba:"undefined"!==typeof WebGL2RenderingContext?2:1}),f.h.GL.makeContextCurrent(s),t.g=4;break;case 7:if(f.l=document.createElement("canvas"),!(h=f.l.getContext("webgl2",{}))&&!(h=f.l.getContext("webgl",{})))return alert("Failed to create WebGL canvas context when passing video frame."),t.return();f.D=h,f.h.canvas=f.l,f.h.createContext(f.l,!0,!0,{});case 4:f.i=new f.h.SolutionWasm,f.R=!1,t.g=0}}))}))}function ae(t,e){return Ft(t,(function t(){var n,r,a=this;return w(t,(function(t){return e in a.F?t.return(a.F[e]):(n=a.locateFile(e,""),r=fetch(n).then((function(t){return t.arrayBuffer()})),a.F[e]=r,t.return(r))}))}))}function se(t,e,n){return Ft(t,(function t(){var r,a,s,i,u,p,c,l,h,f,m,d,y,g,b=this;return w(t,(function(t){switch(t.g){case 1:if(!n)return t.return(e);for(r={},a=0,s=o(Object.keys(n)),i=s.next();!i.done;i=s.next())u=i.value,"string"!==typeof(p=n[u])&&"texture"===p.type&&void 0!==e[p.stream]&&++a;1<a&&(b.G=!1),c=o(Object.keys(n)),i=c.next();case 2:if(i.done){t.g=4;break}if(l=i.value,"string"===typeof(h=n[l]))return y=r,g=l,v(t,function(t,e,n){return Ft(t,(function t(){var r,a=this;return w(t,(function(t){return"number"===typeof n||n instanceof Uint8Array||n instanceof a.h.Uint8BlobList?t.return(n):n instanceof a.h.Texture2dDataOut?((r=a.s[e])||(r=new Yt(a.h,a.D),a.s[e]=r),t.return(Qt(r,n,a.G))):t.return(void 0)}))}))}(b,l,e[h]),14);if(f=e[h.stream],"detection_list"===h.type){if(f){for(var x=f.getRectList(),N=f.getLandmarksList(),T=f.getClassificationsList(),S=[],_=0;_<x.size();++_){var O=x.get(_);t:{var A=new Ut;for(O=new q(O);K(O);)switch(O.i){case 13:var E=J(O);Nt(A,1,E);break;case 21:Nt(A,2,E=J(O));break;case 29:Nt(A,3,E=J(O));break;case 37:Nt(A,4,E=J(O));break;case 45:Nt(A,5,E=J(O));break;case 48:Nt(A,6,E=H(O.g));break;default:if(!Et(A,O))break t}}A={Z:xt(A,1),$:xt(A,2),height:xt(A,3),width:xt(A,4),rotation:xt(A,5,0),X:bt(A,6,0)},O=wt(Bt(N.get(_)),jt).map(Kt);var M=T.get(_);t:for(E=new Lt,M=new q(M);K(M);)switch(M.i){case 10:E.addClassification(Q(M,new Dt,Ct));break;default:if(!Et(E,M))break t}A={T:A,O:O,M:qt(E)},S.push(A)}x=S}else x=[];r[l]=x,t.g=7;break}if("proto_list"===h.type){if(f){for(x=Array(f.size()),N=0;N<f.size();N++)x[N]=f.get(N);f.delete()}else x=[];r[l]=x,t.g=7;break}if(void 0===f){t.g=3;break}if("float_list"===h.type){r[l]=f,t.g=7;break}if("proto"===h.type){r[l]=f,t.g=7;break}if("texture"!==h.type)throw Error("Unknown output config type: '"+h.type+"'");return(m=b.s[l])||(m=new Yt(b.h,b.D),b.s[l]=m),v(t,Qt(m,f,b.G),13);case 13:d=t.h,r[l]=d;case 7:h.transform&&r[l]&&(r[l]=h.transform(r[l])),t.g=3;break;case 14:y[g]=t.h;case 3:i=c.next(),t.g=2;break;case 4:return t.return(r)}}))}))}function ie(t,e){for(var n=e.name||"$",r=[].concat(u(e.wants)),a=new t.h.StringList,s=o(e.wants),i=s.next();!i.done;i=s.next())a.push_back(i.value);s=t.h.PacketListener.implement({onResults:function(a){for(var s={},i=0;i<e.wants.length;++i)s[r[i]]=a.get(i);var o=t.listeners[n];o&&(t.C=se(t,s,e.outs).then((function(n){n=o(n);for(var a=0;a<e.wants.length;++a){var i=s[r[a]];"object"===typeof i&&i.hasOwnProperty&&i.hasOwnProperty("delete")&&i.delete()}n&&(t.C=n)})))}}),t.i.attachMultiListener(a,s),a.delete()}function oe(t){var e=(t=function(t){t:{var e=new Wt;for(t=new q(t);K(t);)switch(t.i){case 10:var n=Q(t,new $t,Ht);St(e,1,n);break;case 18:St(e,2,n=Q(t,new Mt,kt));break;default:if(!Et(e,t))break t}}return e}(t)).getMesh();if(!e)return t;var n=new Float32Array(e.getVertexBufferList());e.getVertexBufferList=function(){return n};var r=new Uint32Array(e.getIndexBufferList());return e.getIndexBufferList=function(){return r},t}(t=ne.prototype).close=function(){return this.i&&this.i.delete(),Promise.resolve()},t.reset=function(){return Ft(this,(function t(){var e=this;return w(t,(function(t){e.i&&(e.i.reset(),e.m={},e.s={}),t.g=0}))}))},t.setOptions=function(t,e){var n=this;if(e=e||this.g.options){for(var r=[],a=[],s={},i=o(Object.keys(t)),u=i.next();!u.done;s={K:s.K,L:s.L},u=i.next()){var p=u.value;p in this.j&&this.j[p]===t[p]||(this.j[p]=t[p],void 0!==(u=e[p])&&(u.onChange&&(s.K=u.onChange,s.L=t[p],r.push(function(t){return function(){return Ft(n,(function e(){var n=this;return w(e,(function(e){if(1==e.g)return v(e,t.K(t.L),2);!0===e.h&&(n.o=!0),e.g=0}))}))}}(s))),u.graphOptionXref&&(p={valueNumber:1===u.type?t[p]:0,valueBoolean:0===u.type&&t[p],valueString:2===u.type?t[p]:""},u=Object.assign(Object.assign(Object.assign({},{calculatorName:"",calculatorIndex:0}),u.graphOptionXref),p),a.push(u))))}0===r.length&&0===a.length||(this.o=!0,this.A=(void 0===this.A?[]:this.A).concat(a),this.u=(void 0===this.u?[]:this.u).concat(r))}},t.initialize=function(){return Ft(this,(function t(){var e=this;return w(t,(function(t){return 1==t.g?v(t,re(e),2):3!=t.g?v(t,Ft(e,(function t(){var e,n,r,a,s,i,u,p,c=this;return w(t,(function(t){if(1==t.g)return c.g.graph&&c.g.graph.url&&c.P===c.g.graph.url?t.return():(c.o=!0,c.g.graph&&c.g.graph.url?(c.P=c.g.graph.url,v(t,ae(c,c.g.graph.url),3)):void(t.g=2));for(2!=t.g&&(e=t.h,c.i.loadGraph(e)),n=o(Object.keys(c.B)),r=n.next();!r.done;r=n.next())a=r.value,c.i.overrideFile(a,c.B[a]);if(c.B={},c.g.listeners)for(s=o(c.g.listeners),i=s.next();!i.done;i=s.next())u=i.value,ie(c,u);p=c.j,c.j={},c.setOptions(p),t.g=0}))})),3):v(t,function(t){return Ft(t,(function t(){var e,n,r,a,s,i,u=this;return w(t,(function(t){switch(t.g){case 1:if(!u.o)return t.return();if(!u.u){t.g=2;break}e=o(u.u),n=e.next();case 3:if(n.done){t.g=5;break}return v(t,(0,n.value)(),4);case 4:n=e.next(),t.g=3;break;case 5:u.u=void 0;case 2:if(u.A){for(r=new u.h.GraphOptionChangeRequestList,a=o(u.A),s=a.next();!s.done;s=a.next())i=s.value,r.push_back(i);u.i.changeOptions(r),r.delete(),u.A=void 0}u.o=!1,t.g=0}}))}))}(e),0)}))}))},t.overrideFile=function(t,e){this.i?this.i.overrideFile(t,e):this.B[t]=e},t.clearOverriddenFiles=function(){this.B={},this.i&&this.i.clearOverriddenFiles()},t.send=function(t,e){return Ft(this,(function n(){var r,a,s,i,u,p,c,l,h,f=this;return w(n,(function(n){switch(n.g){case 1:return f.g.inputs?(r=1e3*(void 0===e||null===e?performance.now():e),v(n,f.C,2)):n.return();case 2:return v(n,f.initialize(),3);case 3:for(a=new f.h.PacketDataList,s=o(Object.keys(t)),i=s.next();!i.done;i=s.next())if(u=i.value,p=f.g.inputs[u]){t:{var m=f,d=t[u];switch(p.type){case"video":var y=m.m[p.stream];if(y||(y=new Yt(m.h,m.D),m.m[p.stream]=y),0===(m=y).l&&(m.l=m.h.createTexture()),"undefined"!==typeof HTMLVideoElement&&d instanceof HTMLVideoElement){var g=d.videoWidth;y=d.videoHeight}else"undefined"!==typeof HTMLImageElement&&d instanceof HTMLImageElement?(g=d.naturalWidth,y=d.naturalHeight):(g=d.width,y=d.height);y={glName:m.l,width:g,height:y},(g=m.g).canvas.width=y.width,g.canvas.height=y.height,g.activeTexture(g.TEXTURE0),m.h.bindTexture2d(m.l),g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,d),m.h.bindTexture2d(0),m=y;break t;case"detections":for((y=m.m[p.stream])||(y=new Jt(m.h),m.m[p.stream]=y),(m=y).data||(m.data=new m.g.DetectionListData),m.data.reset(d.length),y=0;y<d.length;++y){g=d[y];var b=m.data,x=b.setBoundingBox,N=y,T=g.T,w=new Ut;Nt(w,1,T.Z),Nt(w,2,T.$),Nt(w,3,T.height),Nt(w,4,T.width),Nt(w,5,T.rotation),Nt(w,6,T.X);var S=T=new nt;st(S,1,yt(w,1)),st(S,2,yt(w,2)),st(S,3,yt(w,3)),st(S,4,yt(w,4)),st(S,5,yt(w,5));var _=yt(w,6);if(null!=_&&null!=_){X(S.g,48);var O=S.g,A=_;_=0>A;var E=(A=Math.abs(A))>>>0;for(A=Math.floor((A-E)/4294967296),A>>>=0,_&&(A=~A>>>0,4294967295<(E=1+(~E>>>0))&&(E=0,4294967295<++A&&(A=0))),_=z=E,E=A;0<E||127<_;)O.push(127&_|128),_=(_>>>7|E<<25)>>>0,E>>>=7;O.push(_)}if(At(w,S),T=at(T),x.call(b,N,T),g.O)for(b=0;b<g.O.length;++b)S=!!(w=g.O[b]).visibility,N=(x=m.data).addNormalizedLandmark,T=y,w=Object.assign(Object.assign({},w),{visibility:S?w.visibility:0}),Nt(S=new jt,1,w.x),Nt(S,2,w.y),Nt(S,3,w.z),w.visibility&&Nt(S,4,w.visibility),st(O=w=new nt,1,yt(S,1)),st(O,2,yt(S,2)),st(O,3,yt(S,3)),st(O,4,yt(S,4)),st(O,5,yt(S,5)),At(S,O),w=at(w),N.call(x,T,w);if(g.M)for(b=0;b<g.M.length;++b){if(N=(x=m.data).addClassification,T=y,w=g.M[b],Nt(S=new Dt,2,w.Y),w.index&&Nt(S,1,w.index),w.label&&Nt(S,3,w.label),w.displayName&&Nt(S,4,w.displayName),O=w=new nt,null!=(E=yt(S,1))&&null!=E)if(X(O.g,8),_=O.g,0<=E)X(_,E);else{for(A=0;9>A;A++)_.push(127&E|128),E>>=7;_.push(1)}st(O,2,yt(S,2)),null!=(_=yt(S,3))&&(_=F(_),X(O.g,26),X(O.g,_.length),rt(O,O.g.end()),rt(O,_)),null!=(_=yt(S,4))&&(_=F(_),X(O.g,34),X(O.g,_.length),rt(O,O.g.end()),rt(O,_)),At(S,O),w=at(w),N.call(x,T,w)}}m=m.data;break t;default:m={}}}switch(c=m,l=p.stream,p.type){case"video":a.pushTexture2d(Object.assign(Object.assign({},c),{stream:l,timestamp:r}));break;case"detections":(h=c).stream=l,h.timestamp=r,a.pushDetectionList(h);break;default:throw Error("Unknown input config type: '"+p.type+"'")}}return f.i.send(a),v(n,f.C,4);case 4:a.delete(),n.g=0}}))}))},t.onResults=function(t,e){this.listeners[e||"$"]=t},O("Solution",ne),O("OptionType",{BOOL:0,NUMBER:1,aa:2,0:"BOOL",1:"NUMBER",2:"STRING"});var ue={files:[{url:"face_mesh_solution_packed_assets_loader.js"},{simd:!0,url:"face_mesh_solution_simd_wasm_bin.js"},{simd:!1,url:"face_mesh_solution_wasm_bin.js"}],graph:{url:"face_mesh.binarypb"},listeners:[{wants:["multi_face_geometry","image_transformed","multi_face_landmarks"],outs:{image:"image_transformed",multiFaceGeometry:{type:"proto_list",stream:"multi_face_geometry",transform:function(t){return t.map(oe)}},multiFaceLandmarks:{type:"proto_list",stream:"multi_face_landmarks",transform:function(t){return t.map((function(t){return wt(Bt(t),jt).map(Kt)}))}}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document},enableFaceGeometry:{type:0,graphOptionXref:{calculatorName:"EnableFaceGeometryConstant",calculatorType:"ConstantSidePacketCalculator",fieldName:"bool_value"}},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},maxNumFaces:{type:1,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorNumFaces",fieldName:"int_value"}},refineLandmarks:{type:0,graphOptionXref:{calculatorType:"ConstantSidePacketCalculator",calculatorName:"ConstantSidePacketCalculatorRefineLandmarks",fieldName:"bool_value"}},minDetectionConfidence:{type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"facelandmarkfrontgpu__facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}},minTrackingConfidence:{type:1,graphOptionXref:{calculatorType:"ThresholdingCalculator",calculatorName:"facelandmarkfrontgpu__facelandmarkgpu__ThresholdingCalculator",fieldName:"threshold"}},cameraNear:{type:1,graphOptionXref:{calculatorType:"FaceGeometryEnvGeneratorCalculator",fieldName:"near"}},cameraFar:{type:1,graphOptionXref:{calculatorType:"FaceGeometryEnvGeneratorCalculator",fieldName:"far"}},cameraVerticalFovDegrees:{type:1,graphOptionXref:{calculatorType:"FaceGeometryEnvGeneratorCalculator",fieldName:"vertical_fov_degrees"}}}},pe=[[61,146],[146,91],[91,181],[181,84],[84,17],[17,314],[314,405],[405,321],[321,375],[375,291],[61,185],[185,40],[40,39],[39,37],[37,0],[0,267],[267,269],[269,270],[270,409],[409,291],[78,95],[95,88],[88,178],[178,87],[87,14],[14,317],[317,402],[402,318],[318,324],[324,308],[78,191],[191,80],[80,81],[81,82],[82,13],[13,312],[312,311],[311,310],[310,415],[415,308]],ce=[[263,249],[249,390],[390,373],[373,374],[374,380],[380,381],[381,382],[382,362],[263,466],[466,388],[388,387],[387,386],[386,385],[385,384],[384,398],[398,362]],le=[[276,283],[283,282],[282,295],[295,285],[300,293],[293,334],[334,296],[296,336]],he=[[33,7],[7,163],[163,144],[144,145],[145,153],[153,154],[154,155],[155,133],[33,246],[246,161],[161,160],[160,159],[159,158],[158,157],[157,173],[173,133]],fe=[[46,53],[53,52],[52,65],[65,55],[70,63],[63,105],[105,66],[66,107]],me=[[10,338],[338,297],[297,332],[332,284],[284,251],[251,389],[389,356],[356,454],[454,323],[323,361],[361,288],[288,397],[397,365],[365,379],[379,378],[378,400],[400,377],[377,152],[152,148],[148,176],[176,149],[149,150],[150,136],[136,172],[172,58],[58,132],[132,93],[93,234],[234,127],[127,162],[162,21],[21,54],[54,103],[103,67],[67,109],[109,10]],de=[].concat(u(pe),u(ce),u(le),u(he),u(fe),u(me));function ye(t){t=t||{},t=Object.assign(Object.assign({},ue),t),this.g=new ne(t)}(t=ye.prototype).close=function(){return this.g.close(),Promise.resolve()},t.onResults=function(t){this.g.onResults(t)},t.initialize=function(){return Ft(this,(function t(){var e=this;return w(t,(function(t){return v(t,e.g.initialize(),0)}))}))},t.reset=function(){this.g.reset()},t.send=function(t){return Ft(this,(function e(){var n=this;return w(e,(function(e){return v(e,n.g.send(t),0)}))}))},t.setOptions=function(t){this.g.setOptions(t)},O("FACE_GEOMETRY",{Layout:{COLUMN_MAJOR:0,ROW_MAJOR:1,0:"COLUMN_MAJOR",1:"ROW_MAJOR"},PrimitiveType:{TRIANGLE:0,0:"TRIANGLE"},VertexType:{VERTEX_PT:0,0:"VERTEX_PT"},DEFAULT_CAMERA_PARAMS:{verticalFovDegrees:63,near:1,far:1e4}}),O("FaceMesh",ye),O("FACEMESH_LIPS",pe),O("FACEMESH_LEFT_EYE",ce),O("FACEMESH_LEFT_EYEBROW",le),O("FACEMESH_LEFT_IRIS",[[474,475],[475,476],[476,477],[477,474]]),O("FACEMESH_RIGHT_EYE",he),O("FACEMESH_RIGHT_EYEBROW",fe),O("FACEMESH_RIGHT_IRIS",[[469,470],[470,471],[471,472],[472,469]]),O("FACEMESH_FACE_OVAL",me),O("FACEMESH_CONTOURS",de),O("FACEMESH_TESSELATION",[[127,34],[34,139],[139,127],[11,0],[0,37],[37,11],[232,231],[231,120],[120,232],[72,37],[37,39],[39,72],[128,121],[121,47],[47,128],[232,121],[121,128],[128,232],[104,69],[69,67],[67,104],[175,171],[171,148],[148,175],[118,50],[50,101],[101,118],[73,39],[39,40],[40,73],[9,151],[151,108],[108,9],[48,115],[115,131],[131,48],[194,204],[204,211],[211,194],[74,40],[40,185],[185,74],[80,42],[42,183],[183,80],[40,92],[92,186],[186,40],[230,229],[229,118],[118,230],[202,212],[212,214],[214,202],[83,18],[18,17],[17,83],[76,61],[61,146],[146,76],[160,29],[29,30],[30,160],[56,157],[157,173],[173,56],[106,204],[204,194],[194,106],[135,214],[214,192],[192,135],[203,165],[165,98],[98,203],[21,71],[71,68],[68,21],[51,45],[45,4],[4,51],[144,24],[24,23],[23,144],[77,146],[146,91],[91,77],[205,50],[50,187],[187,205],[201,200],[200,18],[18,201],[91,106],[106,182],[182,91],[90,91],[91,181],[181,90],[85,84],[84,17],[17,85],[206,203],[203,36],[36,206],[148,171],[171,140],[140,148],[92,40],[40,39],[39,92],[193,189],[189,244],[244,193],[159,158],[158,28],[28,159],[247,246],[246,161],[161,247],[236,3],[3,196],[196,236],[54,68],[68,104],[104,54],[193,168],[168,8],[8,193],[117,228],[228,31],[31,117],[189,193],[193,55],[55,189],[98,97],[97,99],[99,98],[126,47],[47,100],[100,126],[166,79],[79,218],[218,166],[155,154],[154,26],[26,155],[209,49],[49,131],[131,209],[135,136],[136,150],[150,135],[47,126],[126,217],[217,47],[223,52],[52,53],[53,223],[45,51],[51,134],[134,45],[211,170],[170,140],[140,211],[67,69],[69,108],[108,67],[43,106],[106,91],[91,43],[230,119],[119,120],[120,230],[226,130],[130,247],[247,226],[63,53],[53,52],[52,63],[238,20],[20,242],[242,238],[46,70],[70,156],[156,46],[78,62],[62,96],[96,78],[46,53],[53,63],[63,46],[143,34],[34,227],[227,143],[123,117],[117,111],[111,123],[44,125],[125,19],[19,44],[236,134],[134,51],[51,236],[216,206],[206,205],[205,216],[154,153],[153,22],[22,154],[39,37],[37,167],[167,39],[200,201],[201,208],[208,200],[36,142],[142,100],[100,36],[57,212],[212,202],[202,57],[20,60],[60,99],[99,20],[28,158],[158,157],[157,28],[35,226],[226,113],[113,35],[160,159],[159,27],[27,160],[204,202],[202,210],[210,204],[113,225],[225,46],[46,113],[43,202],[202,204],[204,43],[62,76],[76,77],[77,62],[137,123],[123,116],[116,137],[41,38],[38,72],[72,41],[203,129],[129,142],[142,203],[64,98],[98,240],[240,64],[49,102],[102,64],[64,49],[41,73],[73,74],[74,41],[212,216],[216,207],[207,212],[42,74],[74,184],[184,42],[169,170],[170,211],[211,169],[170,149],[149,176],[176,170],[105,66],[66,69],[69,105],[122,6],[6,168],[168,122],[123,147],[147,187],[187,123],[96,77],[77,90],[90,96],[65,55],[55,107],[107,65],[89,90],[90,180],[180,89],[101,100],[100,120],[120,101],[63,105],[105,104],[104,63],[93,137],[137,227],[227,93],[15,86],[86,85],[85,15],[129,102],[102,49],[49,129],[14,87],[87,86],[86,14],[55,8],[8,9],[9,55],[100,47],[47,121],[121,100],[145,23],[23,22],[22,145],[88,89],[89,179],[179,88],[6,122],[122,196],[196,6],[88,95],[95,96],[96,88],[138,172],[172,136],[136,138],[215,58],[58,172],[172,215],[115,48],[48,219],[219,115],[42,80],[80,81],[81,42],[195,3],[3,51],[51,195],[43,146],[146,61],[61,43],[171,175],[175,199],[199,171],[81,82],[82,38],[38,81],[53,46],[46,225],[225,53],[144,163],[163,110],[110,144],[52,65],[65,66],[66,52],[229,228],[228,117],[117,229],[34,127],[127,234],[234,34],[107,108],[108,69],[69,107],[109,108],[108,151],[151,109],[48,64],[64,235],[235,48],[62,78],[78,191],[191,62],[129,209],[209,126],[126,129],[111,35],[35,143],[143,111],[117,123],[123,50],[50,117],[222,65],[65,52],[52,222],[19,125],[125,141],[141,19],[221,55],[55,65],[65,221],[3,195],[195,197],[197,3],[25,7],[7,33],[33,25],[220,237],[237,44],[44,220],[70,71],[71,139],[139,70],[122,193],[193,245],[245,122],[247,130],[130,33],[33,247],[71,21],[21,162],[162,71],[170,169],[169,150],[150,170],[188,174],[174,196],[196,188],[216,186],[186,92],[92,216],[2,97],[97,167],[167,2],[141,125],[125,241],[241,141],[164,167],[167,37],[37,164],[72,38],[38,12],[12,72],[38,82],[82,13],[13,38],[63,68],[68,71],[71,63],[226,35],[35,111],[111,226],[101,50],[50,205],[205,101],[206,92],[92,165],[165,206],[209,198],[198,217],[217,209],[165,167],[167,97],[97,165],[220,115],[115,218],[218,220],[133,112],[112,243],[243,133],[239,238],[238,241],[241,239],[214,135],[135,169],[169,214],[190,173],[173,133],[133,190],[171,208],[208,32],[32,171],[125,44],[44,237],[237,125],[86,87],[87,178],[178,86],[85,86],[86,179],[179,85],[84,85],[85,180],[180,84],[83,84],[84,181],[181,83],[201,83],[83,182],[182,201],[137,93],[93,132],[132,137],[76,62],[62,183],[183,76],[61,76],[76,184],[184,61],[57,61],[61,185],[185,57],[212,57],[57,186],[186,212],[214,207],[207,187],[187,214],[34,143],[143,156],[156,34],[79,239],[239,237],[237,79],[123,137],[137,177],[177,123],[44,1],[1,4],[4,44],[201,194],[194,32],[32,201],[64,102],[102,129],[129,64],[213,215],[215,138],[138,213],[59,166],[166,219],[219,59],[242,99],[99,97],[97,242],[2,94],[94,141],[141,2],[75,59],[59,235],[235,75],[24,110],[110,228],[228,24],[25,130],[130,226],[226,25],[23,24],[24,229],[229,23],[22,23],[23,230],[230,22],[26,22],[22,231],[231,26],[112,26],[26,232],[232,112],[189,190],[190,243],[243,189],[221,56],[56,190],[190,221],[28,56],[56,221],[221,28],[27,28],[28,222],[222,27],[29,27],[27,223],[223,29],[30,29],[29,224],[224,30],[247,30],[30,225],[225,247],[238,79],[79,20],[20,238],[166,59],[59,75],[75,166],[60,75],[75,240],[240,60],[147,177],[177,215],[215,147],[20,79],[79,166],[166,20],[187,147],[147,213],[213,187],[112,233],[233,244],[244,112],[233,128],[128,245],[245,233],[128,114],[114,188],[188,128],[114,217],[217,174],[174,114],[131,115],[115,220],[220,131],[217,198],[198,236],[236,217],[198,131],[131,134],[134,198],[177,132],[132,58],[58,177],[143,35],[35,124],[124,143],[110,163],[163,7],[7,110],[228,110],[110,25],[25,228],[356,389],[389,368],[368,356],[11,302],[302,267],[267,11],[452,350],[350,349],[349,452],[302,303],[303,269],[269,302],[357,343],[343,277],[277,357],[452,453],[453,357],[357,452],[333,332],[332,297],[297,333],[175,152],[152,377],[377,175],[347,348],[348,330],[330,347],[303,304],[304,270],[270,303],[9,336],[336,337],[337,9],[278,279],[279,360],[360,278],[418,262],[262,431],[431,418],[304,408],[408,409],[409,304],[310,415],[415,407],[407,310],[270,409],[409,410],[410,270],[450,348],[348,347],[347,450],[422,430],[430,434],[434,422],[313,314],[314,17],[17,313],[306,307],[307,375],[375,306],[387,388],[388,260],[260,387],[286,414],[414,398],[398,286],[335,406],[406,418],[418,335],[364,367],[367,416],[416,364],[423,358],[358,327],[327,423],[251,284],[284,298],[298,251],[281,5],[5,4],[4,281],[373,374],[374,253],[253,373],[307,320],[320,321],[321,307],[425,427],[427,411],[411,425],[421,313],[313,18],[18,421],[321,405],[405,406],[406,321],[320,404],[404,405],[405,320],[315,16],[16,17],[17,315],[426,425],[425,266],[266,426],[377,400],[400,369],[369,377],[322,391],[391,269],[269,322],[417,465],[465,464],[464,417],[386,257],[257,258],[258,386],[466,260],[260,388],[388,466],[456,399],[399,419],[419,456],[284,332],[332,333],[333,284],[417,285],[285,8],[8,417],[346,340],[340,261],[261,346],[413,441],[441,285],[285,413],[327,460],[460,328],[328,327],[355,371],[371,329],[329,355],[392,439],[439,438],[438,392],[382,341],[341,256],[256,382],[429,420],[420,360],[360,429],[364,394],[394,379],[379,364],[277,343],[343,437],[437,277],[443,444],[444,283],[283,443],[275,440],[440,363],[363,275],[431,262],[262,369],[369,431],[297,338],[338,337],[337,297],[273,375],[375,321],[321,273],[450,451],[451,349],[349,450],[446,342],[342,467],[467,446],[293,334],[334,282],[282,293],[458,461],[461,462],[462,458],[276,353],[353,383],[383,276],[308,324],[324,325],[325,308],[276,300],[300,293],[293,276],[372,345],[345,447],[447,372],[352,345],[345,340],[340,352],[274,1],[1,19],[19,274],[456,248],[248,281],[281,456],[436,427],[427,425],[425,436],[381,256],[256,252],[252,381],[269,391],[391,393],[393,269],[200,199],[199,428],[428,200],[266,330],[330,329],[329,266],[287,273],[273,422],[422,287],[250,462],[462,328],[328,250],[258,286],[286,384],[384,258],[265,353],[353,342],[342,265],[387,259],[259,257],[257,387],[424,431],[431,430],[430,424],[342,353],[353,276],[276,342],[273,335],[335,424],[424,273],[292,325],[325,307],[307,292],[366,447],[447,345],[345,366],[271,303],[303,302],[302,271],[423,266],[266,371],[371,423],[294,455],[455,460],[460,294],[279,278],[278,294],[294,279],[271,272],[272,304],[304,271],[432,434],[434,427],[427,432],[272,407],[407,408],[408,272],[394,430],[430,431],[431,394],[395,369],[369,400],[400,395],[334,333],[333,299],[299,334],[351,417],[417,168],[168,351],[352,280],[280,411],[411,352],[325,319],[319,320],[320,325],[295,296],[296,336],[336,295],[319,403],[403,404],[404,319],[330,348],[348,349],[349,330],[293,298],[298,333],[333,293],[323,454],[454,447],[447,323],[15,16],[16,315],[315,15],[358,429],[429,279],[279,358],[14,15],[15,316],[316,14],[285,336],[336,9],[9,285],[329,349],[349,350],[350,329],[374,380],[380,252],[252,374],[318,402],[402,403],[403,318],[6,197],[197,419],[419,6],[318,319],[319,325],[325,318],[367,364],[364,365],[365,367],[435,367],[367,397],[397,435],[344,438],[438,439],[439,344],[272,271],[271,311],[311,272],[195,5],[5,281],[281,195],[273,287],[287,291],[291,273],[396,428],[428,199],[199,396],[311,271],[271,268],[268,311],[283,444],[444,445],[445,283],[373,254],[254,339],[339,373],[282,334],[334,296],[296,282],[449,347],[347,346],[346,449],[264,447],[447,454],[454,264],[336,296],[296,299],[299,336],[338,10],[10,151],[151,338],[278,439],[439,455],[455,278],[292,407],[407,415],[415,292],[358,371],[371,355],[355,358],[340,345],[345,372],[372,340],[346,347],[347,280],[280,346],[442,443],[443,282],[282,442],[19,94],[94,370],[370,19],[441,442],[442,295],[295,441],[248,419],[419,197],[197,248],[263,255],[255,359],[359,263],[440,275],[275,274],[274,440],[300,383],[383,368],[368,300],[351,412],[412,465],[465,351],[263,467],[467,466],[466,263],[301,368],[368,389],[389,301],[395,378],[378,379],[379,395],[412,351],[351,419],[419,412],[436,426],[426,322],[322,436],[2,164],[164,393],[393,2],[370,462],[462,461],[461,370],[164,0],[0,267],[267,164],[302,11],[11,12],[12,302],[268,12],[12,13],[13,268],[293,300],[300,301],[301,293],[446,261],[261,340],[340,446],[330,266],[266,425],[425,330],[426,423],[423,391],[391,426],[429,355],[355,437],[437,429],[391,327],[327,326],[326,391],[440,457],[457,438],[438,440],[341,382],[382,362],[362,341],[459,457],[457,461],[461,459],[434,430],[430,394],[394,434],[414,463],[463,362],[362,414],[396,369],[369,262],[262,396],[354,461],[461,457],[457,354],[316,403],[403,402],[402,316],[315,404],[404,403],[403,315],[314,405],[405,404],[404,314],[313,406],[406,405],[405,313],[421,418],[418,406],[406,421],[366,401],[401,361],[361,366],[306,408],[408,407],[407,306],[291,409],[409,408],[408,291],[287,410],[410,409],[409,287],[432,436],[436,410],[410,432],[434,416],[416,411],[411,434],[264,368],[368,383],[383,264],[309,438],[438,457],[457,309],[352,376],[376,401],[401,352],[274,275],[275,4],[4,274],[421,428],[428,262],[262,421],[294,327],[327,358],[358,294],[433,416],[416,367],[367,433],[289,455],[455,439],[439,289],[462,370],[370,326],[326,462],[2,326],[326,370],[370,2],[305,460],[460,455],[455,305],[254,449],[449,448],[448,254],[255,261],[261,446],[446,255],[253,450],[450,449],[449,253],[252,451],[451,450],[450,252],[256,452],[452,451],[451,256],[341,453],[453,452],[452,341],[413,464],[464,463],[463,413],[441,413],[413,414],[414,441],[258,442],[442,441],[441,258],[257,443],[443,442],[442,257],[259,444],[444,443],[443,259],[260,445],[445,444],[444,260],[467,342],[342,445],[445,467],[459,458],[458,250],[250,459],[289,392],[392,290],[290,289],[290,328],[328,460],[460,290],[376,433],[433,435],[435,376],[250,290],[290,392],[392,250],[411,416],[416,433],[433,411],[341,463],[463,464],[464,341],[453,464],[464,465],[465,453],[357,465],[465,412],[412,357],[343,412],[412,399],[399,343],[360,363],[363,440],[440,360],[437,399],[399,456],[456,437],[420,456],[456,363],[363,420],[401,435],[435,288],[288,401],[372,383],[383,353],[353,372],[339,255],[255,249],[249,339],[448,261],[261,255],[255,448],[133,243],[243,190],[190,133],[133,155],[155,112],[112,133],[33,246],[246,247],[247,33],[33,130],[130,25],[25,33],[398,384],[384,286],[286,398],[362,398],[398,414],[414,362],[362,463],[463,341],[341,362],[263,359],[359,467],[467,263],[263,249],[249,255],[255,263],[466,467],[467,260],[260,466],[75,60],[60,166],[166,75],[238,239],[239,79],[79,238],[162,127],[127,139],[139,162],[72,11],[11,37],[37,72],[121,232],[232,120],[120,121],[73,72],[72,39],[39,73],[114,128],[128,47],[47,114],[233,232],[232,128],[128,233],[103,104],[104,67],[67,103],[152,175],[175,148],[148,152],[119,118],[118,101],[101,119],[74,73],[73,40],[40,74],[107,9],[9,108],[108,107],[49,48],[48,131],[131,49],[32,194],[194,211],[211,32],[184,74],[74,185],[185,184],[191,80],[80,183],[183,191],[185,40],[40,186],[186,185],[119,230],[230,118],[118,119],[210,202],[202,214],[214,210],[84,83],[83,17],[17,84],[77,76],[76,146],[146,77],[161,160],[160,30],[30,161],[190,56],[56,173],[173,190],[182,106],[106,194],[194,182],[138,135],[135,192],[192,138],[129,203],[203,98],[98,129],[54,21],[21,68],[68,54],[5,51],[51,4],[4,5],[145,144],[144,23],[23,145],[90,77],[77,91],[91,90],[207,205],[205,187],[187,207],[83,201],[201,18],[18,83],[181,91],[91,182],[182,181],[180,90],[90,181],[181,180],[16,85],[85,17],[17,16],[205,206],[206,36],[36,205],[176,148],[148,140],[140,176],[165,92],[92,39],[39,165],[245,193],[193,244],[244,245],[27,159],[159,28],[28,27],[30,247],[247,161],[161,30],[174,236],[236,196],[196,174],[103,54],[54,104],[104,103],[55,193],[193,8],[8,55],[111,117],[117,31],[31,111],[221,189],[189,55],[55,221],[240,98],[98,99],[99,240],[142,126],[126,100],[100,142],[219,166],[166,218],[218,219],[112,155],[155,26],[26,112],[198,209],[209,131],[131,198],[169,135],[135,150],[150,169],[114,47],[47,217],[217,114],[224,223],[223,53],[53,224],[220,45],[45,134],[134,220],[32,211],[211,140],[140,32],[109,67],[67,108],[108,109],[146,43],[43,91],[91,146],[231,230],[230,120],[120,231],[113,226],[226,247],[247,113],[105,63],[63,52],[52,105],[241,238],[238,242],[242,241],[124,46],[46,156],[156,124],[95,78],[78,96],[96,95],[70,46],[46,63],[63,70],[116,143],[143,227],[227,116],[116,123],[123,111],[111,116],[1,44],[44,19],[19,1],[3,236],[236,51],[51,3],[207,216],[216,205],[205,207],[26,154],[154,22],[22,26],[165,39],[39,167],[167,165],[199,200],[200,208],[208,199],[101,36],[36,100],[100,101],[43,57],[57,202],[202,43],[242,20],[20,99],[99,242],[56,28],[28,157],[157,56],[124,35],[35,113],[113,124],[29,160],[160,27],[27,29],[211,204],[204,210],[210,211],[124,113],[113,46],[46,124],[106,43],[43,204],[204,106],[96,62],[62,77],[77,96],[227,137],[137,116],[116,227],[73,41],[41,72],[72,73],[36,203],[203,142],[142,36],[235,64],[64,240],[240,235],[48,49],[49,64],[64,48],[42,41],[41,74],[74,42],[214,212],[212,207],[207,214],[183,42],[42,184],[184,183],[210,169],[169,211],[211,210],[140,170],[170,176],[176,140],[104,105],[105,69],[69,104],[193,122],[122,168],[168,193],[50,123],[123,187],[187,50],[89,96],[96,90],[90,89],[66,65],[65,107],[107,66],[179,89],[89,180],[180,179],[119,101],[101,120],[120,119],[68,63],[63,104],[104,68],[234,93],[93,227],[227,234],[16,15],[15,85],[85,16],[209,129],[129,49],[49,209],[15,14],[14,86],[86,15],[107,55],[55,9],[9,107],[120,100],[100,121],[121,120],[153,145],[145,22],[22,153],[178,88],[88,179],[179,178],[197,6],[6,196],[196,197],[89,88],[88,96],[96,89],[135,138],[138,136],[136,135],[138,215],[215,172],[172,138],[218,115],[115,219],[219,218],[41,42],[42,81],[81,41],[5,195],[195,51],[51,5],[57,43],[43,61],[61,57],[208,171],[171,199],[199,208],[41,81],[81,38],[38,41],[224,53],[53,225],[225,224],[24,144],[144,110],[110,24],[105,52],[52,66],[66,105],[118,229],[229,117],[117,118],[227,34],[34,234],[234,227],[66,107],[107,69],[69,66],[10,109],[109,151],[151,10],[219,48],[48,235],[235,219],[183,62],[62,191],[191,183],[142,129],[129,126],[126,142],[116,111],[111,143],[143,116],[118,117],[117,50],[50,118],[223,222],[222,52],[52,223],[94,19],[19,141],[141,94],[222,221],[221,65],[65,222],[196,3],[3,197],[197,196],[45,220],[220,44],[44,45],[156,70],[70,139],[139,156],[188,122],[122,245],[245,188],[139,71],[71,162],[162,139],[149,170],[170,150],[150,149],[122,188],[188,196],[196,122],[206,216],[216,92],[92,206],[164,2],[2,167],[167,164],[242,141],[141,241],[241,242],[0,164],[164,37],[37,0],[11,72],[72,12],[12,11],[12,38],[38,13],[13,12],[70,63],[63,71],[71,70],[31,226],[226,111],[111,31],[36,101],[101,205],[205,36],[203,206],[206,165],[165,203],[126,209],[209,217],[217,126],[98,165],[165,97],[97,98],[237,220],[220,218],[218,237],[237,239],[239,241],[241,237],[210,214],[214,169],[169,210],[140,171],[171,32],[32,140],[241,125],[125,237],[237,241],[179,86],[86,178],[178,179],[180,85],[85,179],[179,180],[181,84],[84,180],[180,181],[182,83],[83,181],[181,182],[194,201],[201,182],[182,194],[177,137],[137,132],[132,177],[184,76],[76,183],[183,184],[185,61],[61,184],[184,185],[186,57],[57,185],[185,186],[216,212],[212,186],[186,216],[192,214],[214,187],[187,192],[139,34],[34,156],[156,139],[218,79],[79,237],[237,218],[147,123],[123,177],[177,147],[45,44],[44,4],[4,45],[208,201],[201,32],[32,208],[98,64],[64,129],[129,98],[192,213],[213,138],[138,192],[235,59],[59,219],[219,235],[141,242],[242,97],[97,141],[97,2],[2,141],[141,97],[240,75],[75,235],[235,240],[229,24],[24,228],[228,229],[31,25],[25,226],[226,31],[230,23],[23,229],[229,230],[231,22],[22,230],[230,231],[232,26],[26,231],[231,232],[233,112],[112,232],[232,233],[244,189],[189,243],[243,244],[189,221],[221,190],[190,189],[222,28],[28,221],[221,222],[223,27],[27,222],[222,223],[224,29],[29,223],[223,224],[225,30],[30,224],[224,225],[113,247],[247,225],[225,113],[99,60],[60,240],[240,99],[213,147],[147,215],[215,213],[60,20],[20,166],[166,60],[192,187],[187,213],[213,192],[243,112],[112,244],[244,243],[244,233],[233,245],[245,244],[245,128],[128,188],[188,245],[188,114],[114,174],[174,188],[134,131],[131,220],[220,134],[174,217],[217,236],[236,174],[236,198],[198,134],[134,236],[215,177],[177,58],[58,215],[156,143],[143,124],[124,156],[25,110],[110,7],[7,25],[31,228],[228,25],[25,31],[264,356],[356,368],[368,264],[0,11],[11,267],[267,0],[451,452],[452,349],[349,451],[267,302],[302,269],[269,267],[350,357],[357,277],[277,350],[350,452],[452,357],[357,350],[299,333],[333,297],[297,299],[396,175],[175,377],[377,396],[280,347],[347,330],[330,280],[269,303],[303,270],[270,269],[151,9],[9,337],[337,151],[344,278],[278,360],[360,344],[424,418],[418,431],[431,424],[270,304],[304,409],[409,270],[272,310],[310,407],[407,272],[322,270],[270,410],[410,322],[449,450],[450,347],[347,449],[432,422],[422,434],[434,432],[18,313],[313,17],[17,18],[291,306],[306,375],[375,291],[259,387],[387,260],[260,259],[424,335],[335,418],[418,424],[434,364],[364,416],[416,434],[391,423],[423,327],[327,391],[301,251],[251,298],[298,301],[275,281],[281,4],[4,275],[254,373],[373,253],[253,254],[375,307],[307,321],[321,375],[280,425],[425,411],[411,280],[200,421],[421,18],[18,200],[335,321],[321,406],[406,335],[321,320],[320,405],[405,321],[314,315],[315,17],[17,314],[423,426],[426,266],[266,423],[396,377],[377,369],[369,396],[270,322],[322,269],[269,270],[413,417],[417,464],[464,413],[385,386],[386,258],[258,385],[248,456],[456,419],[419,248],[298,284],[284,333],[333,298],[168,417],[417,8],[8,168],[448,346],[346,261],[261,448],[417,413],[413,285],[285,417],[326,327],[327,328],[328,326],[277,355],[355,329],[329,277],[309,392],[392,438],[438,309],[381,382],[382,256],[256,381],[279,429],[429,360],[360,279],[365,364],[364,379],[379,365],[355,277],[277,437],[437,355],[282,443],[443,283],[283,282],[281,275],[275,363],[363,281],[395,431],[431,369],[369,395],[299,297],[297,337],[337,299],[335,273],[273,321],[321,335],[348,450],[450,349],[349,348],[359,446],[446,467],[467,359],[283,293],[293,282],[282,283],[250,458],[458,462],[462,250],[300,276],[276,383],[383,300],[292,308],[308,325],[325,292],[283,276],[276,293],[293,283],[264,372],[372,447],[447,264],[346,352],[352,340],[340,346],[354,274],[274,19],[19,354],[363,456],[456,281],[281,363],[426,436],[436,425],[425,426],[380,381],[381,252],[252,380],[267,269],[269,393],[393,267],[421,200],[200,428],[428,421],[371,266],[266,329],[329,371],[432,287],[287,422],[422,432],[290,250],[250,328],[328,290],[385,258],[258,384],[384,385],[446,265],[265,342],[342,446],[386,387],[387,257],[257,386],[422,424],[424,430],[430,422],[445,342],[342,276],[276,445],[422,273],[273,424],[424,422],[306,292],[292,307],[307,306],[352,366],[366,345],[345,352],[268,271],[271,302],[302,268],[358,423],[423,371],[371,358],[327,294],[294,460],[460,327],[331,279],[279,294],[294,331],[303,271],[271,304],[304,303],[436,432],[432,427],[427,436],[304,272],[272,408],[408,304],[395,394],[394,431],[431,395],[378,395],[395,400],[400,378],[296,334],[334,299],[299,296],[6,351],[351,168],[168,6],[376,352],[352,411],[411,376],[307,325],[325,320],[320,307],[285,295],[295,336],[336,285],[320,319],[319,404],[404,320],[329,330],[330,349],[349,329],[334,293],[293,333],[333,334],[366,323],[323,447],[447,366],[316,15],[15,315],[315,316],[331,358],[358,279],[279,331],[317,14],[14,316],[316,317],[8,285],[285,9],[9,8],[277,329],[329,350],[350,277],[253,374],[374,252],[252,253],[319,318],[318,403],[403,319],[351,6],[6,419],[419,351],[324,318],[318,325],[325,324],[397,367],[367,365],[365,397],[288,435],[435,397],[397,288],[278,344],[344,439],[439,278],[310,272],[272,311],[311,310],[248,195],[195,281],[281,248],[375,273],[273,291],[291,375],[175,396],[396,199],[199,175],[312,311],[311,268],[268,312],[276,283],[283,445],[445,276],[390,373],[373,339],[339,390],[295,282],[282,296],[296,295],[448,449],[449,346],[346,448],[356,264],[264,454],[454,356],[337,336],[336,299],[299,337],[337,338],[338,151],[151,337],[294,278],[278,455],[455,294],[308,292],[292,415],[415,308],[429,358],[358,355],[355,429],[265,340],[340,372],[372,265],[352,346],[346,280],[280,352],[295,442],[442,282],[282,295],[354,19],[19,370],[370,354],[285,441],[441,295],[295,285],[195,248],[248,197],[197,195],[457,440],[440,274],[274,457],[301,300],[300,368],[368,301],[417,351],[351,465],[465,417],[251,301],[301,389],[389,251],[394,395],[395,379],[379,394],[399,412],[412,419],[419,399],[410,436],[436,322],[322,410],[326,2],[2,393],[393,326],[354,370],[370,461],[461,354],[393,164],[164,267],[267,393],[268,302],[302,12],[12,268],[312,268],[268,13],[13,312],[298,293],[293,301],[301,298],[265,446],[446,340],[340,265],[280,330],[330,425],[425,280],[322,426],[426,391],[391,322],[420,429],[429,437],[437,420],[393,391],[391,326],[326,393],[344,440],[440,438],[438,344],[458,459],[459,461],[461,458],[364,434],[434,394],[394,364],[428,396],[396,262],[262,428],[274,354],[354,457],[457,274],[317,316],[316,402],[402,317],[316,315],[315,403],[403,316],[315,314],[314,404],[404,315],[314,313],[313,405],[405,314],[313,421],[421,406],[406,313],[323,366],[366,361],[361,323],[292,306],[306,407],[407,292],[306,291],[291,408],[408,306],[291,287],[287,409],[409,291],[287,432],[432,410],[410,287],[427,434],[434,411],[411,427],[372,264],[264,383],[383,372],[459,309],[309,457],[457,459],[366,352],[352,401],[401,366],[1,274],[274,4],[4,1],[418,421],[421,262],[262,418],[331,294],[294,358],[358,331],[435,433],[433,367],[367,435],[392,289],[289,439],[439,392],[328,462],[462,326],[326,328],[94,2],[2,370],[370,94],[289,305],[305,455],[455,289],[339,254],[254,448],[448,339],[359,255],[255,446],[446,359],[254,253],[253,449],[449,254],[253,252],[252,450],[450,253],[252,256],[256,451],[451,252],[256,341],[341,452],[452,256],[414,413],[413,463],[463,414],[286,441],[441,414],[414,286],[286,258],[258,441],[441,286],[258,257],[257,442],[442,258],[257,259],[259,443],[443,257],[259,260],[260,444],[444,259],[260,467],[467,445],[445,260],[309,459],[459,250],[250,309],[305,289],[289,290],[290,305],[305,290],[290,460],[460,305],[401,376],[376,435],[435,401],[309,250],[250,392],[392,309],[376,411],[411,433],[433,376],[453,341],[341,464],[464,453],[357,453],[453,465],[465,357],[343,357],[357,412],[412,343],[437,343],[343,399],[399,437],[344,360],[360,440],[440,344],[420,437],[437,456],[456,420],[360,420],[420,363],[363,360],[361,401],[401,288],[288,361],[265,372],[372,353],[353,265],[390,339],[339,249],[249,390],[339,448],[448,255],[255,339]]),O("matrixDataToMatrix",(function(t){for(var e=t.getCols(),n=t.getRows(),r=t.getPackedDataList(),a=[],s=0;s<n;s++)a.push(Array(e));for(s=0;s<n;s++)for(var i=0;i<e;i++){var o=1===t.getLayout()?s*e+i:i*n+s;a[s][i]=r[o]}return a})),O("VERSION","0.4.1633559619")}).call(this)},4377:function(t,e,n){"use strict";n.r(e),n.d(e,{SupportedModels:function(){return qe},createDetector:function(){return hn},util:function(){return fn}});var r={};n.r(r),n.d(r,{json:function(){return R}});var a={};n.r(a),n.d(a,{json:function(){return j}});var s={};n.r(s),n.d(s,{json:function(){return P}});var i={};n.r(i),n.d(i,{json:function(){return V}});var o={};n.r(o),n.d(o,{json:function(){return B}});var u={};n.r(u),n.d(u,{json:function(){return z}});var p={};n.r(p),n.d(p,{json:function(){return U}});var c={};n.r(c),n.d(c,{json:function(){return $}});var l={};n.r(l),n.d(l,{json:function(){return H}});var h={};n.r(h),n.d(h,{json:function(){return G}});var f={};n.r(f),n.d(f,{json:function(){return W}});var m={};n.r(m),n.d(m,{json:function(){return X}});var d={};n.r(d),n.d(d,{json:function(){return q}});var y={};n.r(y),n.d(y,{json:function(){return K}});var g={};n.r(g),n.d(g,{json:function(){return Y}});var v={};n.r(v),n.d(v,{json:function(){return Q}});var b={};n.r(b),n.d(b,{json:function(){return J}});var x={};n.r(x),n.d(x,{json:function(){return Z}});var N={};n.r(N),n.d(N,{json:function(){return tt}});var T={};n.r(T),n.d(T,{OP_SCOPE_SUFFIX:function(){return vt.zvA},abs:function(){return vt.WnP},acos:function(){return vt.Khb},acosh:function(){return vt.__u},add:function(){return vt.IHx},addN:function(){return vt.QBD},all:function(){return vt.$6P},any:function(){return vt.YjB},argMax:function(){return vt.NqF},argMin:function(){return vt.vHJ},asin:function(){return vt.ZRM},asinh:function(){return vt.VfV},atan:function(){return vt.z4N},atan2:function(){return vt.fvJ},atanh:function(){return vt.C80},avgPool:function(){return vt.wS1},avgPool3d:function(){return vt.uR5},basicLSTMCell:function(){return vt.zEQ},batchNorm:function(){return vt.tgs},batchNorm2d:function(){return vt.Dxk},batchNorm3d:function(){return vt.JY5},batchNorm4d:function(){return vt.p3b},batchToSpaceND:function(){return vt.E4h},bincount:function(){return vt.yE8},booleanMaskAsync:function(){return vt.anm},broadcastArgs:function(){return vt.XsQ},broadcastTo:function(){return vt.UFq},buffer:function(){return vt.f3b},cast:function(){return vt.pju},ceil:function(){return vt.mDi},clipByValue:function(){return vt.iUl},clone:function(){return vt.d9v},complex:function(){return vt.PYB},concat:function(){return vt.zoF},concat1d:function(){return vt.gME},concat2d:function(){return vt.Izb},concat3d:function(){return vt.MNy},concat4d:function(){return vt.ZaL},conv1d:function(){return vt.PAt},conv2d:function(){return vt.Tek},conv2dTranspose:function(){return vt.bc},conv3d:function(){return vt.pdZ},conv3dTranspose:function(){return vt.$QV},cos:function(){return vt.mCk},cosh:function(){return vt.f9Y},cosineWindow:function(){return vt.mew},cumprod:function(){return vt.$Gn},cumsum:function(){return vt.zbp},denseBincount:function(){return vt.ppE},depthToSpace:function(){return vt.nTT},depthwiseConv2d:function(){return vt.B10},diag:function(){return vt.Ka3},dilation2d:function(){return vt.WmZ},div:function(){return vt.hiC},divNoNan:function(){return vt.NTj},dot:function(){return vt.AKD},dropout:function(){return vt.rvX},einsum:function(){return vt.WYO},elu:function(){return vt.pyx},enclosingPowerOfTwo:function(){return vt.GRh},equal:function(){return vt.DgJ},erf:function(){return vt.qNN},euclideanNorm:function(){return vt.d2q},exp:function(){return vt.Qqt},expandDims:function(){return vt.dt4},expm1:function(){return vt.t$B},eye:function(){return vt.iyy},fft:function(){return vt.kp_},fill:function(){return vt.hlL},floor:function(){return vt.GWj},floorDiv:function(){return vt.qPi},fused:function(){return vt.imm},gather:function(){return vt.Iqj},gatherND:function(){return vt.dbB},greater:function(){return vt.pjt},greaterEqual:function(){return vt.brS},ifft:function(){return vt.Sxn},imag:function(){return vt.asL},image:function(){return vt.BHj},inTopKAsync:function(){return vt.V3u},irfft:function(){return vt.wx0},isFinite:function(){return vt.xVT},isInf:function(){return vt.UWc},isNaN:function(){return vt.i2d},leakyRelu:function(){return vt.hi7},less:function(){return vt.d9m},lessEqual:function(){return vt.zN1},linalg:function(){return vt.$r2},linspace:function(){return vt.SX3},localResponseNormalization:function(){return vt.G9k},log:function(){return vt.cM7},log1p:function(){return vt.Krr},logSigmoid:function(){return vt.e_t},logSoftmax:function(){return vt.CmS},logSumExp:function(){return vt.l_t},logicalAnd:function(){return vt.HvI},logicalNot:function(){return vt.hJK},logicalOr:function(){return vt.K5V},logicalXor:function(){return vt.egP},losses:function(){return vt.MB5},lowerBound:function(){return vt.eab},matMul:function(){return vt.OI3},max:function(){return vt.Fp7},maxPool:function(){return vt._sB},maxPool3d:function(){return vt.YQQ},maxPoolWithArgmax:function(){return vt.Ip$},maximum:function(){return vt.gWQ},mean:function(){return vt.J69},meshgrid:function(){return vt.ry_},min:function(){return vt.VV$},minimum:function(){return vt.LTh},mirrorPad:function(){return vt.VdP},mod:function(){return vt.wQq},moments:function(){return vt.Gi7},movingAverage:function(){return vt.p_},mul:function(){return vt.dC7},multiRNNCell:function(){return vt.rq4},multinomial:function(){return vt.SJ_},neg:function(){return vt.W76},norm:function(){return vt.KOy},notEqual:function(){return vt.Quu},oneHot:function(){return vt.lfX},ones:function(){return vt.iUs},onesLike:function(){return vt.JpU},op:function(){return vt.op},outerProduct:function(){return vt.N2O},pad:function(){return vt.vku},pad1d:function(){return vt.pNR},pad2d:function(){return vt.koy},pad3d:function(){return vt.t1L},pad4d:function(){return vt.lGY},pool:function(){return vt.d_R},pow:function(){return vt.sQ3},prelu:function(){return vt.AL3},print:function(){return vt.S0v},prod:function(){return vt.WVs},raggedGather:function(){return vt.$gW},raggedTensorToTensor:function(){return vt.N89},rand:function(){return vt.TN_},randomGamma:function(){return vt.wzB},randomNormal:function(){return vt.nGf},randomStandardNormal:function(){return vt.ruB},randomUniform:function(){return vt.LGj},range:function(){return vt.w6H},real:function(){return vt.kwC},reciprocal:function(){return vt.M25},relu:function(){return vt.UYe},relu6:function(){return vt.btT},reshape:function(){return vt.XLQ},reverse:function(){return vt.GYS},reverse1d:function(){return vt.SDf},reverse2d:function(){return vt.diP},reverse3d:function(){return vt.sx7},reverse4d:function(){return vt.mG2},rfft:function(){return vt.QEs},round:function(){return vt.NMM},rsqrt:function(){return vt.bp0},scalar:function(){return vt.iD$},scatterND:function(){return vt.snQ},searchSorted:function(){return vt.zcT},selu:function(){return vt.U8D},separableConv2d:function(){return vt.U_I},setdiff1dAsync:function(){return vt.ODp},sigmoid:function(){return vt.XD2},sign:function(){return vt.Xxe},signal:function(){return vt.tdS},sin:function(){return vt.O$l},sinh:function(){return vt.R_K},slice:function(){return vt.tPi},slice1d:function(){return vt.jZU},slice2d:function(){return vt.SmN},slice3d:function(){return vt.CnO},slice4d:function(){return vt.p0P},softmax:function(){return vt.XAC},softplus:function(){return vt.Wvh},spaceToBatchND:function(){return vt.fBT},sparse:function(){return vt.rVs},sparseToDense:function(){return vt.ers},spectral:function(){return vt.uN7},split:function(){return vt.Vl2},sqrt:function(){return vt._b3},square:function(){return vt.h62},squaredDifference:function(){return vt.$i},squeeze:function(){return vt.L9e},stack:function(){return vt.knu},step:function(){return vt.Nbs},stridedSlice:function(){return vt.NXj},string:function(){return vt.Z_8},sub:function(){return vt.luU},sum:function(){return vt.Smz},tan:function(){return vt.ORZ},tanh:function(){return vt.AEp},tensor:function(){return vt.XeE},tensor1d:function(){return vt.RRF},tensor2d:function(){return vt.odF},tensor3d:function(){return vt.wOQ},tensor4d:function(){return vt.yXz},tensor5d:function(){return vt.Bfx},tensor6d:function(){return vt.xZs},tile:function(){return vt.Gg6},topk:function(){return vt.hg7},transpose:function(){return vt.p4s},truncatedNormal:function(){return vt.Xu6},unique:function(){return vt.Two},unsortedSegmentSum:function(){return vt.pUJ},unstack:function(){return vt.HHK},upperBound:function(){return vt.GaM},variable:function(){return vt.VD$},where:function(){return vt.arb},whereAsync:function(){return vt.itS},zeros:function(){return vt.lls},zerosLike:function(){return vt.P84}});var w=n(8818),S=n(9185);var _,O;(0,S.OBj)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(t=>{t&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(t){t[t.DT_INVALID=0]="DT_INVALID",t[t.DT_FLOAT=1]="DT_FLOAT",t[t.DT_DOUBLE=2]="DT_DOUBLE",t[t.DT_INT32=3]="DT_INT32",t[t.DT_UINT8=4]="DT_UINT8",t[t.DT_INT16=5]="DT_INT16",t[t.DT_INT8=6]="DT_INT8",t[t.DT_STRING=7]="DT_STRING",t[t.DT_COMPLEX64=8]="DT_COMPLEX64",t[t.DT_INT64=9]="DT_INT64",t[t.DT_BOOL=10]="DT_BOOL",t[t.DT_QINT8=11]="DT_QINT8",t[t.DT_QUINT8=12]="DT_QUINT8",t[t.DT_QINT32=13]="DT_QINT32",t[t.DT_BFLOAT16=14]="DT_BFLOAT16",t[t.DT_QINT16=15]="DT_QINT16",t[t.DT_QUINT16=16]="DT_QUINT16",t[t.DT_UINT16=17]="DT_UINT16",t[t.DT_COMPLEX128=18]="DT_COMPLEX128",t[t.DT_HALF=19]="DT_HALF",t[t.DT_RESOURCE=20]="DT_RESOURCE",t[t.DT_VARIANT=21]="DT_VARIANT",t[t.DT_UINT32=22]="DT_UINT32",t[t.DT_UINT64=23]="DT_UINT64",t[t.DT_FLOAT_REF=101]="DT_FLOAT_REF",t[t.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",t[t.DT_INT32_REF=103]="DT_INT32_REF",t[t.DT_UINT8_REF=104]="DT_UINT8_REF",t[t.DT_INT16_REF=105]="DT_INT16_REF",t[t.DT_INT8_REF=106]="DT_INT8_REF",t[t.DT_STRING_REF=107]="DT_STRING_REF",t[t.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",t[t.DT_INT64_REF=109]="DT_INT64_REF",t[t.DT_BOOL_REF=110]="DT_BOOL_REF",t[t.DT_QINT8_REF=111]="DT_QINT8_REF",t[t.DT_QUINT8_REF=112]="DT_QUINT8_REF",t[t.DT_QINT32_REF=113]="DT_QINT32_REF",t[t.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",t[t.DT_QINT16_REF=115]="DT_QINT16_REF",t[t.DT_QUINT16_REF=116]="DT_QUINT16_REF",t[t.DT_UINT16_REF=117]="DT_UINT16_REF",t[t.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",t[t.DT_HALF_REF=119]="DT_HALF_REF",t[t.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",t[t.DT_VARIANT_REF=121]="DT_VARIANT_REF",t[t.DT_UINT32_REF=122]="DT_UINT32_REF",t[t.DT_UINT64_REF=123]="DT_UINT64_REF"}(_||(_={})),function(t){let e;!function(t){t[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(O||(O={}));const A={};function E(t){return A[t]}function M(t,e,n,r,a){const s=e.inputParams[t];if(s&&void 0!==s.inputIndexStart){const t=s.inputIndexStart,i=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?t+1:s.inputIndexEnd;if("tensor"===s.type)return k(e.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type){return e.inputNames.slice(t,i).map((t=>k(t,n,r,a)))}const o=k(e.inputNames.slice(t)[0],n,r,a),u=o.dataSync();return"number"===s.type?u[0]:S.D5U.toNestedArray(o.shape,u)}const i=e.attrParams[t];return i&&i.value}function k(t,e,n,r){const[a,s]=D(t);if(null!=r){const t=r.getHashTableHandleByName(a);if(null!=t)return t}const i=n.currentContextIds.find((t=>!!e[F(a,t)]));return void 0!==i?e[F(a,i)][s]:void 0}function I(t,e){const[n,r,a]=D(t);return[F(n,e&&e.currentContextId),r,a]}function F(t,e){return e?`${t}-${e}`:t}function D(t){const e=t.split(":");if(1===e.length)return[t,0,void 0];const n=e[0],r=3===e.length?e[1]:void 0;return[n,Number(e[e.length-1]),r]}function C(t,e,n){let r=M("pad",t,e,n);if("explicit"===r){r=M("explicitPaddings",t,e,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)a[t][0]=r[2*t],a[t][1]=r[2*t+1];return a}return r}function L(t){return t.kept?t:(0,S.d9v)(t)}const R=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],j=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],P=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],V=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],B=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],z=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],U=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],$=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],H=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],G=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],W=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],X=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],q=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],K=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Y=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Q=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],J=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Z=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],tt=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var et=n(8764).Buffer;class nt{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[r,a,s,i,o,u,p,c,l,h,f,m,d,y,g,v,b,x,N].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const n=t.node,r=[],a=[],s=[],i=n.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?r.push(t[e.name]):"Const"===e.op?a.push(t[e.name]):null!=e.input&&0!==e.input.length||s.push(t[e.name]),t)),{});let o=[];const u=[];let p={},c={};null!=e&&(p=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));const l=Object.keys(i);l.forEach((t=>{const e=i[t];e.inputNames.forEach(((t,n)=>{const[r,,a]=I(t),s=i[r];if(null!=s.outputs){const t=s.outputs.indexOf(a);if(-1!==t){const a=`${r}:${t}`;e.inputNames[n]=a}}e.inputs.push(s),s.children.push(e)}))})),0===Object.keys(c).length?l.forEach((t=>{const e=i[t];0===e.children.length&&u.push(e)})):Object.keys(c).forEach((t=>{const[e]=I(t),n=i[e];null!=n&&(n.signatureKey=c[t],u.push(n))})),Object.keys(p).length>0?Object.keys(p).forEach((t=>{const[e]=I(t),n=i[e];n&&(n.signatureKey=p[t],o.push(n))})):o=r;let h={};null!=t.library&&null!=t.library.function&&(h=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const f={nodes:i,inputs:o,outputs:u,weights:a,placeholders:r,signature:e,functions:h};return s.length>0&&(f.initNodes=s),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=E(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith("^")?t.slice(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((e,n)=>{const r=n.type;let a;switch(n.type){case"string":a=at(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=at(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=mt(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=mt(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=it(t.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=it(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=ft(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ft(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=st(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=st(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=yt(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=yt(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=ht(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ht(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=dt(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=dt(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=pt(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=pt(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=ct(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ct(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=ut(t.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ut(t.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:a,type:r},e}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&n.push(t[e.name]),t)),{}));const a=[],s=[];t.signature.inputArg.forEach((t=>{const[e]=I(t.name),n={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:ot(t.type),type:"dtype"}},children:[]};n.signatureKey=t.name,a.push(n),r[e]=n}));Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach(((t,n)=>{const[a,,s]=I(t),i=r[a];if(null!=i.outputs){const t=i.outputs.indexOf(s);if(-1!==t){const r=`${a}:${t}`;e.inputNames[n]=r}}e.inputs.push(i),i.children.push(e)}))}));const i=t.ret;t.signature.outputArg.forEach((t=>{const[e,n]=I(i[t.name]),a=r[e];null!=a&&(a.defaultOutput=n,s.push(a))}));const o=this.mapArgsToSignature(t);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function rt(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=(0,S.OBj)().global;if("undefined"!==typeof e.atob)return e.atob(t);if("undefined"!==typeof et)return new et(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?n:n.toLowerCase()}function at(t,e,n,r=!1){const a=t[e];return null!=a?rt(a.s,r):n}function st(t,e,n){const r=t[e];return r?r.b:n}function it(t,e,n){const r=t[e]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"===typeof a?a:parseInt(a,10)}function ot(t){switch("string"===typeof t&&(t=_[t]),t){case _.DT_FLOAT:case _.DT_HALF:return"float32";case _.DT_INT32:case _.DT_INT64:case _.DT_INT8:case _.DT_UINT8:return"int32";case _.DT_BOOL:return"bool";case _.DT_DOUBLE:return"float32";case _.DT_STRING:return"string";default:return null}}function ut(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function pt(t,e,n){const r=t[e];return r&&r.type?ot(r.type):n}function ct(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map((t=>ot(t))):n}function lt(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"===typeof t.size?t.size:parseInt(t.size,10))):[]}function ht(t,e,n){const r=t[e];return r&&r.shape?lt(r.shape):n}function ft(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((t=>"number"===typeof t?t:parseInt(t,10))):n}function mt(t,e,n,r=!1){const a=t[e];return a&&a.list&&a.list.s?a.list.s.map((t=>rt(t,r))):n}function dt(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((t=>lt(t))):n}function yt(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class gt{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return k(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return k(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return it(this.node.rawAttrs,t,e);if(null!=n.s)return at(this.node.rawAttrs,t,e);if(null!=n.b)return st(this.node.rawAttrs,t,e);if(null!=n.shape)return ht(this.node.rawAttrs,t,e);if(null!=n.type)return pt(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return ft(this.node.rawAttrs,t,e);if(null!=n.list.s)return mt(this.node.rawAttrs,t,e);if(null!=n.list.shape)return dt(this.node.rawAttrs,t,e);if(null!=n.list.b)return yt(this.node.rawAttrs,t,e);if(null!=n.list.type)return ct(this.node.rawAttrs,t,e)}return e}}var vt=n(8989);function bt(t,e,n=""){if("number"!==typeof t&&"number"!==typeof e){S.D5U.assert(t.length===e.length,(()=>n+` Shapes ${t} and ${e} must match`));for(let r=0;r<t.length;r++){const a=t[r],s=e[r];S.D5U.assert(a<0||s<0||a===s,(()=>n+` Shapes ${t} and ${e} must match`))}}}function xt(t){return"number"!==typeof t&&!t.some((t=>t<0))}function Nt(t,e,n){let r=Tt(t,n);const a=!xt(r);if(a&&0===e.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&e.forEach((t=>{r=Tt(t.shape,r)})),!xt(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function Tt(t,e){if("number"===typeof t)return e;if("number"===typeof e)return t;if(t.length!==e.length)throw new Error(`Incompatible ranks during merge: ${t} vs. ${e}`);const n=[];for(let r=0;r<t.length;++r){const a=t[r],s=e[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${t} vs. ${e}`);n[r]=a>=0?a:s}return n}class wt{constructor(t,e,n,r,a,s,i){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=(0,S.iD$)(0),(0,S.CnY)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),bt(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,(0,S.CnY)(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((t,n)=>this.write(t,e[n])))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return(0,S.XeE)([],[0].concat(this.elementShape));const n=this.readMany(t);return bt(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,S.knu)(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return(0,S.XeE)([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const n=this.readMany(e);return bt(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,S.zoF)(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,(0,S.HHK)(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map((t=>(n+=t,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:e.size/n,s=[];(0,S.lub)((()=>{e=(0,S.XLQ)(e,[1,n,a]);for(let n=0;n<t.length;++n){const i=[0,0===n?0:r[n-1],0],o=[1,t[n],a];s[n]=(0,S.XLQ)((0,S.tPi)(e,i,o),this.elementShape)}return s}));const i=[];for(let o=0;o<t.length;o++)i[o]=o;this.writeMany(i,s)}}class St{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);bt(e,t.shape,"TensorList shape mismatch: "),(0,S.CnY)(t)})),this.idTensor=(0,S.iD$)(0),this.maxNumElements=r,(0,S.CnY)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new St([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);bt(t,this.elementShape,"TensorList shape mismatch: ");const r=Nt(this.elementShape,this.tensors,t);return(0,S.lub)((()=>{const t=this.tensors.map((t=>(0,S.XLQ)(t,r)));return(0,S.knu)(t,0)}))}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Nt(this.elementShape,this.tensors,t),r=this.tensors.pop();return r.kept=!1,bt(r.shape,t,"TensorList shape mismatch: "),(0,S.XLQ)(r,n)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(bt(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,S.CnY)(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new St([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let n=0;n<Math.min(this.tensors.length,t);++n)e.tensors[n]=this.tensors[n];return e}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);bt(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=Nt(this.elementShape,this.tensors,e);return(0,S.XLQ)(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);bt(this.elementShape,e.shape,"TensorList shape mismatch: "),(0,S.CnY)(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);bt(this.elementShape,n,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=Nt(this.elementShape,this.tensors,n);return 0===t.length?(0,S.XeE)([],[0].concat(r)):(0,S.lub)((()=>{const e=t.map((t=>(0,S.XLQ)(this.tensors[t],r)));return(0,S.knu)(e,0)}))}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);bt(this.elementShape,e,"TensorList shape mismatch: ");const n=Nt(this.elementShape,this.tensors,e);return 0===this.size()?(0,S.XeE)([],[0].concat(n)):(0,S.lub)((()=>{const t=this.tensors.map((t=>(0,S.XLQ)(t,n)));return(0,S.zoF)(t,0)}))}}const _t=async(t,e,n)=>{switch(t.op){case"If":case"StatelessIf":{const r=M("thenBranch",t,e,n),a=M("elseBranch",t,e,n),s=M("cond",t,e,n),i=M("args",t,e,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=M("body",t,e,n),a=M("cond",t,e,n),s=M("args",t,e,n),i=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),o=s.map((t=>t.id));let u=await i[0].data();i.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()}));let p=s;for(;u[0];){const t=p;p=await n.functionMap[r].executeFunctionAsync(p,n.tensorArrayMap,n.tensorListMap);const e=p.map((t=>t.id));t.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const s=await n.functionMap[a].executeFunctionAsync(p,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return p}case"LoopCond":return[L(M("pred",t,e,n))];case"Switch":{const r=M("pred",t,e,n);let a=M("data",t,e,n);return a.kept||(a=L(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=t.inputNames.find((t=>void 0!==k(t,e,n)));if(r){return[L(k(r,e,n))]}return}case"Enter":{const r=M("frameName",t,e,n),a=M("tensor",t,e,n);return n.enterFrame(r),[L(a)]}case"Exit":{const r=M("tensor",t,e,n);return n.exitFrame(),[L(r)]}case"NextIteration":{const r=M("tensor",t,e,n);return n.nextIteration(),[L(r)]}case"TensorArrayV3":{const r=M("size",t,e,n),a=M("dtype",t,e,n),s=M("elementShape",t,e,n),i=M("dynamicSize",t,e,n),o=M("clearAfterRead",t,e,n),u=M("identicalElementShapes",t,e,n),p=M("name",t,e,n),c=new wt(p,a,r,s,u,i,o);return n.addTensorArray(c),[c.idTensor,(0,S.iD$)(1)]}case"TensorArrayWriteV3":{const r=M("tensorArrayId",t,e,n),a=M("index",t,e,n),s=M("tensor",t,e,n),i=n.getTensorArray(r.id);return i.write(a,s),[i.idTensor]}case"TensorArrayReadV3":{const r=M("tensorArrayId",t,e,n),a=M("index",t,e,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=M("tensorArrayId",t,e,n),a=M("indices",t,e,n),s=M("dtype",t,e,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=M("tensorArrayId",t,e,n),a=M("indices",t,e,n),s=M("tensor",t,e,n),i=n.getTensorArray(r.id);return i.scatter(a,s),[i.idTensor]}case"TensorArrayConcatV3":{const r=M("tensorArrayId",t,e,n),a=n.getTensorArray(r.id),s=M("dtype",t,e,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=M("tensorArrayId",t,e,n),a=M("tensor",t,e,n),s=M("lengths",t,e,n),i=n.getTensorArray(r.id);return i.split(s,a),[i.idTensor]}case"TensorArraySizeV3":{const r=M("tensorArrayId",t,e,n),a=n.getTensorArray(r.id);return[(0,S.iD$)(a.size(),"int32")]}case"TensorArrayCloseV3":{const r=M("tensorArrayId",t,e,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=M("tensorListId",t,e,n),a=M("index",t,e,n),s=M("tensor",t,e,n),i=n.getTensorList(r.id);return i.setItem(a,s),[i.idTensor]}case"TensorListGetItem":{const r=M("tensorListId",t,e,n),a=M("index",t,e,n),s=M("elementShape",t,e,n),i=M("elementDType",t,e,n);return[n.getTensorList(r.id).getItem(a,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=M("indices",t,e,n),a=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const a=Math.max(...e);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new St([],n,t.dtype,r),i=(0,S.HHK)(t,0);return e.forEach(((t,e)=>{s.setItem(t,i[e])})),s}(M("tensor",t,e,n),r,M("elementShape",t,e,n),M("numElements",t,e,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=M("elementShape",t,e,n),a=M("elementDType",t,e,n);let s;s="TensorListReserve"===t.op?"numElements":"maxNumElements";const i=M(s,t,e,n),o=function(t,e,n,r){return new St([],t,e,r)}(r,a,0,"TensorListReserve"===t.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const r=M("tensorListId",t,e,n),a=M("indices",t,e,n),s=M("elementShape",t,e,n),i=M("elementDType",t,e,n);return[n.getTensorList(r.id).gather(a,i,s)]}case"TensorListStack":{const r=M("tensorListId",t,e,n),a=M("elementShape",t,e,n),s=M("elementDType",t,e,n),i=M("numElements",t,e,n);return[n.getTensorList(r.id).stack(a,s,i)]}case"TensorListFromTensor":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);bt(t.shape.slice(1),e,"TensorList shape mismatch: ");const a=(0,S.HHK)(t);return new St(a,e,r)}(M("tensor",t,e,n),M("elementShape",t,e,n),M("elementDType",t,e,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=M("tensorListId",t,e,n),a=n.getTensorList(r.id),s=M("dtype",t,e,n),i=M("elementShape",t,e,n);return[a.concat(s,i)]}case"TensorListPushBack":{const r=M("tensorListId",t,e,n),a=M("tensor",t,e,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=M("tensorListId",t,e,n),a=M("elementShape",t,e,n),s=M("elementDType",t,e,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=M("tensor",t,e,n),a=M("elementShape",t,e,n),s=function(t,e,n){let r=0;const a=e.map((t=>(r+=t,r)));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${t.shape}`);const s=Tt(t.shape.slice(1),n),i=0===r?0:t.size/r,o=(0,S.lub)((()=>{const n=[];t=(0,S.XLQ)(t,[1,r,i]);for(let r=0;r<e.length;++r){const o=[0,0===r?0:a[r-1],0],u=[1,e[r],i];n[r]=(0,S.XLQ)((0,S.tPi)(t,o,u),s)}return t.dispose(),n})),u=new St([],n,t.dtype,e.length);for(let p=0;p<o.length;p++)u.setItem(p,o[p]);return u}(r,M("lengths",t,e,n),a);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{const r=M("tensorListId",t,e,n),a=n.getTensorList(r.id);return[(0,S.iD$)(a.size(),"int32")]}case"TensorListResize":{const r=M("tensorListId",t,e,n),a=M("size",t,e,n),s=n.getTensorList(r.id).resize(a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};function Ot(t,e,n){const[r,a]=M("fusedOps",t,e,n),s="biasadd"===r,i=!s,o="prelu"===a,u="fusedbatchnorm"===r,p=M("numArgs",t,e,n);if(s){if(o&&2!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&s&&1!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=M("strides",t,e,n),l=C(t,e,n),h=M("dataFormat",t,e,n).toUpperCase(),f=M("dilations",t,e,n);let[m,d]=M("args",t,e,n);i&&(d=m,m=void 0);return{stride:c,pad:l,dataFormat:h,dilations:f,biasArg:m,preluArg:d,activationFunc:a,leakyreluAlpha:M("leakyreluAlpha",t,e,n)}}function At(t,e,n){return{boxes:M("boxes",t,e,n),scores:M("scores",t,e,n),maxOutputSize:M("maxOutputSize",t,e,n),iouThreshold:M("iouThreshold",t,e,n),scoreThreshold:M("scoreThreshold",t,e,n),softNmsSigma:M("softNmsSigma",t,e,n)}}var Et=n(9494);class Mt{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=(0,S.iD$)(0),this.tensorMap=new Map,(0,S.CnY)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Et.i(this.size(),"int32")}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),(0,S.lub)((()=>{const t=(0,S.HHK)(e),r=n.length,a=t.length;S.D5U.assert(r===a,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`));for(let e=0;e<r;e++){const r=n[e],a=t[e];(0,S.CnY)(a),this.tensorMap.set(r,a)}return this.handle}))}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return(0,S.lub)((()=>{const t=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,e);t.push(s)}return(0,S.knu)(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}function kt(t,e,n,r,a=S.lub){const s=((t,e,n)=>{switch(t.category){case"arithmetic":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(M("a",t,e,n),M("b",t,e,n))];case"AddN":return[r.addN(M("tensors",t,e,n))];case"FloorMod":case"Mod":return[r.mod(M("a",t,e,n),M("b",t,e,n))];case"Mul":return[r.mul(M("a",t,e,n),M("b",t,e,n))];case"RealDiv":case"Div":return[r.div(M("a",t,e,n),M("b",t,e,n))];case"DivNoNan":return[r.divNoNan(M("a",t,e,n),M("b",t,e,n))];case"FloorDiv":return[r.floorDiv(M("a",t,e,n),M("b",t,e,n))];case"Sub":return[r.sub(M("a",t,e,n),M("b",t,e,n))];case"Minimum":return[r.minimum(M("a",t,e,n),M("b",t,e,n))];case"Maximum":return[r.maximum(M("a",t,e,n),M("b",t,e,n))];case"Pow":return[r.pow(M("a",t,e,n),M("b",t,e,n))];case"SquaredDifference":return[r.squaredDifference(M("a",t,e,n),M("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"basic_math":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"Abs":case"ComplexAbs":return[r.abs(M("x",t,e,n))];case"Acos":return[r.acos(M("x",t,e,n))];case"Acosh":return[r.acosh(M("x",t,e,n))];case"Asin":return[r.asin(M("x",t,e,n))];case"Asinh":return[r.asinh(M("x",t,e,n))];case"Atan":return[r.atan(M("x",t,e,n))];case"Atan2":return[r.atan2(M("x",t,e,n),M("y",t,e,n))];case"Atanh":return[r.atanh(M("x",t,e,n))];case"Ceil":return[r.ceil(M("x",t,e,n))];case"Complex":return[r.complex(M("real",t,e,n),M("imag",t,e,n))];case"Cos":return[r.cos(M("x",t,e,n))];case"Cosh":return[r.cosh(M("x",t,e,n))];case"Elu":return[r.elu(M("x",t,e,n))];case"Erf":return[r.erf(M("x",t,e,n))];case"Exp":return[r.exp(M("x",t,e,n))];case"Expm1":return[r.expm1(M("x",t,e,n))];case"Floor":return[r.floor(M("x",t,e,n))];case"Log":return[r.log(M("x",t,e,n))];case"Log1p":return[r.log1p(M("x",t,e,n))];case"Imag":return[r.imag(M("x",t,e,n))];case"Neg":return[r.neg(M("x",t,e,n))];case"Reciprocal":return[r.reciprocal(M("x",t,e,n))];case"Real":return[r.real(M("x",t,e,n))];case"Relu":return[r.relu(M("x",t,e,n))];case"Round":return[r.round(M("x",t,e,n))];case"Selu":return[r.selu(M("x",t,e,n))];case"Sigmoid":return[r.sigmoid(M("x",t,e,n))];case"Sin":return[r.sin(M("x",t,e,n))];case"Sign":return[r.sign(M("x",t,e,n))];case"Sinh":return[r.sinh(M("x",t,e,n))];case"Softplus":return[r.softplus(M("x",t,e,n))];case"Sqrt":return[r.sqrt(M("x",t,e,n))];case"Square":return[r.square(M("x",t,e,n))];case"Tanh":return[r.tanh(M("x",t,e,n))];case"Tan":return[r.tan(M("x",t,e,n))];case"ClipByValue":return[r.clipByValue(M("x",t,e,n),M("clipValueMin",t,e,n),M("clipValueMax",t,e,n))];case"Relu6":return[r.relu6(M("x",t,e,n))];case"Rsqrt":return[r.rsqrt(k(t.inputNames[0],e,n))];case"Prod":return[r.prod(M("x",t,e,n),M("axes",t,e,n))];case"LeakyRelu":return[r.leakyRelu(M("x",t,e,n),M("alpha",t,e,n))];case"Prelu":return[r.prelu(M("x",t,e,n),M("alpha",t,e,n))];case"IsNan":return[r.isNaN(k(t.inputNames[0],e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"control":return _t(t,e,n);case"convolution":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"Conv1D":{const a=M("stride",t,e,n),s=M("pad",t,e,n),i=M("dataFormat",t,e,n).toUpperCase(),o=M("dilation",t,e,n);return[r.conv1d(M("x",t,e,n),M("filter",t,e,n),a,s,i,o)]}case"Conv2D":{const a=M("strides",t,e,n),s=C(t,e,n),i=M("dataFormat",t,e,n).toUpperCase(),o=M("dilations",t,e,n);return[r.conv2d(M("x",t,e,n),M("filter",t,e,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:a,pad:s,dataFormat:i,dilations:o,biasArg:u,preluArg:p,activationFunc:c,leakyreluAlpha:l}=Ot(t,e,n);return[r.fused.conv2d({x:M("x",t,e,n),filter:M("filter",t,e,n),strides:[a[1],a[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:p,leakyreluAlpha:l})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:s,dataFormat:i,dilations:o,biasArg:u,preluArg:p,activationFunc:c,leakyreluAlpha:l}=Ot(t,e,n);return[r.fused.depthwiseConv2d({x:M("x",t,e,n),filter:M("filter",t,e,n),strides:[a[1],a[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:u,activation:c,preluActivationWeights:p,leakyreluAlpha:l})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=M("outputShape",t,e,n),s=M("strides",t,e,n),i=C(t,e,n);return[r.conv2dTranspose(M("x",t,e,n),M("filter",t,e,n),a,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=M("strides",t,e,n),s=C(t,e,n),i=M("dilations",t,e,n),o=M("dataFormat",t,e,n).toUpperCase();return[r.depthwiseConv2d(M("input",t,e,n),M("filter",t,e,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"Conv3D":{const a=M("strides",t,e,n),s=M("pad",t,e,n),i=M("dataFormat",t,e,n).toUpperCase(),o=M("dilations",t,e,n);return[r.conv3d(M("x",t,e,n),M("filter",t,e,n),[a[1],a[2],a[3]],s,i,[o[1],o[2],o[3]])]}case"AvgPool":{const a=M("strides",t,e,n),s=M("pad",t,e,n),i=M("kernelSize",t,e,n);return[r.avgPool(M("x",t,e,n),[i[1],i[2]],[a[1],a[2]],s)]}case"MaxPool":{const a=M("strides",t,e,n),s=M("pad",t,e,n),i=M("kernelSize",t,e,n);return[r.maxPool(M("x",t,e,n),[i[1],i[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{const a=M("strides",t,e,n),s=M("pad",t,e,n),i=M("kernelSize",t,e,n),o=M("includeBatchInIndex",t,e,n),{result:u,indexes:p}=r.maxPoolWithArgmax(M("x",t,e,n),[i[1],i[2]],[a[1],a[2]],s,o);return[u,p]}case"AvgPool3D":{const a=M("strides",t,e,n),s=M("pad",t,e,n),i=M("kernelSize",t,e,n);return[r.avgPool3d(M("x",t,e,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{const a=M("strides",t,e,n),s=M("pad",t,e,n),i=M("kernelSize",t,e,n);return[r.maxPool3d(M("x",t,e,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{const a=M("strides",t,e,n),s=M("pad",t,e,n),i=M("dilations",t,e,n),o=a[1],u=a[2],p=i[1],c=i[2];return[r.dilation2d(M("x",t,e,n),M("filter",t,e,n),[o,u],s,[p,c],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"creation":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"Fill":{const a=M("shape",t,e,n),s=M("dtype",t,e,n),i=M("value",t,e,n);return[r.fill(a,i,s)]}case"LinSpace":{const a=M("start",t,e,n),s=M("stop",t,e,n),i=M("num",t,e,n);return[r.linspace(a,s,i)]}case"Multinomial":{const a=M("logits",t,e,n),s=M("numSamples",t,e,n),i=M("seed",t,e,n);return[r.multinomial(a,s,i)]}case"OneHot":{const a=M("indices",t,e,n),s=M("depth",t,e,n),i=M("onValue",t,e,n),o=M("offValue",t,e,n),u=M("dtype",t,e,n);return[r.oneHot(a,s,i,o,u)]}case"Ones":return[r.ones(M("shape",t,e,n),M("dtype",t,e,n))];case"OnesLike":return[r.onesLike(M("x",t,e,n))];case"RandomStandardNormal":return[r.randomStandardNormal(M("shape",t,e,n),M("dtype",t,e,n),M("seed",t,e,n))];case"RandomUniform":return[r.randomUniform(M("shape",t,e,n),M("minval",t,e,n),M("maxval",t,e,n),M("dtype",t,e,n))];case"Range":{const a=M("start",t,e,n),s=M("stop",t,e,n),i=M("step",t,e,n);return[r.range(a,s,i,M("dtype",t,e,n))]}case"TruncatedNormal":{const a=M("shape",t,e,n),s=M("mean",t,e,n),i=M("stdDev",t,e,n),o=M("seed",t,e,n);return[r.truncatedNormal(a,s,i,M("dtype",t,e,n),o)]}case"Zeros":return[r.zeros(M("shape",t,e,n),M("dtype",t,e,n))];case"ZerosLike":return[r.zerosLike(M("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"dynamic":return(async(t,e,n,r,a=T)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:u,softNmsSigma:p}=At(t,e,n),c=await a.image.nonMaxSuppressionWithScoreAsync(r,s,i,o,u,p);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=At(t,e,n),p=M("padToMaxOutputSize",t,e,n),c=await a.image.nonMaxSuppressionPaddedAsync(r,s,i,o,u,p);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:u}=At(t,e,n);return[await a.image.nonMaxSuppressionAsync(r,s,i,o,u)]}case"Where":{const r=a.cast(M("condition",t,e,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(M("x",t,e,n),M("y",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case"evaluation":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"LowerBound":{const a=M("sortedSequence",t,e,n),s=M("values",t,e,n);return[r.lowerBound(a,s)]}case"TopKV2":{const a=M("x",t,e,n),s=M("k",t,e,n),i=M("sorted",t,e,n),o=r.topk(a,s,i);return[o.values,o.indices]}case"UpperBound":{const a=M("sortedSequence",t,e,n),s=M("values",t,e,n);return[r.upperBound(a,s)]}case"Unique":{const a=M("x",t,e,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{const a=M("x",t,e,n),s=M("axis",t,e,n),i=r.unique(a,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"image":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"ResizeBilinear":{const a=M("images",t,e,n),s=M("size",t,e,n),i=M("alignCorners",t,e,n),o=M("halfPixelCenters",t,e,n);return[r.image.resizeBilinear(a,[s[0],s[1]],i,o)]}case"ResizeNearestNeighbor":{const a=M("images",t,e,n),s=M("size",t,e,n),i=M("alignCorners",t,e,n),o=M("halfPixelCenters",t,e,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],i,o)]}case"CropAndResize":{const a=M("image",t,e,n),s=M("boxes",t,e,n),i=M("boxInd",t,e,n),o=M("cropSize",t,e,n),u=M("method",t,e,n),p=M("extrapolationValue",t,e,n);return[r.image.cropAndResize(a,s,i,o,u,p)]}case"ImageProjectiveTransformV3":{const a=M("images",t,e,n),s=M("transforms",t,e,n),i=M("outputShape",t,e,n),o=M("fillValue",t,e,n),u=M("interpolation",t,e,n),p=M("fillMode",t,e,n);return[r.image.transform(a,s,u.toLowerCase(),p.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"graph":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const a=M("default",t,e,n);return[k(t.name,e,n)||a];case"Placeholder":return[k(t.name,e,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[L(M("x",t,e,n))];case"IdentityN":return M("x",t,e,n).map((t=>L(t)));case"Snapshot":return[L(M("x",t,e,n))];case"Shape":return[r.tensor1d(M("x",t,e,n).shape,"int32")];case"ShapeN":return M("x",t,e,n).map((t=>r.tensor1d(t.shape)));case"Size":return[r.scalar(M("x",t,e,n).size,"int32")];case"Rank":return[r.scalar(M("x",t,e,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const s=M("x",t,e,n),i=M("data",t,e,n),o=M("message",t,e,n),u=M("summarize",t,e,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let t=0;t<i.length;t++)console.log(Array.prototype.slice.call(i[t].dataSync()).slice(0,u));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"logical":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"Equal":return[r.equal(M("a",t,e,n),M("b",t,e,n))];case"NotEqual":return[r.notEqual(M("a",t,e,n),M("b",t,e,n))];case"Greater":return[r.greater(M("a",t,e,n),M("b",t,e,n))];case"GreaterEqual":return[r.greaterEqual(M("a",t,e,n),M("b",t,e,n))];case"Less":return[r.less(M("a",t,e,n),M("b",t,e,n))];case"LessEqual":return[r.lessEqual(M("a",t,e,n),M("b",t,e,n))];case"LogicalAnd":return[r.logicalAnd(M("a",t,e,n),M("b",t,e,n))];case"LogicalNot":return[r.logicalNot(M("a",t,e,n))];case"LogicalOr":return[r.logicalOr(M("a",t,e,n),M("b",t,e,n))];case"Select":case"SelectV2":return[r.where(M("condition",t,e,n),M("a",t,e,n),M("b",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"matrices":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(M("a",t,e,n),M("b",t,e,n),M("transposeA",t,e,n),M("transposeB",t,e,n))];case"Einsum":return[r.einsum(M("equation",t,e,n),...M("tensors",t,e,n))];case"Transpose":return[r.transpose(M("x",t,e,n),M("perm",t,e,n))];case"_FusedMatMul":const[a,s]=M("fusedOps",t,e,n),i="biasadd"===a,o="prelu"===s,u=M("numArgs",t,e,n),p=M("leakyreluAlpha",t,e,n);if(i){if(o&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,l]=M("args",t,e,n);return[r.fused.matMul({a:M("a",t,e,n),b:M("b",t,e,n),transposeA:M("transposeA",t,e,n),transposeB:M("transposeB",t,e,n),bias:c,activation:s,preluActivationWeights:l,leakyreluAlpha:p})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"normalization":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"EuclideanNorm":return[r.euclideanNorm(M("x",t,e,n),M("axis",t,e,n),M("keepDims",t,e,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(M("x",t,e,n),M("mean",t,e,n),M("variance",t,e,n),M("offset",t,e,n),M("scale",t,e,n),M("epsilon",t,e,n))];case"LRN":return[r.localResponseNormalization(M("x",t,e,n),M("radius",t,e,n),M("bias",t,e,n),M("alpha",t,e,n),M("beta",t,e,n))];case"Softmax":return[r.softmax(M("x",t,e,n))];case"LogSoftmax":return[r.logSoftmax(M("x",t,e,n))];case"SparseToDense":return[r.sparseToDense(M("sparseIndices",t,e,n),M("outputShape",t,e,n),M("sparseValues",t,e,n),M("defaultValue",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"reduction":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"Max":{const a=M("axis",t,e,n),s=M("keepDims",t,e,n);return[r.max(M("x",t,e,n),a,s)]}case"Mean":{const a=M("axis",t,e,n),s=M("keepDims",t,e,n);return[r.mean(M("x",t,e,n),a,s)]}case"Min":{const a=M("axis",t,e,n),s=M("keepDims",t,e,n);return[r.min(M("x",t,e,n),a,s)]}case"Sum":{const a=M("axis",t,e,n),s=M("keepDims",t,e,n);return[r.sum(M("x",t,e,n),a,s)]}case"All":{const a=M("axis",t,e,n),s=M("keepDims",t,e,n);return[r.all(M("x",t,e,n),a,s)]}case"Any":{const a=M("axis",t,e,n),s=M("keepDims",t,e,n);return[r.any(M("x",t,e,n),a,s)]}case"ArgMax":{const a=M("axis",t,e,n);return[r.argMax(M("x",t,e,n),a)]}case"ArgMin":{const a=M("axis",t,e,n);return[r.argMin(M("x",t,e,n),a)]}case"Prod":{const a=M("axis",t,e,n),s=M("keepDims",t,e,n);return[r.prod(M("x",t,e,n),a,s)]}case"Cumprod":{const a=M("axis",t,e,n),s=M("exclusive",t,e,n),i=M("reverse",t,e,n);return[r.cumprod(M("x",t,e,n),a,s,i)]}case"Cumsum":{const a=M("axis",t,e,n),s=M("exclusive",t,e,n),i=M("reverse",t,e,n);return[r.cumsum(M("x",t,e,n),a,s,i)]}case"Bincount":const a=M("x",t,e,n),s=M("weights",t,e,n),i=M("size",t,e,n);return[r.bincount(a,s,i)];case"DenseBincount":{const a=M("x",t,e,n),s=M("weights",t,e,n),i=M("size",t,e,n),o=M("binaryOutput",t,e,n);return[r.denseBincount(a,s,i,o)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"slice_join":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"ConcatV2":case"Concat":{const a=M("n",t,e,n),s=M("axis",t,e,n);let i=M("tensors",t,e,n);return i=i.slice(0,a),[r.concat(i,s)]}case"Gather":{const a=M("x",t,e,n),s=M("indices",t,e,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{const a=M("axis",t,e,n),s=M("batchDims",t,e,n),i=M("x",t,e,n),o=M("indices",t,e,n);return[r.gather(i,r.cast(o,"int32"),a,s)]}case"Reverse":{const a=M("dims",t,e,n),s=[];for(let t=0;t<a.length;t++)a[t]&&s.push(t);const i=M("x",t,e,n);return[r.reverse(i,s)]}case"ReverseV2":{const a=M("axis",t,e,n),s=M("x",t,e,n);return[r.reverse(s,a)]}case"Slice":{const a=M("begin",t,e,n),s=M("size",t,e,n);return[r.slice(M("x",t,e,n),a,s)]}case"StridedSlice":{const a=M("begin",t,e,n),s=M("end",t,e,n),i=M("strides",t,e,n),o=M("beginMask",t,e,n),u=M("endMask",t,e,n),p=M("ellipsisMask",t,e,n),c=M("newAxisMask",t,e,n),l=M("shrinkAxisMask",t,e,n),h=M("x",t,e,n);return[r.stridedSlice(h,a,s,i,o,u,p,c,l)]}case"Pack":return(0,S.lub)((()=>{const a=M("axis",t,e,n),s=M("tensors",t,e,n),i=s[0].shape,o=r.squeeze(s[0]).shape,u=s.map((t=>{const e=S.D5U.arraysEqual(t.shape,i);if(!e&&!S.D5U.arraysEqual(r.squeeze(t).shape,o))throw new Error("the input tensors shape does not match");return e?t:r.reshape(t,i)}));return[r.stack(u,a)]}));case"Unpack":{const a=M("axis",t,e,n),s=M("tensor",t,e,n);return r.unstack(s,a)}case"Tile":{const a=M("reps",t,e,n);return[r.tile(M("x",t,e,n),a)]}case"Split":case"SplitV":{const a=M("axis",t,e,n),s=M("numOrSizeSplits",t,e,n),i=M("x",t,e,n);return r.split(i,s,a)}case"ScatterNd":{const a=M("indices",t,e,n),s=M("values",t,e,n),i=M("shape",t,e,n);return[r.scatterND(a,s,i)]}case"GatherNd":{const a=M("x",t,e,n),s=M("indices",t,e,n);return[r.gatherND(a,s)]}case"SparseToDense":{const a=M("sparseIndices",t,e,n),s=M("outputShape",t,e,n),i=M("sparseValues",t,e,n),o=M("defaultValue",t,e,n);return[r.sparseToDense(a,i,s,i.dtype===o.dtype?o:r.cast(o,i.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"sparse":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:s,emptyRowIndicator:i,reverseIndexMap:o}=r.sparse.sparseFillEmptyRows(M("indices",t,e,n),M("values",t,e,n),M("denseShape",t,e,n),M("defaultValue",t,e,n));return[a,s,i,o]}case"SparseReshape":{const{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(M("inputIndices",t,e,n),M("inputShape",t,e,n),M("newShape",t,e,n));return[a,s]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(M("data",t,e,n),M("indices",t,e,n),M("segmentIds",t,e,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(M("data",t,e,n),M("indices",t,e,n),M("segmentIds",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"spectral":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"FFT":return[r.fft(M("x",t,e,n))];case"IFFT":return[r.ifft(M("x",t,e,n))];case"RFFT":return[r.rfft(M("x",t,e,n))];case"IRFFT":return[r.irfft(M("x",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"string":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(M("data",t,e,n),M("dataSplits",t,e,n),M("separator",t,e,n),M("nGramWidths",t,e,n),M("leftPad",t,e,n),M("rightPad",t,e,n),M("padWidth",t,e,n),M("preserveShortSequences",t,e,n));return[a,s]}case"StringSplit":{const{indices:a,values:s,shape:i}=r.string.stringSplit(M("input",t,e,n),M("delimiter",t,e,n),M("skipEmpty",t,e,n));return[a,s,i]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(M("input",t,e,n),M("numBuckets",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"transformation":return a((()=>((t,e,n,r=T)=>{switch(t.op){case"Cast":return[r.cast(M("x",t,e,n),M("dtype",t,e,n))];case"ExpandDims":{const a=M("axis",t,e,n);return[r.expandDims(M("x",t,e,n),a)]}case"Squeeze":{const a=M("axis",t,e,n);return[r.squeeze(M("x",t,e,n),a)]}case"Reshape":return[r.reshape(M("x",t,e,n),M("shape",t,e,n))];case"MirrorPad":return[r.mirrorPad(M("x",t,e,n),M("padding",t,e,n),M("mode",t,e,n))];case"PadV2":case"Pad":return[r.pad(M("x",t,e,n),M("padding",t,e,n),M("constantValue",t,e,n))];case"SpaceToBatchND":{const a=M("blockShape",t,e,n),s=M("paddings",t,e,n);return[r.spaceToBatchND(M("x",t,e,n),a,s)]}case"BatchToSpaceND":{const a=M("blockShape",t,e,n),s=M("crops",t,e,n);return[r.batchToSpaceND(M("x",t,e,n),a,s)]}case"DepthToSpace":{const a=M("blockSize",t,e,n),s=M("dataFormat",t,e,n).toUpperCase();return[r.depthToSpace(M("x",t,e,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(M("x",t,e,n),M("shape",t,e,n))];case"BroadcastArgs":return[r.broadcastArgs(M("s0",t,e,n),M("s1",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case"hash_table":return(async(t,e,n,r)=>{switch(t.op){case"HashTable":case"HashTableV2":{const a=M("keyDType",t,e,n),s=M("valueDType",t,e,n),i=new Mt(a,s);return r.addHashTable(t.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=M("tableHandle",t,e,n,r),s=M("keys",t,e,n),i=M("values",t,e,n),o=r.getHashTableById(a.id);return[await o.import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{const a=M("tableHandle",t,e,n,r),s=M("keys",t,e,n),i=M("defaultValue",t,e,n),o=r.getHashTableById(a.id);return[await o.find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=M("tableHandle",t,e,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,r);case"custom":const s=E(t.op);if(s&&s.customExecutor)return s.customExecutor(new gt(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return S.D5U.isPromise(s)?s.then((t=>[].concat(t))):[].concat(s)}class It{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?"":`${t.frameName}-${t.iterationId}`)).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function Ft(t,e,n,r){const a=new Set,s=[];let i=null,o=null;const u=new Set,p=Object.keys(t).map((t=>D(t)[0]));let c=[];null!=r&&(c=r.map((t=>D(t.name)[0])));const l=[...e];for(;l.length>0;){const t=l.pop();(Rt(t)||jt(t)||Pt(t))&&null==i&&(i=t,o=i.children.map((t=>t.name)).filter((t=>a.has(t)))),a.add(t.name),null==n[t.name]&&(-1===p.indexOf(t.name)&&-1===c.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach((t=>{u.has(t.name)||(u.add(t.name),l.push(t))})):s.push(t.name)))}return{inputs:t,outputs:e,usedNodes:a,missingInputs:s,dynamicNode:i,syncInputs:o}}const Dt=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Ct=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Lt=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Rt(t){return Dt.indexOf(t.op)>=0}function jt(t){return Ct.indexOf(t.op)>=0}function Pt(t){return Lt.indexOf(t.op)>=0}class Vt{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new Vt(t.functions[e],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((t,e)=>(t[e]=this._functions[e].signature,t)),{})}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const n=Ft(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=e.map((t=>t.name)),a=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:a}=n,s=[],i=Object.keys(a).map((t=>D(t)[0])).map((e=>t.nodes[e])),o=t.initNodes;i.forEach((t=>{r.has(t.name)&&s.push(t)})),t.weights.forEach((t=>{r.has(t.name)&&s.push(t)})),null!=o&&o.forEach((t=>{r.has(t.name)&&s.push(t)}));const u=new Set,p=[];for(;s.length>0;){const t=s.pop();u.add(t.name),e[t.name]||p.push(t),t.children.forEach((t=>{!u.has(t.name)&&r.has(t.name)&&t.inputs.every((t=>u.has(t.name)))&&s.push(t)}))}return p}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map((t=>this.graph.nodes[D(t)[0]])),a=e.map((t=>D(t)[0]));let s=a.map((t=>this.graph.nodes[t]));this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);const i=this.getCompilationKey(r,s);let o=this.compiledMap.get(i);null==o&&(o=this.compile(t,s),this.compiledMap.set(i,o));const u={},p={};return(0,S.lub)((()=>{const n=new It(this.weightMap,u,p,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,a]=D(e),s=[];s[a]=t[e],r[n]=s}));const s=this.getFrozenTensorIds(r),i={};for(let t=0;t<o.length;t++){const e=o[t];if(!r[e.name]){const t=kt(e,r,n,this._resourceManager);if(S.D5U.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.checkTensorForDisposal(e.name,e,r,n,s,a,i)}}return null==this.parent&&n.dispose(s),e.map((t=>k(t,r,n)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,a,s,i){"control"!==e.category&&-1===s.indexOf(t)&&(n[t].forEach((t=>{null!=t&&(i[t.id]=(i[t.id]||0)+e.children.length)})),e.inputs.forEach((t=>{if("control"!==t.category){const s=function(t,e,n){return e[F(t,n.currentContextId)]}(t.name,n,r);null!=s&&s.forEach((t=>{if(t&&!t.kept&&!a.has(t.id)){const n=i[t.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=I(e.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=t}else t.dispose();delete i[t.id]}else null!=n&&i[t.id]--}}))}})))}async executeAsync(t,e){return this._executeAsync(t,e)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((t=>this.intermediateTensors[t].forEach((t=>t.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((t=>{this.tensorsMap[t].forEach((t=>{!t||t.kept||t.isDisposed||this.keepIds.has(t.id)||t.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const t in this.intermediateTensors)this.intermediateTensors[t].forEach((t=>t.dispose())),delete this.intermediateTensors[t]}async _executeAsync(t,e,n=!1,r={},a={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));try{this.keepTensorForDebug=(0,S.OBj)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(p){console.warn(p.message)}this.resetIntermediateTensors();const s=new It(this.weightMap,r,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(t,s,e,n);const i=e.map((t=>k(t,this.tensorsMap,s))),o=i.map((t=>t.id)),u=Object.keys(t).map((e=>t[e].id));return this.keepIds=new Set([...o,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),i}async executeFunctionAsync(t,e,n){const r=t.reduce(((t,e,n)=>(t[this.inputs[n].name]=e,t)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const a=Object.keys(t),s=a.map((t=>this.graph.nodes[D(t)[0]])),i=n.map((t=>D(t)[0]));let o=i.map((t=>this.graph.nodes[t]));0===o.length&&(o=this._outputs);const{usedNodes:u,missingInputs:p,dynamicNode:c,syncInputs:l}=Ft(t,o,this.weightMap,this._initNodes),h=[...s,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=D(e),a=[];a[r]=t[e],f[n]=a}));const m={},d=this.getFrozenTensorIds(f),y={};for(;h.length>0;){const t=this.processStack(s,h,e,f,y,d,i,m,u);await Promise.all(t)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const g=o.filter((t=>!Rt(t)&&!k(t.name,f,e))).map((t=>t.name));if(g.length>0){let t="";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${l}]`),new Error(`Cannot compute the outputs [${g}] from the provided inputs [${a}]. Consider providing the following inputs: [${p}]. ${t}`)}return f}processStack(t,e,n,r,a,s,i,o,u){const p=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let c="";if("Enter"===t.node.op&&M("isConstant",t.node,r,n)&&([c]=I(t.node.name,n)),null==r[t.node.name]){const l=kt(t.node,r,n,this._resourceManager);c||([c]=I(t.node.name,n));const h=n.currentContext;S.D5U.isPromise(l)?p.push(l.then((p=>(r[c]=p,n.currentContext=h,this.checkTensorForDisposal(c,t.node,r,n,s,i,o),this.processChildNodes(t.node,e,n,r,a,u),p)))):(r[c]=l,this.checkTensorForDisposal(c,t.node,r,n,s,i,o),this.processChildNodes(t.node,e,n,r,a,u))}else this.processChildNodes(t.node,e,n,r,a,u)}return p}processChildNodes(t,e,n,r,a,s){t.children.forEach((t=>{const[i]=I(t.name,n);!a[i]&&s.has(t.name)&&("Merge"===t.op?t.inputNames.some((t=>!!k(t,r,n)))&&(a[i]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!k(t,r,n)))&&(a[i]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((e=>{const n=t[e],[r]=D(e),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const t=a.attrParams.shape.value,e=t.length===n.shape.length&&n.shape.every(((e,n)=>-1===t[n]||t[n]===e));S.D5U.assert(e,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&S.D5U.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(t){const e={};for(const n in t)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){e[this._signature.inputs[n].name]=t[n]}else e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=D(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]){return this._signature.outputs[t].name}return t}),{})}checkOutputs(t){t.forEach((t=>{const[e]=D(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class Bt{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class zt{constructor(t,e={},n=S.io){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=n,null==e&&(this.loadOptions={}),this.resourceManager=new Bt}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return S.D5U.isPromise(t)?t.then((t=>this.loadSync(t))):this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const t=this.artifacts.userDefinedMetadata;null!=t.signature&&(n=t.signature),null!=t.structuredOutputKeys&&(this.structuredOutputKeys=t.structuredOutputKeys)}this.signature=n,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Vt(nt.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const e=nt.Instance.transformGraph(t.modelInitializer);this.initializer=new Vt(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if("string"===typeof t){const e=this.io.getSaveHandlers(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(this.artifacts)}predict(t,e){const n=this.execute(t,this.outputNodes);if(this.structuredOutputKeys){const t=n instanceof S.esB?[n]:n,e={};return t.forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(t){if(!(t instanceof S.esB)&&!Array.isArray(t))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce(((e,n)=>(e[n]=[t[n]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Ut(t,e={},n=S.io){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==e&&(e={}),e.fromTFHub&&"string"===typeof t&&(t=function(t){t.endsWith("/")||(t+="/");return`${t}model.json?tfjs-format=file`}(t));const r=new zt(t,e,n);return await r.load(),r}var $t=function(){return($t=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)};function Ht(t,e,n,r){return new(n||(n=Promise))((function(a,s){function i(t){try{u(r.next(t))}catch(t){s(t)}}function o(t){try{u(r.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,o)}u((r=r.apply(t,e||[])).next())}))}function Gt(t,e){var n,r,a,s,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){i.label=s[1];break}if(6===s[0]&&i.label<a[1]){i.label=a[1],a=s;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(s);break}a[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}function Wt(t){var e=t.map((function(t){return t[0]}));return e.push(t[t.length-1][1]),e}var Xt={lips:Wt([[61,146],[146,91],[91,181],[181,84],[84,17],[17,314],[314,405],[405,321],[321,375],[375,291],[61,185],[185,40],[40,39],[39,37],[37,0],[0,267],[267,269],[269,270],[270,409],[409,291],[78,95],[95,88],[88,178],[178,87],[87,14],[14,317],[317,402],[402,318],[318,324],[324,308],[78,191],[191,80],[80,81],[81,82],[82,13],[13,312],[312,311],[311,310],[310,415],[415,308]]),leftEye:Wt([[263,249],[249,390],[390,373],[373,374],[374,380],[380,381],[381,382],[382,362],[263,466],[466,388],[388,387],[387,386],[386,385],[385,384],[384,398],[398,362]]),leftEyebrow:Wt([[276,283],[283,282],[282,295],[295,285],[300,293],[293,334],[334,296],[296,336]]),leftIris:Wt([[474,475],[475,476],[476,477],[477,474]]),rightEye:Wt([[33,7],[7,163],[163,144],[144,145],[145,153],[153,154],[154,155],[155,133],[33,246],[246,161],[161,160],[160,159],[159,158],[158,157],[157,173],[173,133]]),rightEyebrow:Wt([[46,53],[53,52],[52,65],[65,55],[70,63],[63,105],[105,66],[66,107]]),rightIris:Wt([[469,470],[470,471],[471,472],[472,469]]),faceOval:Wt([[10,338],[338,297],[297,332],[332,284],[284,251],[251,389],[389,356],[356,454],[454,323],[323,361],[361,288],[288,397],[397,365],[365,379],[379,378],[378,400],[400,377],[377,152],[152,148],[148,176],[176,149],[149,150],[150,136],[136,172],[172,58],[58,132],[132,93],[93,234],[234,127],[127,162],[162,21],[21,54],[54,103],[103,67],[67,109],[109,10]])},qt=[[127,34],[34,139],[139,127],[11,0],[0,37],[37,11],[232,231],[231,120],[120,232],[72,37],[37,39],[39,72],[128,121],[121,47],[47,128],[232,121],[121,128],[128,232],[104,69],[69,67],[67,104],[175,171],[171,148],[148,175],[118,50],[50,101],[101,118],[73,39],[39,40],[40,73],[9,151],[151,108],[108,9],[48,115],[115,131],[131,48],[194,204],[204,211],[211,194],[74,40],[40,185],[185,74],[80,42],[42,183],[183,80],[40,92],[92,186],[186,40],[230,229],[229,118],[118,230],[202,212],[212,214],[214,202],[83,18],[18,17],[17,83],[76,61],[61,146],[146,76],[160,29],[29,30],[30,160],[56,157],[157,173],[173,56],[106,204],[204,194],[194,106],[135,214],[214,192],[192,135],[203,165],[165,98],[98,203],[21,71],[71,68],[68,21],[51,45],[45,4],[4,51],[144,24],[24,23],[23,144],[77,146],[146,91],[91,77],[205,50],[50,187],[187,205],[201,200],[200,18],[18,201],[91,106],[106,182],[182,91],[90,91],[91,181],[181,90],[85,84],[84,17],[17,85],[206,203],[203,36],[36,206],[148,171],[171,140],[140,148],[92,40],[40,39],[39,92],[193,189],[189,244],[244,193],[159,158],[158,28],[28,159],[247,246],[246,161],[161,247],[236,3],[3,196],[196,236],[54,68],[68,104],[104,54],[193,168],[168,8],[8,193],[117,228],[228,31],[31,117],[189,193],[193,55],[55,189],[98,97],[97,99],[99,98],[126,47],[47,100],[100,126],[166,79],[79,218],[218,166],[155,154],[154,26],[26,155],[209,49],[49,131],[131,209],[135,136],[136,150],[150,135],[47,126],[126,217],[217,47],[223,52],[52,53],[53,223],[45,51],[51,134],[134,45],[211,170],[170,140],[140,211],[67,69],[69,108],[108,67],[43,106],[106,91],[91,43],[230,119],[119,120],[120,230],[226,130],[130,247],[247,226],[63,53],[53,52],[52,63],[238,20],[20,242],[242,238],[46,70],[70,156],[156,46],[78,62],[62,96],[96,78],[46,53],[53,63],[63,46],[143,34],[34,227],[227,143],[123,117],[117,111],[111,123],[44,125],[125,19],[19,44],[236,134],[134,51],[51,236],[216,206],[206,205],[205,216],[154,153],[153,22],[22,154],[39,37],[37,167],[167,39],[200,201],[201,208],[208,200],[36,142],[142,100],[100,36],[57,212],[212,202],[202,57],[20,60],[60,99],[99,20],[28,158],[158,157],[157,28],[35,226],[226,113],[113,35],[160,159],[159,27],[27,160],[204,202],[202,210],[210,204],[113,225],[225,46],[46,113],[43,202],[202,204],[204,43],[62,76],[76,77],[77,62],[137,123],[123,116],[116,137],[41,38],[38,72],[72,41],[203,129],[129,142],[142,203],[64,98],[98,240],[240,64],[49,102],[102,64],[64,49],[41,73],[73,74],[74,41],[212,216],[216,207],[207,212],[42,74],[74,184],[184,42],[169,170],[170,211],[211,169],[170,149],[149,176],[176,170],[105,66],[66,69],[69,105],[122,6],[6,168],[168,122],[123,147],[147,187],[187,123],[96,77],[77,90],[90,96],[65,55],[55,107],[107,65],[89,90],[90,180],[180,89],[101,100],[100,120],[120,101],[63,105],[105,104],[104,63],[93,137],[137,227],[227,93],[15,86],[86,85],[85,15],[129,102],[102,49],[49,129],[14,87],[87,86],[86,14],[55,8],[8,9],[9,55],[100,47],[47,121],[121,100],[145,23],[23,22],[22,145],[88,89],[89,179],[179,88],[6,122],[122,196],[196,6],[88,95],[95,96],[96,88],[138,172],[172,136],[136,138],[215,58],[58,172],[172,215],[115,48],[48,219],[219,115],[42,80],[80,81],[81,42],[195,3],[3,51],[51,195],[43,146],[146,61],[61,43],[171,175],[175,199],[199,171],[81,82],[82,38],[38,81],[53,46],[46,225],[225,53],[144,163],[163,110],[110,144],[52,65],[65,66],[66,52],[229,228],[228,117],[117,229],[34,127],[127,234],[234,34],[107,108],[108,69],[69,107],[109,108],[108,151],[151,109],[48,64],[64,235],[235,48],[62,78],[78,191],[191,62],[129,209],[209,126],[126,129],[111,35],[35,143],[143,111],[117,123],[123,50],[50,117],[222,65],[65,52],[52,222],[19,125],[125,141],[141,19],[221,55],[55,65],[65,221],[3,195],[195,197],[197,3],[25,7],[7,33],[33,25],[220,237],[237,44],[44,220],[70,71],[71,139],[139,70],[122,193],[193,245],[245,122],[247,130],[130,33],[33,247],[71,21],[21,162],[162,71],[170,169],[169,150],[150,170],[188,174],[174,196],[196,188],[216,186],[186,92],[92,216],[2,97],[97,167],[167,2],[141,125],[125,241],[241,141],[164,167],[167,37],[37,164],[72,38],[38,12],[12,72],[38,82],[82,13],[13,38],[63,68],[68,71],[71,63],[226,35],[35,111],[111,226],[101,50],[50,205],[205,101],[206,92],[92,165],[165,206],[209,198],[198,217],[217,209],[165,167],[167,97],[97,165],[220,115],[115,218],[218,220],[133,112],[112,243],[243,133],[239,238],[238,241],[241,239],[214,135],[135,169],[169,214],[190,173],[173,133],[133,190],[171,208],[208,32],[32,171],[125,44],[44,237],[237,125],[86,87],[87,178],[178,86],[85,86],[86,179],[179,85],[84,85],[85,180],[180,84],[83,84],[84,181],[181,83],[201,83],[83,182],[182,201],[137,93],[93,132],[132,137],[76,62],[62,183],[183,76],[61,76],[76,184],[184,61],[57,61],[61,185],[185,57],[212,57],[57,186],[186,212],[214,207],[207,187],[187,214],[34,143],[143,156],[156,34],[79,239],[239,237],[237,79],[123,137],[137,177],[177,123],[44,1],[1,4],[4,44],[201,194],[194,32],[32,201],[64,102],[102,129],[129,64],[213,215],[215,138],[138,213],[59,166],[166,219],[219,59],[242,99],[99,97],[97,242],[2,94],[94,141],[141,2],[75,59],[59,235],[235,75],[24,110],[110,228],[228,24],[25,130],[130,226],[226,25],[23,24],[24,229],[229,23],[22,23],[23,230],[230,22],[26,22],[22,231],[231,26],[112,26],[26,232],[232,112],[189,190],[190,243],[243,189],[221,56],[56,190],[190,221],[28,56],[56,221],[221,28],[27,28],[28,222],[222,27],[29,27],[27,223],[223,29],[30,29],[29,224],[224,30],[247,30],[30,225],[225,247],[238,79],[79,20],[20,238],[166,59],[59,75],[75,166],[60,75],[75,240],[240,60],[147,177],[177,215],[215,147],[20,79],[79,166],[166,20],[187,147],[147,213],[213,187],[112,233],[233,244],[244,112],[233,128],[128,245],[245,233],[128,114],[114,188],[188,128],[114,217],[217,174],[174,114],[131,115],[115,220],[220,131],[217,198],[198,236],[236,217],[198,131],[131,134],[134,198],[177,132],[132,58],[58,177],[143,35],[35,124],[124,143],[110,163],[163,7],[7,110],[228,110],[110,25],[25,228],[356,389],[389,368],[368,356],[11,302],[302,267],[267,11],[452,350],[350,349],[349,452],[302,303],[303,269],[269,302],[357,343],[343,277],[277,357],[452,453],[453,357],[357,452],[333,332],[332,297],[297,333],[175,152],[152,377],[377,175],[347,348],[348,330],[330,347],[303,304],[304,270],[270,303],[9,336],[336,337],[337,9],[278,279],[279,360],[360,278],[418,262],[262,431],[431,418],[304,408],[408,409],[409,304],[310,415],[415,407],[407,310],[270,409],[409,410],[410,270],[450,348],[348,347],[347,450],[422,430],[430,434],[434,422],[313,314],[314,17],[17,313],[306,307],[307,375],[375,306],[387,388],[388,260],[260,387],[286,414],[414,398],[398,286],[335,406],[406,418],[418,335],[364,367],[367,416],[416,364],[423,358],[358,327],[327,423],[251,284],[284,298],[298,251],[281,5],[5,4],[4,281],[373,374],[374,253],[253,373],[307,320],[320,321],[321,307],[425,427],[427,411],[411,425],[421,313],[313,18],[18,421],[321,405],[405,406],[406,321],[320,404],[404,405],[405,320],[315,16],[16,17],[17,315],[426,425],[425,266],[266,426],[377,400],[400,369],[369,377],[322,391],[391,269],[269,322],[417,465],[465,464],[464,417],[386,257],[257,258],[258,386],[466,260],[260,388],[388,466],[456,399],[399,419],[419,456],[284,332],[332,333],[333,284],[417,285],[285,8],[8,417],[346,340],[340,261],[261,346],[413,441],[441,285],[285,413],[327,460],[460,328],[328,327],[355,371],[371,329],[329,355],[392,439],[439,438],[438,392],[382,341],[341,256],[256,382],[429,420],[420,360],[360,429],[364,394],[394,379],[379,364],[277,343],[343,437],[437,277],[443,444],[444,283],[283,443],[275,440],[440,363],[363,275],[431,262],[262,369],[369,431],[297,338],[338,337],[337,297],[273,375],[375,321],[321,273],[450,451],[451,349],[349,450],[446,342],[342,467],[467,446],[293,334],[334,282],[282,293],[458,461],[461,462],[462,458],[276,353],[353,383],[383,276],[308,324],[324,325],[325,308],[276,300],[300,293],[293,276],[372,345],[345,447],[447,372],[352,345],[345,340],[340,352],[274,1],[1,19],[19,274],[456,248],[248,281],[281,456],[436,427],[427,425],[425,436],[381,256],[256,252],[252,381],[269,391],[391,393],[393,269],[200,199],[199,428],[428,200],[266,330],[330,329],[329,266],[287,273],[273,422],[422,287],[250,462],[462,328],[328,250],[258,286],[286,384],[384,258],[265,353],[353,342],[342,265],[387,259],[259,257],[257,387],[424,431],[431,430],[430,424],[342,353],[353,276],[276,342],[273,335],[335,424],[424,273],[292,325],[325,307],[307,292],[366,447],[447,345],[345,366],[271,303],[303,302],[302,271],[423,266],[266,371],[371,423],[294,455],[455,460],[460,294],[279,278],[278,294],[294,279],[271,272],[272,304],[304,271],[432,434],[434,427],[427,432],[272,407],[407,408],[408,272],[394,430],[430,431],[431,394],[395,369],[369,400],[400,395],[334,333],[333,299],[299,334],[351,417],[417,168],[168,351],[352,280],[280,411],[411,352],[325,319],[319,320],[320,325],[295,296],[296,336],[336,295],[319,403],[403,404],[404,319],[330,348],[348,349],[349,330],[293,298],[298,333],[333,293],[323,454],[454,447],[447,323],[15,16],[16,315],[315,15],[358,429],[429,279],[279,358],[14,15],[15,316],[316,14],[285,336],[336,9],[9,285],[329,349],[349,350],[350,329],[374,380],[380,252],[252,374],[318,402],[402,403],[403,318],[6,197],[197,419],[419,6],[318,319],[319,325],[325,318],[367,364],[364,365],[365,367],[435,367],[367,397],[397,435],[344,438],[438,439],[439,344],[272,271],[271,311],[311,272],[195,5],[5,281],[281,195],[273,287],[287,291],[291,273],[396,428],[428,199],[199,396],[311,271],[271,268],[268,311],[283,444],[444,445],[445,283],[373,254],[254,339],[339,373],[282,334],[334,296],[296,282],[449,347],[347,346],[346,449],[264,447],[447,454],[454,264],[336,296],[296,299],[299,336],[338,10],[10,151],[151,338],[278,439],[439,455],[455,278],[292,407],[407,415],[415,292],[358,371],[371,355],[355,358],[340,345],[345,372],[372,340],[346,347],[347,280],[280,346],[442,443],[443,282],[282,442],[19,94],[94,370],[370,19],[441,442],[442,295],[295,441],[248,419],[419,197],[197,248],[263,255],[255,359],[359,263],[440,275],[275,274],[274,440],[300,383],[383,368],[368,300],[351,412],[412,465],[465,351],[263,467],[467,466],[466,263],[301,368],[368,389],[389,301],[395,378],[378,379],[379,395],[412,351],[351,419],[419,412],[436,426],[426,322],[322,436],[2,164],[164,393],[393,2],[370,462],[462,461],[461,370],[164,0],[0,267],[267,164],[302,11],[11,12],[12,302],[268,12],[12,13],[13,268],[293,300],[300,301],[301,293],[446,261],[261,340],[340,446],[330,266],[266,425],[425,330],[426,423],[423,391],[391,426],[429,355],[355,437],[437,429],[391,327],[327,326],[326,391],[440,457],[457,438],[438,440],[341,382],[382,362],[362,341],[459,457],[457,461],[461,459],[434,430],[430,394],[394,434],[414,463],[463,362],[362,414],[396,369],[369,262],[262,396],[354,461],[461,457],[457,354],[316,403],[403,402],[402,316],[315,404],[404,403],[403,315],[314,405],[405,404],[404,314],[313,406],[406,405],[405,313],[421,418],[418,406],[406,421],[366,401],[401,361],[361,366],[306,408],[408,407],[407,306],[291,409],[409,408],[408,291],[287,410],[410,409],[409,287],[432,436],[436,410],[410,432],[434,416],[416,411],[411,434],[264,368],[368,383],[383,264],[309,438],[438,457],[457,309],[352,376],[376,401],[401,352],[274,275],[275,4],[4,274],[421,428],[428,262],[262,421],[294,327],[327,358],[358,294],[433,416],[416,367],[367,433],[289,455],[455,439],[439,289],[462,370],[370,326],[326,462],[2,326],[326,370],[370,2],[305,460],[460,455],[455,305],[254,449],[449,448],[448,254],[255,261],[261,446],[446,255],[253,450],[450,449],[449,253],[252,451],[451,450],[450,252],[256,452],[452,451],[451,256],[341,453],[453,452],[452,341],[413,464],[464,463],[463,413],[441,413],[413,414],[414,441],[258,442],[442,441],[441,258],[257,443],[443,442],[442,257],[259,444],[444,443],[443,259],[260,445],[445,444],[444,260],[467,342],[342,445],[445,467],[459,458],[458,250],[250,459],[289,392],[392,290],[290,289],[290,328],[328,460],[460,290],[376,433],[433,435],[435,376],[250,290],[290,392],[392,250],[411,416],[416,433],[433,411],[341,463],[463,464],[464,341],[453,464],[464,465],[465,453],[357,465],[465,412],[412,357],[343,412],[412,399],[399,343],[360,363],[363,440],[440,360],[437,399],[399,456],[456,437],[420,456],[456,363],[363,420],[401,435],[435,288],[288,401],[372,383],[383,353],[353,372],[339,255],[255,249],[249,339],[448,261],[261,255],[255,448],[133,243],[243,190],[190,133],[133,155],[155,112],[112,133],[33,246],[246,247],[247,33],[33,130],[130,25],[25,33],[398,384],[384,286],[286,398],[362,398],[398,414],[414,362],[362,463],[463,341],[341,362],[263,359],[359,467],[467,263],[263,249],[249,255],[255,263],[466,467],[467,260],[260,466],[75,60],[60,166],[166,75],[238,239],[239,79],[79,238],[162,127],[127,139],[139,162],[72,11],[11,37],[37,72],[121,232],[232,120],[120,121],[73,72],[72,39],[39,73],[114,128],[128,47],[47,114],[233,232],[232,128],[128,233],[103,104],[104,67],[67,103],[152,175],[175,148],[148,152],[119,118],[118,101],[101,119],[74,73],[73,40],[40,74],[107,9],[9,108],[108,107],[49,48],[48,131],[131,49],[32,194],[194,211],[211,32],[184,74],[74,185],[185,184],[191,80],[80,183],[183,191],[185,40],[40,186],[186,185],[119,230],[230,118],[118,119],[210,202],[202,214],[214,210],[84,83],[83,17],[17,84],[77,76],[76,146],[146,77],[161,160],[160,30],[30,161],[190,56],[56,173],[173,190],[182,106],[106,194],[194,182],[138,135],[135,192],[192,138],[129,203],[203,98],[98,129],[54,21],[21,68],[68,54],[5,51],[51,4],[4,5],[145,144],[144,23],[23,145],[90,77],[77,91],[91,90],[207,205],[205,187],[187,207],[83,201],[201,18],[18,83],[181,91],[91,182],[182,181],[180,90],[90,181],[181,180],[16,85],[85,17],[17,16],[205,206],[206,36],[36,205],[176,148],[148,140],[140,176],[165,92],[92,39],[39,165],[245,193],[193,244],[244,245],[27,159],[159,28],[28,27],[30,247],[247,161],[161,30],[174,236],[236,196],[196,174],[103,54],[54,104],[104,103],[55,193],[193,8],[8,55],[111,117],[117,31],[31,111],[221,189],[189,55],[55,221],[240,98],[98,99],[99,240],[142,126],[126,100],[100,142],[219,166],[166,218],[218,219],[112,155],[155,26],[26,112],[198,209],[209,131],[131,198],[169,135],[135,150],[150,169],[114,47],[47,217],[217,114],[224,223],[223,53],[53,224],[220,45],[45,134],[134,220],[32,211],[211,140],[140,32],[109,67],[67,108],[108,109],[146,43],[43,91],[91,146],[231,230],[230,120],[120,231],[113,226],[226,247],[247,113],[105,63],[63,52],[52,105],[241,238],[238,242],[242,241],[124,46],[46,156],[156,124],[95,78],[78,96],[96,95],[70,46],[46,63],[63,70],[116,143],[143,227],[227,116],[116,123],[123,111],[111,116],[1,44],[44,19],[19,1],[3,236],[236,51],[51,3],[207,216],[216,205],[205,207],[26,154],[154,22],[22,26],[165,39],[39,167],[167,165],[199,200],[200,208],[208,199],[101,36],[36,100],[100,101],[43,57],[57,202],[202,43],[242,20],[20,99],[99,242],[56,28],[28,157],[157,56],[124,35],[35,113],[113,124],[29,160],[160,27],[27,29],[211,204],[204,210],[210,211],[124,113],[113,46],[46,124],[106,43],[43,204],[204,106],[96,62],[62,77],[77,96],[227,137],[137,116],[116,227],[73,41],[41,72],[72,73],[36,203],[203,142],[142,36],[235,64],[64,240],[240,235],[48,49],[49,64],[64,48],[42,41],[41,74],[74,42],[214,212],[212,207],[207,214],[183,42],[42,184],[184,183],[210,169],[169,211],[211,210],[140,170],[170,176],[176,140],[104,105],[105,69],[69,104],[193,122],[122,168],[168,193],[50,123],[123,187],[187,50],[89,96],[96,90],[90,89],[66,65],[65,107],[107,66],[179,89],[89,180],[180,179],[119,101],[101,120],[120,119],[68,63],[63,104],[104,68],[234,93],[93,227],[227,234],[16,15],[15,85],[85,16],[209,129],[129,49],[49,209],[15,14],[14,86],[86,15],[107,55],[55,9],[9,107],[120,100],[100,121],[121,120],[153,145],[145,22],[22,153],[178,88],[88,179],[179,178],[197,6],[6,196],[196,197],[89,88],[88,96],[96,89],[135,138],[138,136],[136,135],[138,215],[215,172],[172,138],[218,115],[115,219],[219,218],[41,42],[42,81],[81,41],[5,195],[195,51],[51,5],[57,43],[43,61],[61,57],[208,171],[171,199],[199,208],[41,81],[81,38],[38,41],[224,53],[53,225],[225,224],[24,144],[144,110],[110,24],[105,52],[52,66],[66,105],[118,229],[229,117],[117,118],[227,34],[34,234],[234,227],[66,107],[107,69],[69,66],[10,109],[109,151],[151,10],[219,48],[48,235],[235,219],[183,62],[62,191],[191,183],[142,129],[129,126],[126,142],[116,111],[111,143],[143,116],[118,117],[117,50],[50,118],[223,222],[222,52],[52,223],[94,19],[19,141],[141,94],[222,221],[221,65],[65,222],[196,3],[3,197],[197,196],[45,220],[220,44],[44,45],[156,70],[70,139],[139,156],[188,122],[122,245],[245,188],[139,71],[71,162],[162,139],[149,170],[170,150],[150,149],[122,188],[188,196],[196,122],[206,216],[216,92],[92,206],[164,2],[2,167],[167,164],[242,141],[141,241],[241,242],[0,164],[164,37],[37,0],[11,72],[72,12],[12,11],[12,38],[38,13],[13,12],[70,63],[63,71],[71,70],[31,226],[226,111],[111,31],[36,101],[101,205],[205,36],[203,206],[206,165],[165,203],[126,209],[209,217],[217,126],[98,165],[165,97],[97,98],[237,220],[220,218],[218,237],[237,239],[239,241],[241,237],[210,214],[214,169],[169,210],[140,171],[171,32],[32,140],[241,125],[125,237],[237,241],[179,86],[86,178],[178,179],[180,85],[85,179],[179,180],[181,84],[84,180],[180,181],[182,83],[83,181],[181,182],[194,201],[201,182],[182,194],[177,137],[137,132],[132,177],[184,76],[76,183],[183,184],[185,61],[61,184],[184,185],[186,57],[57,185],[185,186],[216,212],[212,186],[186,216],[192,214],[214,187],[187,192],[139,34],[34,156],[156,139],[218,79],[79,237],[237,218],[147,123],[123,177],[177,147],[45,44],[44,4],[4,45],[208,201],[201,32],[32,208],[98,64],[64,129],[129,98],[192,213],[213,138],[138,192],[235,59],[59,219],[219,235],[141,242],[242,97],[97,141],[97,2],[2,141],[141,97],[240,75],[75,235],[235,240],[229,24],[24,228],[228,229],[31,25],[25,226],[226,31],[230,23],[23,229],[229,230],[231,22],[22,230],[230,231],[232,26],[26,231],[231,232],[233,112],[112,232],[232,233],[244,189],[189,243],[243,244],[189,221],[221,190],[190,189],[222,28],[28,221],[221,222],[223,27],[27,222],[222,223],[224,29],[29,223],[223,224],[225,30],[30,224],[224,225],[113,247],[247,225],[225,113],[99,60],[60,240],[240,99],[213,147],[147,215],[215,213],[60,20],[20,166],[166,60],[192,187],[187,213],[213,192],[243,112],[112,244],[244,243],[244,233],[233,245],[245,244],[245,128],[128,188],[188,245],[188,114],[114,174],[174,188],[134,131],[131,220],[220,134],[174,217],[217,236],[236,174],[236,198],[198,134],[134,236],[215,177],[177,58],[58,215],[156,143],[143,124],[124,156],[25,110],[110,7],[7,25],[31,228],[228,25],[25,31],[264,356],[356,368],[368,264],[0,11],[11,267],[267,0],[451,452],[452,349],[349,451],[267,302],[302,269],[269,267],[350,357],[357,277],[277,350],[350,452],[452,357],[357,350],[299,333],[333,297],[297,299],[396,175],[175,377],[377,396],[280,347],[347,330],[330,280],[269,303],[303,270],[270,269],[151,9],[9,337],[337,151],[344,278],[278,360],[360,344],[424,418],[418,431],[431,424],[270,304],[304,409],[409,270],[272,310],[310,407],[407,272],[322,270],[270,410],[410,322],[449,450],[450,347],[347,449],[432,422],[422,434],[434,432],[18,313],[313,17],[17,18],[291,306],[306,375],[375,291],[259,387],[387,260],[260,259],[424,335],[335,418],[418,424],[434,364],[364,416],[416,434],[391,423],[423,327],[327,391],[301,251],[251,298],[298,301],[275,281],[281,4],[4,275],[254,373],[373,253],[253,254],[375,307],[307,321],[321,375],[280,425],[425,411],[411,280],[200,421],[421,18],[18,200],[335,321],[321,406],[406,335],[321,320],[320,405],[405,321],[314,315],[315,17],[17,314],[423,426],[426,266],[266,423],[396,377],[377,369],[369,396],[270,322],[322,269],[269,270],[413,417],[417,464],[464,413],[385,386],[386,258],[258,385],[248,456],[456,419],[419,248],[298,284],[284,333],[333,298],[168,417],[417,8],[8,168],[448,346],[346,261],[261,448],[417,413],[413,285],[285,417],[326,327],[327,328],[328,326],[277,355],[355,329],[329,277],[309,392],[392,438],[438,309],[381,382],[382,256],[256,381],[279,429],[429,360],[360,279],[365,364],[364,379],[379,365],[355,277],[277,437],[437,355],[282,443],[443,283],[283,282],[281,275],[275,363],[363,281],[395,431],[431,369],[369,395],[299,297],[297,337],[337,299],[335,273],[273,321],[321,335],[348,450],[450,349],[349,348],[359,446],[446,467],[467,359],[283,293],[293,282],[282,283],[250,458],[458,462],[462,250],[300,276],[276,383],[383,300],[292,308],[308,325],[325,292],[283,276],[276,293],[293,283],[264,372],[372,447],[447,264],[346,352],[352,340],[340,346],[354,274],[274,19],[19,354],[363,456],[456,281],[281,363],[426,436],[436,425],[425,426],[380,381],[381,252],[252,380],[267,269],[269,393],[393,267],[421,200],[200,428],[428,421],[371,266],[266,329],[329,371],[432,287],[287,422],[422,432],[290,250],[250,328],[328,290],[385,258],[258,384],[384,385],[446,265],[265,342],[342,446],[386,387],[387,257],[257,386],[422,424],[424,430],[430,422],[445,342],[342,276],[276,445],[422,273],[273,424],[424,422],[306,292],[292,307],[307,306],[352,366],[366,345],[345,352],[268,271],[271,302],[302,268],[358,423],[423,371],[371,358],[327,294],[294,460],[460,327],[331,279],[279,294],[294,331],[303,271],[271,304],[304,303],[436,432],[432,427],[427,436],[304,272],[272,408],[408,304],[395,394],[394,431],[431,395],[378,395],[395,400],[400,378],[296,334],[334,299],[299,296],[6,351],[351,168],[168,6],[376,352],[352,411],[411,376],[307,325],[325,320],[320,307],[285,295],[295,336],[336,285],[320,319],[319,404],[404,320],[329,330],[330,349],[349,329],[334,293],[293,333],[333,334],[366,323],[323,447],[447,366],[316,15],[15,315],[315,316],[331,358],[358,279],[279,331],[317,14],[14,316],[316,317],[8,285],[285,9],[9,8],[277,329],[329,350],[350,277],[253,374],[374,252],[252,253],[319,318],[318,403],[403,319],[351,6],[6,419],[419,351],[324,318],[318,325],[325,324],[397,367],[367,365],[365,397],[288,435],[435,397],[397,288],[278,344],[344,439],[439,278],[310,272],[272,311],[311,310],[248,195],[195,281],[281,248],[375,273],[273,291],[291,375],[175,396],[396,199],[199,175],[312,311],[311,268],[268,312],[276,283],[283,445],[445,276],[390,373],[373,339],[339,390],[295,282],[282,296],[296,295],[448,449],[449,346],[346,448],[356,264],[264,454],[454,356],[337,336],[336,299],[299,337],[337,338],[338,151],[151,337],[294,278],[278,455],[455,294],[308,292],[292,415],[415,308],[429,358],[358,355],[355,429],[265,340],[340,372],[372,265],[352,346],[346,280],[280,352],[295,442],[442,282],[282,295],[354,19],[19,370],[370,354],[285,441],[441,295],[295,285],[195,248],[248,197],[197,195],[457,440],[440,274],[274,457],[301,300],[300,368],[368,301],[417,351],[351,465],[465,417],[251,301],[301,389],[389,251],[394,395],[395,379],[379,394],[399,412],[412,419],[419,399],[410,436],[436,322],[322,410],[326,2],[2,393],[393,326],[354,370],[370,461],[461,354],[393,164],[164,267],[267,393],[268,302],[302,12],[12,268],[312,268],[268,13],[13,312],[298,293],[293,301],[301,298],[265,446],[446,340],[340,265],[280,330],[330,425],[425,280],[322,426],[426,391],[391,322],[420,429],[429,437],[437,420],[393,391],[391,326],[326,393],[344,440],[440,438],[438,344],[458,459],[459,461],[461,458],[364,434],[434,394],[394,364],[428,396],[396,262],[262,428],[274,354],[354,457],[457,274],[317,316],[316,402],[402,317],[316,315],[315,403],[403,316],[315,314],[314,404],[404,315],[314,313],[313,405],[405,314],[313,421],[421,406],[406,313],[323,366],[366,361],[361,323],[292,306],[306,407],[407,292],[306,291],[291,408],[408,306],[291,287],[287,409],[409,291],[287,432],[432,410],[410,287],[427,434],[434,411],[411,427],[372,264],[264,383],[383,372],[459,309],[309,457],[457,459],[366,352],[352,401],[401,366],[1,274],[274,4],[4,1],[418,421],[421,262],[262,418],[331,294],[294,358],[358,331],[435,433],[433,367],[367,435],[392,289],[289,439],[439,392],[328,462],[462,326],[326,328],[94,2],[2,370],[370,94],[289,305],[305,455],[455,289],[339,254],[254,448],[448,339],[359,255],[255,446],[446,359],[254,253],[253,449],[449,254],[253,252],[252,450],[450,253],[252,256],[256,451],[451,252],[256,341],[341,452],[452,256],[414,413],[413,463],[463,414],[286,441],[441,414],[414,286],[286,258],[258,441],[441,286],[258,257],[257,442],[442,258],[257,259],[259,443],[443,257],[259,260],[260,444],[444,259],[260,467],[467,445],[445,260],[309,459],[459,250],[250,309],[305,289],[289,290],[290,305],[305,290],[290,460],[460,305],[401,376],[376,435],[435,401],[309,250],[250,392],[392,309],[376,411],[411,433],[433,376],[453,341],[341,464],[464,453],[357,453],[453,465],[465,357],[343,357],[357,412],[412,343],[437,343],[343,399],[399,437],[344,360],[360,440],[440,344],[420,437],[437,456],[456,420],[360,420],[420,363],[363,360],[361,401],[401,288],[288,361],[265,372],[372,353],[353,265],[390,339],[339,249],[249,390],[339,448],[448,255],[255,339]],Kt=Object.entries(Xt).map((function(t){var e=t[0];return t[1].map((function(t){return[t,e]}))})).flat(),Yt=new Map(Kt);function Qt(t){for(var e={locationData:{relativeKeypoints:[]}},n=Number.MAX_SAFE_INTEGER,r=Number.MIN_SAFE_INTEGER,a=Number.MAX_SAFE_INTEGER,s=Number.MIN_SAFE_INTEGER,i=0;i<t.length;++i){var o=t[i];n=Math.min(n,o.x),r=Math.max(r,o.x),a=Math.min(a,o.y),s=Math.max(s,o.y),e.locationData.relativeKeypoints.push({x:o.x,y:o.y})}return e.locationData.relativeBoundingBox={xMin:n,yMin:a,xMax:r,yMax:s,width:r-n,height:s-a},e}var Jt={runtime:"mediapipe",maxFaces:1,refineLandmarks:!1},Zt=function(){function t(t){var e=this;this.width=0,this.height=0,this.selfieMode=!1,this.faceMeshSolution=new w.FaceMesh({locateFile:function(e,n){return t.solutionPath?t.solutionPath.replace(/\/+$/,"")+"/"+e:n+"/"+e}}),this.faceMeshSolution.setOptions({refineLandmarks:t.refineLandmarks,selfieMode:this.selfieMode,maxNumFaces:t.maxFaces}),this.faceMeshSolution.onResults((function(t){if(e.height=t.image.height,e.width=t.image.width,e.faces=[],null!==t.multiFaceLandmarks)for(var n=t.multiFaceLandmarks,r=0;r<n.length;r++){var a=e.translateOutput(n[r]);e.faces.push({keypoints:a,box:Qt(a).locationData.relativeBoundingBox})}}))}return t.prototype.translateOutput=function(t){var e=this;return t.map((function(t,n){var r={x:t.x*e.width,y:t.y*e.height,z:t.z*e.width},a=Yt.get(n);return null!=a&&(r.name=a),r}))},t.prototype.estimateFaces=function(t,e){return Ht(this,void 0,void 0,(function(){var n,r;return Gt(this,(function(a){switch(a.label){case 0:return e&&e.flipHorizontal&&e.flipHorizontal!==this.selfieMode&&(this.selfieMode=e.flipHorizontal,this.faceMeshSolution.setOptions({selfieMode:this.selfieMode})),t instanceof S.esB?(r=ImageData.bind,[4,S.Xhn.toPixels(t)]):[3,2];case 1:return n=new(r.apply(ImageData,[void 0,a.sent(),t.shape[1],t.shape[0]])),[3,3];case 2:n=t,a.label=3;case 3:return t=n,[4,this.faceMeshSolution.send({image:t})];case 4:return a.sent(),[2,this.faces]}}))}))},t.prototype.dispose=function(){this.faceMeshSolution.close()},t.prototype.reset=function(){this.faceMeshSolution.reset(),this.width=0,this.height=0,this.faces=null,this.selfieMode=!1},t.prototype.initialize=function(){return this.faceMeshSolution.initialize()},t}();function te(t){return Ht(this,void 0,void 0,(function(){var e,n;return Gt(this,(function(r){switch(r.label){case 0:return e=function(t){if(null==t)return $t({},Jt);var e=$t({},t);return e.runtime="mediapipe",null==e.maxFaces&&(e.maxFaces=Jt.maxFaces),null==e.refineLandmarks&&(e.refineLandmarks=Jt.refineLandmarks),e}(t),[4,(n=new Zt(e)).initialize()];case 1:return r.sent(),[2,n]}}))}))}var ee="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof n.g?n.g:"undefined"!=typeof self?self:{},ne={};(function(){var t;function e(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}var n="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){return t==Array.prototype||t==Object.prototype||(t[e]=n.value),t},r=function(t){t=["object"==typeof globalThis&&globalThis,t,"object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof ee&&ee];for(var e=0;e<t.length;++e){var n=t[e];if(n&&n.Math==Math)return n}throw Error("Cannot find global object")}(this);function a(t,e){if(e)t:{var a=r;t=t.split(".");for(var s=0;s<t.length-1;s++){var i=t[s];if(!(i in a))break t;a=a[i]}(e=e(s=a[t=t[t.length-1]]))!=s&&null!=e&&n(a,t,{configurable:!0,writable:!0,value:e})}}function s(t){return(t={next:t})[Symbol.iterator]=function(){return this},t}function i(t){var n="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return n?n.call(t):{next:e(t)}}function o(t){if(!(t instanceof Array)){t=i(t);for(var e,n=[];!(e=t.next()).done;)n.push(e.value);t=n}return t}a("Symbol",(function(t){function e(t,e){this.g=t,n(this,"description",{configurable:!0,writable:!0,value:e})}if(t)return t;e.prototype.toString=function(){return this.g};var r="jscomp_symbol_"+(1e9*Math.random()>>>0)+"_",a=0;return function t(n){if(this instanceof t)throw new TypeError("Symbol is not a constructor");return new e(r+(n||"")+"_"+a++,n)}})),a("Symbol.iterator",(function(t){if(t)return t;t=Symbol("Symbol.iterator");for(var a="Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "),i=0;i<a.length;i++){var o=r[a[i]];"function"==typeof o&&"function"!=typeof o.prototype[t]&&n(o.prototype,t,{configurable:!0,writable:!0,value:function(){return s(e(this))}})}return t}));var u,p="function"==typeof Object.create?Object.create:function(t){function e(){}return e.prototype=t,new e};if("function"==typeof Object.setPrototypeOf)u=Object.setPrototypeOf;else{var c;t:{var l={};try{l.__proto__={a:!0},c=l.a;break t}catch(t){}c=!1}u=c?function(t,e){if(t.__proto__=e,t.__proto__!==e)throw new TypeError(t+" is not extensible");return t}:null}var h=u;function f(t,e){if(t.prototype=p(e.prototype),t.prototype.constructor=t,h)h(t,e);else for(var n in e)if("prototype"!=n)if(Object.defineProperties){var r=Object.getOwnPropertyDescriptor(e,n);r&&Object.defineProperty(t,n,r)}else t[n]=e[n];t.na=e.prototype}function m(){this.l=!1,this.i=null,this.h=void 0,this.g=1,this.u=this.o=0,this.j=null}function d(t){if(t.l)throw new TypeError("Generator is already running");t.l=!0}function y(t,e){t.j={da:e,ea:!0},t.g=t.o||t.u}function g(t,e,n){return t.g=n,{value:e}}function v(t){this.g=new m,this.h=t}function b(t,e,n,r){try{var a=e.call(t.g.i,n);if(!(a instanceof Object))throw new TypeError("Iterator result "+a+" is not an object");if(!a.done)return t.g.l=!1,a;var s=a.value}catch(e){return t.g.i=null,y(t.g,e),x(t)}return t.g.i=null,r.call(t.g,s),x(t)}function x(t){for(;t.g.g;)try{var e=t.h(t.g);if(e)return t.g.l=!1,{value:e.value,done:!1}}catch(e){t.g.h=void 0,y(t.g,e)}if(t.g.l=!1,t.g.j){if(e=t.g.j,t.g.j=null,e.ea)throw e.da;return{value:e.return,done:!0}}return{value:void 0,done:!0}}function N(t){this.next=function(e){return d(t.g),t.g.i?e=b(t,t.g.i.next,e,t.g.s):(t.g.s(e),e=x(t)),e},this.throw=function(e){return d(t.g),t.g.i?e=b(t,t.g.i.throw,e,t.g.s):(y(t.g,e),e=x(t)),e},this.return=function(e){return function(t,e){d(t.g);var n=t.g.i;return n?b(t,"return"in n?n.return:function(t){return{value:t,done:!0}},e,t.g.return):(t.g.return(e),x(t))}(t,e)},this[Symbol.iterator]=function(){return this}}function T(t){return function(t){function e(e){return t.next(e)}function n(e){return t.throw(e)}return new Promise((function(r,a){!function t(s){s.done?r(s.value):Promise.resolve(s.value).then(e,n).then(t,a)}(t.next())}))}(new N(new v(t)))}m.prototype.s=function(t){this.h=t},m.prototype.return=function(t){this.j={return:t},this.g=this.u},a("Promise",(function(t){function e(t){this.h=0,this.i=void 0,this.g=[],this.s=!1;var e=this.j();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.g=null}function a(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.h=function(t){if(null==this.g){this.g=[];var e=this;this.i((function(){e.l()}))}this.g.push(t)};var s=r.setTimeout;n.prototype.i=function(t){s(t,0)},n.prototype.l=function(){for(;this.g&&this.g.length;){var t=this.g;this.g=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.j(t)}}}this.g=null},n.prototype.j=function(t){this.i((function(){throw t}))},e.prototype.j=function(){function t(t){return function(r){n||(n=!0,t.call(e,r))}}var e=this,n=!1;return{resolve:t(this.D),reject:t(this.l)}},e.prototype.D=function(t){if(t===this)this.l(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.H(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.A(t):this.o(t)}},e.prototype.A=function(t){var e=void 0;try{e=t.then}catch(t){return void this.l(t)}"function"==typeof e?this.I(e,t):this.o(t)},e.prototype.l=function(t){this.u(2,t)},e.prototype.o=function(t){this.u(1,t)},e.prototype.u=function(t,e){if(0!=this.h)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.h);this.h=t,this.i=e,2===this.h&&this.G(),this.B()},e.prototype.G=function(){var t=this;s((function(){if(t.C()){var e=r.console;void 0!==e&&e.error(t.i)}}),1)},e.prototype.C=function(){if(this.s)return!1;var t=r.CustomEvent,e=r.Event,n=r.dispatchEvent;return void 0===n||("function"==typeof t?t=new t("unhandledrejection",{cancelable:!0}):"function"==typeof e?t=new e("unhandledrejection",{cancelable:!0}):(t=r.document.createEvent("CustomEvent")).initCustomEvent("unhandledrejection",!1,!0,t),t.promise=this,t.reason=this.i,n(t))},e.prototype.B=function(){if(null!=this.g){for(var t=0;t<this.g.length;++t)o.h(this.g[t]);this.g=null}};var o=new n;return e.prototype.H=function(t){var e=this.j();t.M(e.resolve,e.reject)},e.prototype.I=function(t,e){var n=this.j();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function r(t,e){return"function"==typeof t?function(e){try{a(t(e))}catch(t){s(t)}}:e}var a,s,i=new e((function(t,e){a=t,s=e}));return this.M(r(t,a),r(n,s)),i},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.M=function(t,e){function n(){switch(r.h){case 1:t(r.i);break;case 2:e(r.i);break;default:throw Error("Unexpected state: "+r.h)}}var r=this;null==this.g?o.h(n):this.g.push(n),this.s=!0},e.resolve=a,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var r=i(t),s=r.next();!s.done;s=r.next())a(s.value).M(e,n)}))},e.all=function(t){var n=i(t),r=n.next();return r.done?a([]):new e((function(t,e){function s(e){return function(n){i[e]=n,0==--o&&t(i)}}var i=[],o=0;do{i.push(void 0),o++,a(r.value).M(s(i.length-1),e),r=n.next()}while(!r.done)}))},e}));var w="function"==typeof Object.assign?Object.assign:function(t,e){for(var n=1;n<arguments.length;n++){var r=arguments[n];if(r)for(var a in r)Object.prototype.hasOwnProperty.call(r,a)&&(t[a]=r[a])}return t};a("Object.assign",(function(t){return t||w})),a("Object.is",(function(t){return t||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}})),a("Array.prototype.includes",(function(t){return t||function(t,e){var n=this;n instanceof String&&(n=String(n));var r=n.length;for(0>(e=e||0)&&(e=Math.max(e+r,0));e<r;e++){var a=n[e];if(a===t||Object.is(a,t))return!0}return!1}})),a("String.prototype.includes",(function(t){return t||function(t,e){if(null==this)throw new TypeError("The 'this' value for String.prototype.includes must not be null or undefined");if(t instanceof RegExp)throw new TypeError("First argument to String.prototype.includes must not be a regular expression");return-1!==this.indexOf(t,e||0)}})),a("Array.prototype.keys",(function(t){return t||function(){return function(t,e){t instanceof String&&(t+="");var n=0,r=!1,a={next:function(){if(!r&&n<t.length){var a=n++;return{value:e(a,t[a]),done:!1}}return r=!0,{done:!0,value:void 0}}};return a[Symbol.iterator]=function(){return a},a}(this,(function(t){return t}))}}));var S=this||self;function _(t,e){t=t.split(".");var n,r=S;t[0]in r||void 0===r.execScript||r.execScript("var "+t[0]);for(;t.length&&(n=t.shift());)t.length||void 0===e?r=r[n]&&r[n]!==Object.prototype[n]?r[n]:r[n]={}:r[n]=e}function O(){throw Error("Invalid UTF8")}function A(t,e){return e=String.fromCharCode.apply(null,e),null==t?e:t+e}var E,M,k="undefined"!=typeof TextDecoder,I="undefined"!=typeof TextEncoder,F={},D=null;function C(t){var e;void 0===e&&(e=0),R(),e=F[e];for(var n=Array(Math.floor(t.length/3)),r=e[64]||"",a=0,s=0;a<t.length-2;a+=3){var i=t[a],o=t[a+1],u=t[a+2],p=e[i>>2];i=e[(3&i)<<4|o>>4],o=e[(15&o)<<2|u>>6],u=e[63&u],n[s++]=p+i+o+u}switch(p=0,u=r,t.length-a){case 2:u=e[(15&(p=t[a+1]))<<2]||r;case 1:t=t[a],n[s]=e[t>>2]+e[(3&t)<<4|p>>4]+u+r}return n.join("")}function L(t){var e=t.length,n=3*e/4;n%3?n=Math.floor(n):-1!="=.".indexOf(t[e-1])&&(n=-1!="=.".indexOf(t[e-2])?n-2:n-1);var r=new Uint8Array(n),a=0;return function(t,e){function n(e){for(;r<t.length;){var n=t.charAt(r++),a=D[n];if(null!=a)return a;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}R();for(var r=0;;){var a=n(-1),s=n(0),i=n(64),o=n(64);if(64===o&&-1===a)break;e(a<<2|s>>4),64!=i&&(e(s<<4&240|i>>2),64!=o&&e(i<<6&192|o))}}(t,(function(t){r[a++]=t})),a!==n?r.subarray(0,a):r}function R(){if(!D){D={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++){var r=t.concat(e[n].split(""));F[n]=r;for(var a=0;a<r.length;a++){var s=r[a];void 0===D[s]&&(D[s]=a)}}}}var j,P="function"==typeof Uint8Array;function V(t){return P&&null!=t&&t instanceof Uint8Array}function B(t){if(this.L=t,null!==t&&0===t.length)throw Error("ByteString should be constructed with non-empty values")}var z="function"==typeof Uint8Array.prototype.slice,U=0;function $(t,e){return Error("Invalid wire type: "+t+" (at position "+e+")")}function H(){return Error("Failed to read varint, encoding is invalid.")}function G(t,e){e=void 0!==(e=void 0===e?{}:e).v&&e.v,this.h=null,this.g=this.i=this.j=0,this.v=e,t&&W(this,t)}function W(t,e){t.h=function(t,e){if(t.constructor===Uint8Array)return t;if(t.constructor===ArrayBuffer)return new Uint8Array(t);if(t.constructor===Array)return new Uint8Array(t);if(t.constructor===String)return L(t);if(t.constructor===B)return!e&&(e=t.L)&&e.constructor===Uint8Array?e:(e=null==(e=t.L)||V(e)?e:"string"==typeof e?L(e):null,(t=t.L=e)?new Uint8Array(t):j||(j=new Uint8Array(0)));if(t instanceof Uint8Array)return new Uint8Array(t.buffer,t.byteOffset,t.byteLength);throw Error("Type not convertible to a Uint8Array, expected a Uint8Array, an ArrayBuffer, a base64 encoded string, or Array of numbers")}(e,t.v),t.j=0,t.i=t.h.length,t.g=t.j}function X(t){if(t.g>t.i)throw Error("Tried to read past the end of the data "+t.g+" > "+t.i)}function q(t){var e=t.h,n=e[t.g],r=127&n;if(128>n)return t.g+=1,X(t),r;if(r|=(127&(n=e[t.g+1]))<<7,128>n)return t.g+=2,X(t),r;if(r|=(127&(n=e[t.g+2]))<<14,128>n)return t.g+=3,X(t),r;if(r|=(127&(n=e[t.g+3]))<<21,128>n)return t.g+=4,X(t),r;if(n=e[t.g+4],t.g+=5,r|=(15&n)<<28,128>n)return X(t),r;if(128<=e[t.g++]&&128<=e[t.g++]&&128<=e[t.g++]&&128<=e[t.g++]&&128<=e[t.g++])throw H();return X(t),r}G.prototype.reset=function(){this.g=this.j};var K=[];function Y(){this.g=[]}function Q(t,e){for(;127<e;)t.g.push(127&e|128),e>>>=7;t.g.push(e)}function J(t){var e={},n=void 0!==e.W&&e.W;this.l={v:void 0!==e.v&&e.v},this.W=n,e=this.l,K.length?(n=K.pop(),e&&(n.v=e.v),t&&W(n,t),t=n):t=new G(t,e),this.g=t,this.j=this.g.g,this.h=this.i=-1}function Z(t){var e=t.g;if(e.g==e.i)return!1;t.j=t.g.g;var n=q(t.g)>>>0;if(e=n>>>3,!(0<=(n&=7)&&5>=n))throw $(n,t.j);if(1>e)throw Error("Invalid field number: "+e+" (at position "+t.j+")");return t.i=e,t.h=n,!0}function tt(t){switch(t.h){case 0:if(0!=t.h)tt(t);else t:{for(var e=(t=t.g).g,n=e+10;e<n;)if(0==(128&t.h[e++])){t.g=e,X(t);break t}throw H()}break;case 1:(t=t.g).g+=8,X(t);break;case 2:2!=t.h?tt(t):(e=q(t.g)>>>0,(t=t.g).g+=e,X(t));break;case 5:(t=t.g).g+=4,X(t);break;case 3:for(e=t.i;;){if(!Z(t))throw Error("Unmatched start-group tag: stream EOF");if(4==t.h){if(t.i!=e)throw Error("Unmatched end-group tag");break}tt(t)}break;default:throw $(t.h,t.j)}}Y.prototype.length=function(){return this.g.length},Y.prototype.end=function(){var t=this.g;return this.g=[],t},J.prototype.reset=function(){this.g.reset(),this.j=this.g.g,this.h=this.i=-1};var et=[];function nt(){this.i=[],this.h=0,this.g=new Y}function rt(t,e){0!==e.length&&(t.i.push(e),t.h+=e.length)}var at="function"==typeof Symbol&&"symbol"==typeof Symbol()?Symbol(void 0):void 0;function st(t,e){Object.isFrozen(t)||(at?t[at]|=e:void 0!==t.N?t.N|=e:Object.defineProperties(t,{N:{value:e,configurable:!0,writable:!0,enumerable:!1}}))}function it(t){var e;return null==(e=at?t[at]:t.N)?0:e}function ot(t){return st(t,1),t}function ut(t){return!!Array.isArray(t)&&!!(2&it(t))}function pt(t){if(!Array.isArray(t))throw Error("cannot mark non-array as immutable");st(t,2)}function ct(t){return null!==t&&"object"==typeof t&&!Array.isArray(t)&&t.constructor===Object}var lt=Object.freeze(ot([]));function ht(t){if(ut(t.m))throw Error("Cannot mutate an immutable Message")}var ft,mt="undefined"!=typeof Symbol&&void 0!==Symbol.hasInstance;function dt(t){return{value:t,configurable:!1,writable:!1,enumerable:!1}}function yt(t,e,n){return-1===e?null:e>=t.i?t.g?t.g[e]:void 0:void 0!==n&&n&&t.g&&null!=(n=t.g[e])?n:t.m[e+t.h]}function gt(t,e,n,r){r=void 0!==r&&r,ht(t),e<t.i&&!r?t.m[e+t.h]=n:(t.g||(t.g=t.m[t.i+t.h]={}))[e]=n}function vt(t,e,n,r){n=void 0===n||n;var a=yt(t,e,r=void 0!==r&&r);return null==a&&(a=lt),ut(t.m)?n&&(pt(a),Object.freeze(a)):(a===lt||ut(a))&&gt(t,e,a=ot(a.slice()),r),a}function bt(t,e,n){return null==(t=null==(t=yt(t,e))?t:+t)?void 0===n?0:n:t}function xt(t,e,n,r){t.j||(t.j={});var a=ut(t.m),s=t.j[n];if(!s){r=vt(t,n,!0,void 0!==r&&r),s=[],a=a||ut(r);for(var i=0;i<r.length;i++)s[i]=new e(r[i]),a&&pt(s[i].m);a&&(pt(s),Object.freeze(s)),t.j[n]=s}return s}function Nt(t,e,n,r,a){var s=void 0!==s&&s;return ht(t),s=xt(t,n,e,s),n=r||new n,t=vt(t,e),null!=a?(s.splice(a,0,n),t.splice(a,0,n.m)):(s.push(n),t.push(n.m)),n}function Tt(t,e){return null==(t=yt(t,e))?0:t}function wt(t,e){return null==(t=yt(t,e))?"":t}function St(t){return Ot(t,void 0===At?Et:At)}function _t(t,e){if(null!=t){if(Array.isArray(t))t=Ot(t,e);else if(ct(t)){var n,r={};for(n in t)r[n]=_t(t[n],e);t=r}else t=e(t);return t}}function Ot(t,e){for(var n=t.slice(),r=0;r<n.length;r++)n[r]=_t(n[r],e);return Array.isArray(t)&&1&it(t)&&ot(n),n}function At(t){return t&&"object"==typeof t&&t.toJSON?t.toJSON():(t=function(t){switch(typeof t){case"number":return isFinite(t)?t:String(t);case"object":if(t&&!Array.isArray(t)){if(V(t))return C(t);if(t instanceof B){var e=t.L;return e=null==e||"string"==typeof e?e:P&&e instanceof Uint8Array?C(e):null,(t.L=e)||""}}}return t}(t),Array.isArray(t)?St(t):t)}function Et(t){return V(t)?new Uint8Array(t):t}function Mt(t,e,n){t||(t=ft),ft=null;var r=this.constructor.h;if(t||(t=r?[r]:[]),this.h=(r?0:-1)-(this.constructor.g||0),this.j=void 0,this.m=t,t=(r=this.m.length)-1,r&&ct(r=this.m[t])?(this.i=t-this.h,this.g=r):void 0!==e&&-1<e?(this.i=Math.max(e,t+1-this.h),this.g=void 0):this.i=Number.MAX_VALUE,n)for(e=0;e<n.length;e++)if((t=n[e])<this.i)t+=this.h,(r=this.m[t])?Array.isArray(r)&&ot(r):this.m[t]=lt;else{var a=(r=this.g||(this.g=this.m[this.i+this.h]={}))[t];a?Array.isArray(a)&&ot(a):r[t]=lt}}function kt(){Mt.apply(this,arguments)}if(Mt.prototype.toJSON=function(){return St(this.m)},Mt.prototype.toString=function(){return this.m.toString()},f(kt,Mt),mt){var It={};Object.defineProperties(kt,(It[Symbol.hasInstance]=dt((function(){throw Error("Cannot perform instanceof checks for MutableMessage")})),It))}function Ft(t,e,n){if(n){var r,a={};for(r in n){var s=n[r],i=s.ha;i||(a.F=s.la||s.fa.P,s.aa?(a.U=Vt(s.aa),i=function(t){return function(e,n,r){return t.F(e,n,r,t.U)}}(a)):s.ca?(a.T=Bt(s.X.g,s.ca),i=function(t){return function(e,n,r){return t.F(e,n,r,t.T)}}(a)):i=a.F,s.ha=i),i(e,t,s.X),a={F:a.F,U:a.U,T:a.T}}}!function(t,e){if(e=e.ba){rt(t,t.g.end());for(var n=0;n<e.length;n++)rt(t,e[n])}}(e,t)}var Dt=Symbol();function Ct(t,e,n){return t[Dt]||(t[Dt]=function(t,r){return e(t,r,n)})}function Lt(t){var e=t[Dt];if(!e){var n=Jt(t);e=function(t,e){return Zt(t,e,n)},t[Dt]=e}return e}function Rt(t){var e=function(t){var e=t.aa;return e?Lt(e):(e=t.ka)?Ct(t.X.g,e,t.ca):void 0}(t),n=t.X,r=t.fa.O;return e?function(t,a){return r(t,a,n,e)}:function(t,e){return r(t,e,n)}}function jt(t,e,n,r,a,s){var i=0;for((t=t()).length&&"number"!=typeof t[0]&&(n(e,t[0]),i++);i<t.length;){n=t[i++];for(var o=i+1;o<t.length&&"number"!=typeof t[o];)o++;var u=t[i++];switch(o-=i){case 0:r(e,n,u);break;case 1:r(e,n,u,t[i++]);break;case 2:a(e,n,u,t[i++],t[i++]);break;case 3:o=t[i++];var p=t[i++],c=t[i++];Array.isArray(c)?a(e,n,u,o,p,c):s(e,n,u,o,p,c);break;case 4:s(e,n,u,t[i++],t[i++],t[i++],t[i++]);break;default:throw Error("unexpected number of binary field arguments: "+o)}}return e}var Pt=Symbol();function Vt(t){var e=t[Pt];if(!e){var n=Wt(t);e=function(t,e){return ne(t,e,n)},t[Pt]=e}return e}function Bt(t,e){var n=t[Pt];return n||(n=function(t,n){return Ft(t,n,e)},t[Pt]=n),n}var zt=Symbol();function Ut(t,e){t.push(e)}function $t(t,e,n){t.push(e,n.P)}function Ht(t,e,n,r,a){var s=Vt(a),i=n.P;t.push(e,(function(t,e,n){return i(t,e,n,r,s)}))}function Gt(t,e,n,r,a,s){var i=Bt(r,s),o=n.P;t.push(e,(function(t,e,n){return o(t,e,n,r,i)}))}function Wt(t){return t[zt]||jt(t,t[zt]=[],Ut,$t,Ht,Gt)}var Xt=Symbol();function qt(t,e){t[0]=e}function Kt(t,e,n,r){var a=n.O;t[e]=r?function(t,e,n){return a(t,e,n,r)}:a}function Yt(t,e,n,r,a,s){var i=n.O,o=Lt(a);t[e]=function(t,e,n){return i(t,e,n,r,o,s)}}function Qt(t,e,n,r,a,s,i){var o=n.O,u=Ct(r,a,s);t[e]=function(t,e,n){return o(t,e,n,r,u,i)}}function Jt(t){return t[Xt]||jt(t,t[Xt]={},qt,Kt,Yt,Qt)}function Zt(t,e,n){for(;Z(e)&&4!=e.h;){var r=e.i,a=n[r];if(!a){var s=n[0];s&&(s=s[r])&&(a=n[r]=Rt(s))}if(!(a&&a(e,t,r)||(a=e,r=t,s=a.j,tt(a),a.W))){var i=a.g.h;a=s===(a=a.g.g)?j||(j=new Uint8Array(0)):z?i.slice(s,a):new Uint8Array(i.subarray(s,a)),(s=r.ba)?s.push(a):r.ba=[a]}}return t}function te(t,e,n){if(et.length){var r=et.pop();t&&(W(r.g,t),r.i=-1,r.h=-1),t=r}else t=new J(t);try{return Zt(new e,t,Jt(n))}finally{(e=t.g).h=null,e.j=0,e.i=0,e.g=0,e.v=!1,t.i=-1,t.h=-1,100>et.length&&et.push(t)}}function ne(t,e,n){for(var r=n.length,a=1==r%2,s=a?1:0;s<r;s+=2)(0,n[s+1])(e,t,n[s]);Ft(t,e,a?n[0]:void 0)}function re(t,e){var n=new nt;ne(t,n,Wt(e)),rt(n,n.g.end()),t=new Uint8Array(n.h);for(var r=(e=n.i).length,a=0,s=0;s<r;s++){var i=e[s];t.set(i,a),a+=i.length}return n.i=[t],t}function ae(t,e){return{O:t,P:e}}var se=ae((function(t,e,n){if(5!==t.h)return!1;var r=(t=t.g).h[t.g],a=t.h[t.g+1],s=t.h[t.g+2],i=t.h[t.g+3];return t.g+=4,X(t),t=2*((a=(r<<0|a<<8|s<<16|i<<24)>>>0)>>31)+1,r=a>>>23&255,a&=8388607,gt(e,n,255==r?a?NaN:1/0*t:0==r?t*Math.pow(2,-149)*a:t*Math.pow(2,r-150)*(a+Math.pow(2,23))),!0}),(function(t,e,n){if(null!=(e=yt(e,n))){Q(t.g,8*n+5),t=t.g;var r=e;0===(r=(n=0>r?1:0)?-r:r)?U=0<1/r?0:2147483648:isNaN(r)?U=2147483647:34028234663852886e22<r?U=(n<<31|2139095040)>>>0:11754943508222875e-54>r?(r=Math.round(r/Math.pow(2,-149)),U=(n<<31|r)>>>0):(e=Math.floor(Math.log(r)/Math.LN2),r*=Math.pow(2,-e),16777216<=(r=Math.round(8388608*r))&&++e,U=(n<<31|e+127<<23|8388607&r)>>>0),n=U,t.g.push(n>>>0&255),t.g.push(n>>>8&255),t.g.push(n>>>16&255),t.g.push(n>>>24&255)}})),ie=ae((function(t,e,n){if(0!==t.h)return!1;for(var r=t.g,a=128,s=0,i=t=0;4>i&&128<=a;i++)a=r.h[r.g++],X(r),s|=(127&a)<<7*i;if(128<=a&&(a=r.h[r.g++],X(r),s|=(127&a)<<28,t|=(127&a)>>4),128<=a)for(i=0;5>i&&128<=a;i++)a=r.h[r.g++],X(r),t|=(127&a)<<7*i+3;if(!(128>a))throw H();return r=s>>>0,(t=2147483648&(a=t>>>0))&&(a=~a>>>0,0==(r=1+~r>>>0)&&(a=a+1>>>0)),r=4294967296*a+(r>>>0),gt(e,n,t?-r:r),!0}),(function(t,e,n){if(null!=(e=yt(e,n))&&null!=e){Q(t.g,8*n),t=t.g;var r=e;for(n=0>r,e=(r=Math.abs(r))>>>0,r=Math.floor((r-e)/4294967296),r>>>=0,n&&(r=~r>>>0,4294967295<(e=1+(~e>>>0))&&(e=0,4294967295<++r&&(r=0))),n=U=e,e=r;0<e||127<n;)t.g.push(127&n|128),n=(n>>>7|e<<25)>>>0,e>>>=7;t.g.push(n)}})),oe=ae((function(t,e,n){return 0===t.h&&(gt(e,n,q(t.g)),!0)}),(function(t,e,n){if(null!=(e=yt(e,n))&&null!=e)if(Q(t.g,8*n),t=t.g,0<=(n=e))Q(t,n);else{for(e=0;9>e;e++)t.g.push(127&n|128),n>>=7;t.g.push(1)}})),ue=ae((function(t,e,n){if(2!==t.h)return!1;var r,a=q(t.g)>>>0,s=(t=t.g).g;if(t.g+=a,X(t),t=t.h,k)(r=E)||(r=E=new TextDecoder("utf-8",{fatal:!0})),r=r.decode(t.subarray(s,s+a));else{a=s+a;for(var i,o,u,p=[],c=null;s<a;)128>(i=t[s++])?p.push(i):224>i?s>=a?O():(o=t[s++],194>i||128!=(192&o)?(s--,O()):p.push((31&i)<<6|63&o)):240>i?s>=a-1?O():128!=(192&(o=t[s++]))||224===i&&160>o||237===i&&160<=o||128!=(192&(r=t[s++]))?(s--,O()):p.push((15&i)<<12|(63&o)<<6|63&r):244>=i?s>=a-2?O():128!=(192&(o=t[s++]))||0!=o-144+(i<<28)>>30||128!=(192&(r=t[s++]))||128!=(192&(u=t[s++]))?(s--,O()):(i=(7&i)<<18|(63&o)<<12|(63&r)<<6|63&u,i-=65536,p.push(55296+(i>>10&1023),56320+(1023&i))):O(),8192<=p.length&&(c=A(c,p),p.length=0);r=A(c,p)}return gt(e,n,r),!0}),(function(t,e,n){if(null!=(e=yt(e,n))){var r=!1;if(r=void 0!==r&&r,I){if(r&&/(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])/.test(e))throw Error("Found an unpaired surrogate");e=(M||(M=new TextEncoder)).encode(e)}else{for(var a=0,s=new Uint8Array(3*e.length),i=0;i<e.length;i++){var o=e.charCodeAt(i);if(128>o)s[a++]=o;else{if(2048>o)s[a++]=o>>6|192;else{if(55296<=o&&57343>=o){if(56319>=o&&i<e.length){var u=e.charCodeAt(++i);if(56320<=u&&57343>=u){o=1024*(o-55296)+u-56320+65536,s[a++]=o>>18|240,s[a++]=o>>12&63|128,s[a++]=o>>6&63|128,s[a++]=63&o|128;continue}i--}if(r)throw Error("Found an unpaired surrogate");o=65533}s[a++]=o>>12|224,s[a++]=o>>6&63|128}s[a++]=63&o|128}}e=s.subarray(0,a)}Q(t.g,8*n+2),Q(t.g,e.length),rt(t,t.g.end()),rt(t,e)}})),pe=ae((function(t,e,n,r,a){if(2!==t.h)return!1;e=Nt(e,n,r),n=t.g.i,r=q(t.g)>>>0;var s=t.g.g+r,i=s-n;if(0>=i&&(t.g.i=s,a(e,t),i=s-t.g.g),i)throw Error("Message parsing ended unexpectedly. Expected to read "+r+" bytes, instead read "+(r-i)+" bytes, either the data ended unexpectedly or the message misreported its own length");return t.g.g=s,t.g.i=n,!0}),(function(t,e,n,r,a){if(null!=(e=xt(e,r,n)))for(r=0;r<e.length;r++){var s=t;Q(s.g,8*n+2);var i=s.g.end();rt(s,i),i.push(s.h),s=i,a(e[r],t),i=t;var o=s.pop();for(o=i.h+i.g.length()-o;127<o;)s.push(127&o|128),o>>>=7,i.h++;s.push(o),i.h++}}));function ce(){kt.apply(this,arguments)}if(f(ce,kt),mt){var le={};Object.defineProperties(ce,(le[Symbol.hasInstance]=dt(Object[Symbol.hasInstance]),le))}function he(t){ce.call(this,t)}function fe(){return[1,oe,2,se,3,ue,4,ue]}function me(t){ce.call(this,t,-1,ye)}function de(){return[1,pe,he,fe]}f(he,ce),f(me,ce),me.prototype.addClassification=function(t,e){return Nt(this,1,he,t,e),this};var ye=[1];function ge(t){ce.call(this,t)}function ve(){return[1,se,2,se,3,se,4,se,5,se]}function be(t){ce.call(this,t,-1,Ne)}function xe(){return[1,pe,ge,ve]}f(ge,ce),f(be,ce);var Ne=[1];function Te(t){ce.call(this,t)}function we(){return[1,se,2,se,3,se,4,se,5,se,6,ie]}f(Te,ce);var Se=[[61,146],[146,91],[91,181],[181,84],[84,17],[17,314],[314,405],[405,321],[321,375],[375,291],[61,185],[185,40],[40,39],[39,37],[37,0],[0,267],[267,269],[269,270],[270,409],[409,291],[78,95],[95,88],[88,178],[178,87],[87,14],[14,317],[317,402],[402,318],[318,324],[324,308],[78,191],[191,80],[80,81],[81,82],[82,13],[13,312],[312,311],[311,310],[310,415],[415,308]],_e=[[263,249],[249,390],[390,373],[373,374],[374,380],[380,381],[381,382],[382,362],[263,466],[466,388],[388,387],[387,386],[386,385],[385,384],[384,398],[398,362]],Oe=[[276,283],[283,282],[282,295],[295,285],[300,293],[293,334],[334,296],[296,336]],Ae=[[33,7],[7,163],[163,144],[144,145],[145,153],[153,154],[154,155],[155,133],[33,246],[246,161],[161,160],[160,159],[159,158],[158,157],[157,173],[173,133]],Ee=[[46,53],[53,52],[52,65],[65,55],[70,63],[63,105],[105,66],[66,107]],Me=[[10,338],[338,297],[297,332],[332,284],[284,251],[251,389],[389,356],[356,454],[454,323],[323,361],[361,288],[288,397],[397,365],[365,379],[379,378],[378,400],[400,377],[377,152],[152,148],[148,176],[176,149],[149,150],[150,136],[136,172],[172,58],[58,132],[132,93],[93,234],[234,127],[127,162],[162,21],[21,54],[54,103],[103,67],[67,109],[109,10]],ke=[].concat(o(Se),o(_e),o(Oe),o(Ae),o(Ee),o(Me));function Ie(t,e,n){if(n=t.createShader(0===n?t.VERTEX_SHADER:t.FRAGMENT_SHADER),t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw Error("Could not compile WebGL shader.\n\n"+t.getShaderInfoLog(n));return n}function Fe(t){return xt(t,he,1).map((function(t){return{index:Tt(t,1),ga:bt(t,2),label:null!=yt(t,3)?wt(t,3):void 0,displayName:null!=yt(t,4)?wt(t,4):void 0}}))}function De(t){return{x:bt(t,1),y:bt(t,2),z:bt(t,3),visibility:null!=yt(t,4)?bt(t,4):void 0}}function Ce(t,e){this.h=t,this.g=e,this.l=0}function Le(t,e,n){return function(t,e){var n=t.g;if(void 0===t.o){var r=Ie(n,"\n  attribute vec2 aVertex;\n  attribute vec2 aTex;\n  varying vec2 vTex;\n  void main(void) {\n    gl_Position = vec4(aVertex, 0.0, 1.0);\n    vTex = aTex;\n  }",0),a=Ie(n,"\n  precision mediump float;\n  varying vec2 vTex;\n  uniform sampler2D sampler0;\n  void main(){\n    gl_FragColor = texture2D(sampler0, vTex);\n  }",1),s=n.createProgram();if(n.attachShader(s,r),n.attachShader(s,a),n.linkProgram(s),!n.getProgramParameter(s,n.LINK_STATUS))throw Error("Could not compile WebGL program.\n\n"+n.getProgramInfoLog(s));r=t.o=s,n.useProgram(r),a=n.getUniformLocation(r,"sampler0"),t.j={K:n.getAttribLocation(r,"aVertex"),J:n.getAttribLocation(r,"aTex"),ma:a},t.u=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,t.u),n.enableVertexAttribArray(t.j.K),n.vertexAttribPointer(t.j.K,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),t.s=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,t.s),n.enableVertexAttribArray(t.j.J),n.vertexAttribPointer(t.j.J,2,n.FLOAT,!1,0,0),n.bufferData(n.ARRAY_BUFFER,new Float32Array([0,1,0,0,1,0,1,1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,null),n.uniform1i(a,0)}r=t.j,n.useProgram(t.o),n.canvas.width=e.width,n.canvas.height=e.height,n.viewport(0,0,e.width,e.height),n.activeTexture(n.TEXTURE0),t.h.bindTexture2d(e.glName),n.enableVertexAttribArray(r.K),n.bindBuffer(n.ARRAY_BUFFER,t.u),n.vertexAttribPointer(r.K,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(r.J),n.bindBuffer(n.ARRAY_BUFFER,t.s),n.vertexAttribPointer(r.J,2,n.FLOAT,!1,0,0),n.bindFramebuffer(n.DRAW_FRAMEBUFFER?n.DRAW_FRAMEBUFFER:n.FRAMEBUFFER,null),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),n.colorMask(!0,!0,!0,!0),n.drawArrays(n.TRIANGLE_FAN,0,4),n.disableVertexAttribArray(r.K),n.disableVertexAttribArray(r.J),n.bindBuffer(n.ARRAY_BUFFER,null),t.h.bindTexture2d(0)}(t,e),"function"==typeof t.g.canvas.transferToImageBitmap?Promise.resolve(t.g.canvas.transferToImageBitmap()):n?Promise.resolve(t.g.canvas):"function"==typeof createImageBitmap?createImageBitmap(t.g.canvas):(void 0===t.i&&(t.i=document.createElement("canvas")),new Promise((function(e){t.i.height=t.g.canvas.height,t.i.width=t.g.canvas.width,t.i.getContext("2d",{}).drawImage(t.g.canvas,0,0,t.g.canvas.width,t.g.canvas.height),e(t.i)})))}function Re(t){this.g=t}var je=new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]);function Pe(t,e){return e+t}function Ve(t,e){window[t]=e}function Be(t){if(this.g=t,this.listeners={},this.j={},this.H={},this.o={},this.u={},this.I=this.s=this.Z=!0,this.D=Promise.resolve(),this.Y="",this.C={},this.locateFile=t&&t.locateFile||Pe,"object"==typeof window)var e=window.location.pathname.toString().substring(0,window.location.pathname.toString().lastIndexOf("/"))+"/";else{if("undefined"==typeof location)throw Error("solutions can only be loaded on a web page or in a web worker");e=location.pathname.toString().substring(0,location.pathname.toString().lastIndexOf("/"))+"/"}if(this.$=e,t.options)for(var n=(e=i(Object.keys(t.options))).next();!n.done;n=e.next()){n=n.value;var r=t.options[n].default;void 0!==r&&(this.j[n]="function"==typeof r?r():r)}}function ze(t,e){var n,r;return T((function(a){return e in t.H?a.return(t.H[e]):(n=t.locateFile(e,""),r=fetch(n).then((function(t){return t.arrayBuffer()})),t.H[e]=r,a.return(r))}))}function Ue(t,e,n){var r,a,s,o,u,p,c,l,h,f,m,d,y,v;return T((function(b){switch(b.g){case 1:if(!n)return b.return(e);for(r={},a=0,s=i(Object.keys(n)),o=s.next();!o.done;o=s.next())u=o.value,"string"!=typeof(p=n[u])&&"texture"===p.type&&void 0!==e[p.stream]&&++a;1<a&&(t.I=!1),c=i(Object.keys(n)),o=c.next();case 2:if(o.done){b.g=4;break}if(l=o.value,"string"==typeof(h=n[l]))return y=r,v=l,g(b,function(t,e,n){var r;return T((function(a){return"number"==typeof n||n instanceof Uint8Array||n instanceof t.h.Uint8BlobList?a.return(n):n instanceof t.h.Texture2dDataOut?((r=t.u[e])||(r=new Ce(t.h,t.G),t.u[e]=r),a.return(Le(r,n,t.I))):a.return(void 0)}))}(t,l,e[h]),14);if(f=e[h.stream],"detection_list"===h.type){if(f){for(var x=f.getRectList(),N=f.getLandmarksList(),w=f.getClassificationsList(),S=[],_=0;_<x.size();++_){var O=te(x.get(_),Te,we);O={boundingBox:{xCenter:bt(O,1),yCenter:bt(O,2),height:bt(O,3),width:bt(O,4),rotation:bt(O,5,0),rectId:Tt(O,6)},landmarks:xt(te(N.get(_),be,xe),ge,1).map(De),V:Fe(te(w.get(_),me,de))},S.push(O)}x=S}else x=[];r[l]=x,b.g=7;break}if("proto_list"===h.type){if(f){for(x=Array(f.size()),N=0;N<f.size();N++)x[N]=f.get(N);f.delete()}else x=[];r[l]=x,b.g=7;break}if(void 0===f){b.g=3;break}if("float_list"===h.type){r[l]=f,b.g=7;break}if("proto"===h.type){r[l]=f,b.g=7;break}if("texture"!==h.type)throw Error("Unknown output config type: '"+h.type+"'");return(m=t.u[l])||(m=new Ce(t.h,t.G),t.u[l]=m),g(b,Le(m,f,t.I),13);case 13:d=b.h,r[l]=d;case 7:h.transform&&r[l]&&(r[l]=h.transform(r[l])),b.g=3;break;case 14:y[v]=b.h;case 3:o=c.next(),b.g=2;break;case 4:return b.return(r)}}))}function $e(t,e){for(var n=e.name||"$",r=[].concat(o(e.wants)),a=new t.h.StringList,s=i(e.wants),u=s.next();!u.done;u=s.next())a.push_back(u.value);s=t.h.PacketListener.implement({onResults:function(a){for(var s={},i=0;i<e.wants.length;++i)s[r[i]]=a.get(i);var o=t.listeners[n];o&&(t.D=Ue(t,s,e.outs).then((function(n){n=o(n);for(var a=0;a<e.wants.length;++a){var i=s[r[a]];"object"==typeof i&&i.hasOwnProperty&&i.hasOwnProperty("delete")&&i.delete()}n&&(t.D=n)})))}}),t.i.attachMultiListener(a,s),a.delete()}function He(t){var e=this;t=t||{};var n={url:"face_detection_short.binarypb"},r={type:1,graphOptionXref:{calculatorType:"TensorsToDetectionsCalculator",calculatorName:"facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator",fieldName:"min_score_thresh"}};this.g=new Be({locateFile:t.locateFile,files:[{data:!0,url:"face_detection_short.binarypb"},{data:!0,url:"face_detection_short_range.tflite"},{simd:!0,url:"face_detection_solution_simd_wasm_bin.js"},{simd:!1,url:"face_detection_solution_wasm_bin.js"}],graph:n,listeners:[{wants:["detections","image_transformed"],outs:{image:"image_transformed",detections:{type:"detection_list",stream:"detections"}}}],inputs:{image:{type:"video",stream:"input_frames_gpu"}},options:{useCpuInference:{type:0,graphOptionXref:{calculatorType:"InferenceCalculator",fieldName:"use_cpu_inference"},default:"object"==typeof window&&void 0!==window.navigator&&("iPad Simulator;iPhone Simulator;iPod Simulator;iPad;iPhone;iPod".split(";").includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document)},selfieMode:{type:0,graphOptionXref:{calculatorType:"GlScalerCalculator",calculatorIndex:1,fieldName:"flip_horizontal"}},model:{type:0,onChange:function(t){var a,s,o,u,p;return T((function(c){switch(c.g){case 1:a=i("short"===t?["face_detection_short_range.tflite"]:["face_detection_full_range_sparse.tflite"]),s=a.next();case 2:if(s.done){c.g=4;break}return o=s.value,u="third_party/mediapipe/modules/face_detection/"+o,g(c,ze(e.g,o),5);case 5:p=c.h,e.g.overrideFile(u,p),s=a.next(),c.g=2;break;case 4:return n.url="short"===t?"face_detection_short.binarypb":"face_detection_full.binarypb",r.graphOptionXref.calculatorName="short"===t?"facedetectionshortrangegpu__facedetectionshortrangecommon__TensorsToDetectionsCalculator":"facedetectionfullrangegpu__facedetectionfullrangecommon__TensorsToDetectionsCalculator",c.return(!0)}}))}},minDetectionConfidence:r}})}(t=Be.prototype).close=function(){return this.i&&this.i.delete(),Promise.resolve()},t.reset=function(){var t=this;return T((function(e){t.i&&(t.i.reset(),t.o={},t.u={}),e.g=0}))},t.setOptions=function(t,e){var n=this;if(e=e||this.g.options){for(var r=[],a=[],s={},o=i(Object.keys(t)),u=o.next();!u.done;s={R:s.R,S:s.S},u=o.next()){var p=u.value;p in this.j&&this.j[p]===t[p]||(this.j[p]=t[p],void 0!==(u=e[p])&&(u.onChange&&(s.R=u.onChange,s.S=t[p],r.push(function(t){return function(){return T((function(e){if(1==e.g)return g(e,t.R(t.S),2);!0===e.h&&(n.s=!0),e.g=0}))}}(s))),u.graphOptionXref&&(p={valueNumber:1===u.type?t[p]:0,valueBoolean:0===u.type&&t[p],valueString:2===u.type?t[p]:""},u=Object.assign(Object.assign(Object.assign({},{calculatorName:"",calculatorIndex:0}),u.graphOptionXref),p),a.push(u))))}0===r.length&&0===a.length||(this.s=!0,this.B=(void 0===this.B?[]:this.B).concat(a),this.A=(void 0===this.A?[]:this.A).concat(r))}},t.initialize=function(){var t=this;return T((function(e){return 1==e.g?g(e,function(t){var e,n,r,a,s,i,u,p,c,l,h;return T((function(f){switch(f.g){case 1:return t.Z?(e=void 0===t.g.files?[]:"function"==typeof t.g.files?t.g.files(t.j):t.g.files,g(f,T((function(t){switch(t.g){case 1:return t.o=2,g(t,WebAssembly.instantiate(je),4);case 4:t.g=3,t.o=0;break;case 2:return t.o=0,t.j=null,t.return(!1);case 3:return t.return(!0)}})),2)):f.return();case 2:if(n=f.h,"object"==typeof window)return Ve("createMediapipeSolutionsWasm",{locateFile:t.locateFile}),Ve("createMediapipeSolutionsPackedAssets",{locateFile:t.locateFile}),i=e.filter((function(t){return void 0!==t.data})),u=e.filter((function(t){return void 0===t.data})),p=Promise.all(i.map((function(e){var n=ze(t,e.url);if(void 0!==e.path){var r=e.path;n=n.then((function(e){return t.overrideFile(r,e),Promise.resolve(e)}))}return n}))),c=Promise.all(u.map((function(e){return void 0===e.simd||e.simd&&n||!e.simd&&!n?function(t){var e=document.createElement("script");return e.setAttribute("src",t),e.setAttribute("crossorigin","anonymous"),new Promise((function(t){e.addEventListener("load",(function(){t()}),!1),e.addEventListener("error",(function(){t()}),!1),document.body.appendChild(e)}))}(t.locateFile(e.url,t.$)):Promise.resolve()}))).then((function(){var e,n,r;return T((function(a){if(1==a.g)return e=window.createMediapipeSolutionsWasm,n=window.createMediapipeSolutionsPackedAssets,r=t,g(a,e(n),2);r.h=a.h,a.g=0}))})),l=T((function(e){return t.g.graph&&t.g.graph.url?e=g(e,ze(t,t.g.graph.url),0):(e.g=0,e=void 0),e})),g(f,Promise.all([c,p,l]),7);if("function"!=typeof importScripts)throw Error("solutions can only be loaded on a web page or in a web worker");return r=e.filter((function(t){return void 0===t.simd||t.simd&&n||!t.simd&&!n})).map((function(e){return t.locateFile(e.url,t.$)})),importScripts.apply(null,o(r)),a=t,g(f,createMediapipeSolutionsWasm(Module),6);case 6:a.h=f.h,t.l=new OffscreenCanvas(1,1),t.h.canvas=t.l,s=t.h.GL.createContext(t.l,{antialias:!1,alpha:!1,ja:"undefined"!=typeof WebGL2RenderingContext?2:1}),t.h.GL.makeContextCurrent(s),f.g=4;break;case 7:if(t.l=document.createElement("canvas"),!(h=t.l.getContext("webgl2",{}))&&!(h=t.l.getContext("webgl",{})))return alert("Failed to create WebGL canvas context when passing video frame."),f.return();t.G=h,t.h.canvas=t.l,t.h.createContext(t.l,!0,!0,{});case 4:t.i=new t.h.SolutionWasm,t.Z=!1,f.g=0}}))}(t),2):3!=e.g?g(e,function(t){var e,n,r,a,s,o,u,p;return T((function(c){if(1==c.g)return t.g.graph&&t.g.graph.url&&t.Y===t.g.graph.url?c.return():(t.s=!0,t.g.graph&&t.g.graph.url?(t.Y=t.g.graph.url,g(c,ze(t,t.g.graph.url),3)):void(c.g=2));for(2!=c.g&&(e=c.h,t.i.loadGraph(e)),n=i(Object.keys(t.C)),r=n.next();!r.done;r=n.next())a=r.value,t.i.overrideFile(a,t.C[a]);if(t.C={},t.g.listeners)for(s=i(t.g.listeners),o=s.next();!o.done;o=s.next())u=o.value,$e(t,u);p=t.j,t.j={},t.setOptions(p),c.g=0}))}(t),3):g(e,function(t){var e,n,r,a,s,o;return T((function(u){switch(u.g){case 1:if(!t.s)return u.return();if(!t.A){u.g=2;break}e=i(t.A),n=e.next();case 3:if(n.done){u.g=5;break}return g(u,(0,n.value)(),4);case 4:n=e.next(),u.g=3;break;case 5:t.A=void 0;case 2:if(t.B){for(r=new t.h.GraphOptionChangeRequestList,a=i(t.B),s=a.next();!s.done;s=a.next())o=s.value,r.push_back(o);t.i.changeOptions(r),r.delete(),t.B=void 0}t.s=!1,u.g=0}}))}(t),0)}))},t.overrideFile=function(t,e){this.i?this.i.overrideFile(t,e):this.C[t]=e},t.clearOverriddenFiles=function(){this.C={},this.i&&this.i.clearOverriddenFiles()},t.send=function(t,e){var n,r,a,s,o,u,p,c,l,h=this;return T((function(f){switch(f.g){case 1:return h.g.inputs?(n=1e3*(null==e?performance.now():e),g(f,h.D,2)):f.return();case 2:return g(f,h.initialize(),3);case 3:for(r=new h.h.PacketDataList,a=i(Object.keys(t)),s=a.next();!s.done;s=a.next())if(o=s.value,u=h.g.inputs[o]){t:{var m=t[o];switch(u.type){case"video":var d=h.o[u.stream];if(d||(d=new Ce(h.h,h.G),h.o[u.stream]=d),0===d.l&&(d.l=d.h.createTexture()),"undefined"!=typeof HTMLVideoElement&&m instanceof HTMLVideoElement)var y=m.videoWidth,v=m.videoHeight;else"undefined"!=typeof HTMLImageElement&&m instanceof HTMLImageElement?(y=m.naturalWidth,v=m.naturalHeight):(y=m.width,v=m.height);v={glName:d.l,width:y,height:v},(y=d.g).canvas.width=v.width,y.canvas.height=v.height,y.activeTexture(y.TEXTURE0),d.h.bindTexture2d(d.l),y.texImage2D(y.TEXTURE_2D,0,y.RGBA,y.RGBA,y.UNSIGNED_BYTE,m),d.h.bindTexture2d(0),d=v;break t;case"detections":for((d=h.o[u.stream])||(d=new Re(h.h),h.o[u.stream]=d),d.data||(d.data=new d.g.DetectionListData),d.data.reset(m.length),v=0;v<m.length;++v){y=m[v];var b=d.data,x=b.setBoundingBox,N=v,T=y.boundingBox,w=new Te;if(gt(w,1,T.xCenter),gt(w,2,T.yCenter),gt(w,3,T.height),gt(w,4,T.width),gt(w,5,T.rotation),gt(w,6,T.rectId),T=re(w,we),x.call(b,N,T),y.landmarks)for(b=0;b<y.landmarks.length;++b){var S=!!(w=y.landmarks[b]).visibility;N=(x=d.data).addNormalizedLandmark,T=v,w=Object.assign(Object.assign({},w),{visibility:S?w.visibility:0}),gt(S=new ge,1,w.x),gt(S,2,w.y),gt(S,3,w.z),w.visibility&&gt(S,4,w.visibility),w=re(S,ve),N.call(x,T,w)}if(y.V)for(b=0;b<y.V.length;++b)N=(x=d.data).addClassification,T=v,w=y.V[b],gt(S=new he,2,w.ga),w.index&&gt(S,1,w.index),w.label&&gt(S,3,w.label),w.displayName&&gt(S,4,w.displayName),w=re(S,fe),N.call(x,T,w)}d=d.data;break t;default:d={}}}switch(p=d,c=u.stream,u.type){case"video":r.pushTexture2d(Object.assign(Object.assign({},p),{stream:c,timestamp:n}));break;case"detections":(l=p).stream=c,l.timestamp=n,r.pushDetectionList(l);break;default:throw Error("Unknown input config type: '"+u.type+"'")}}return h.i.send(r),g(f,h.D,4);case 4:r.delete(),f.g=0}}))},t.onResults=function(t,e){this.listeners[e||"$"]=t},_("Solution",Be),_("OptionType",{BOOL:0,NUMBER:1,ia:2,0:"BOOL",1:"NUMBER",2:"STRING"}),(t=He.prototype).close=function(){return this.g.close(),Promise.resolve()},t.onResults=function(t){this.g.onResults(t)},t.initialize=function(){var t=this;return T((function(e){return g(e,t.g.initialize(),0)}))},t.reset=function(){this.g.reset()},t.send=function(t){var e=this;return T((function(n){return g(n,e.g.send(t),0)}))},t.setOptions=function(t){this.g.setOptions(t)},_("FaceDetection",He),_("FACEDETECTION_LIPS",Se),_("FACEDETECTION_LEFT_EYE",_e),_("FACEDETECTION_LEFT_EYEBROW",Oe),_("FACEDETECTION_RIGHT_EYE",Ae),_("FACEDETECTION_RIGHT_EYEBROW",Ee),_("FACEDETECTION_FACE_OVAL",Me),_("FACEDETECTION_CONTOURS",ke),_("FACEDETECTION_TESSELATION",[[127,34],[34,139],[139,127],[11,0],[0,37],[37,11],[232,231],[231,120],[120,232],[72,37],[37,39],[39,72],[128,121],[121,47],[47,128],[232,121],[121,128],[128,232],[104,69],[69,67],[67,104],[175,171],[171,148],[148,175],[118,50],[50,101],[101,118],[73,39],[39,40],[40,73],[9,151],[151,108],[108,9],[48,115],[115,131],[131,48],[194,204],[204,211],[211,194],[74,40],[40,185],[185,74],[80,42],[42,183],[183,80],[40,92],[92,186],[186,40],[230,229],[229,118],[118,230],[202,212],[212,214],[214,202],[83,18],[18,17],[17,83],[76,61],[61,146],[146,76],[160,29],[29,30],[30,160],[56,157],[157,173],[173,56],[106,204],[204,194],[194,106],[135,214],[214,192],[192,135],[203,165],[165,98],[98,203],[21,71],[71,68],[68,21],[51,45],[45,4],[4,51],[144,24],[24,23],[23,144],[77,146],[146,91],[91,77],[205,50],[50,187],[187,205],[201,200],[200,18],[18,201],[91,106],[106,182],[182,91],[90,91],[91,181],[181,90],[85,84],[84,17],[17,85],[206,203],[203,36],[36,206],[148,171],[171,140],[140,148],[92,40],[40,39],[39,92],[193,189],[189,244],[244,193],[159,158],[158,28],[28,159],[247,246],[246,161],[161,247],[236,3],[3,196],[196,236],[54,68],[68,104],[104,54],[193,168],[168,8],[8,193],[117,228],[228,31],[31,117],[189,193],[193,55],[55,189],[98,97],[97,99],[99,98],[126,47],[47,100],[100,126],[166,79],[79,218],[218,166],[155,154],[154,26],[26,155],[209,49],[49,131],[131,209],[135,136],[136,150],[150,135],[47,126],[126,217],[217,47],[223,52],[52,53],[53,223],[45,51],[51,134],[134,45],[211,170],[170,140],[140,211],[67,69],[69,108],[108,67],[43,106],[106,91],[91,43],[230,119],[119,120],[120,230],[226,130],[130,247],[247,226],[63,53],[53,52],[52,63],[238,20],[20,242],[242,238],[46,70],[70,156],[156,46],[78,62],[62,96],[96,78],[46,53],[53,63],[63,46],[143,34],[34,227],[227,143],[123,117],[117,111],[111,123],[44,125],[125,19],[19,44],[236,134],[134,51],[51,236],[216,206],[206,205],[205,216],[154,153],[153,22],[22,154],[39,37],[37,167],[167,39],[200,201],[201,208],[208,200],[36,142],[142,100],[100,36],[57,212],[212,202],[202,57],[20,60],[60,99],[99,20],[28,158],[158,157],[157,28],[35,226],[226,113],[113,35],[160,159],[159,27],[27,160],[204,202],[202,210],[210,204],[113,225],[225,46],[46,113],[43,202],[202,204],[204,43],[62,76],[76,77],[77,62],[137,123],[123,116],[116,137],[41,38],[38,72],[72,41],[203,129],[129,142],[142,203],[64,98],[98,240],[240,64],[49,102],[102,64],[64,49],[41,73],[73,74],[74,41],[212,216],[216,207],[207,212],[42,74],[74,184],[184,42],[169,170],[170,211],[211,169],[170,149],[149,176],[176,170],[105,66],[66,69],[69,105],[122,6],[6,168],[168,122],[123,147],[147,187],[187,123],[96,77],[77,90],[90,96],[65,55],[55,107],[107,65],[89,90],[90,180],[180,89],[101,100],[100,120],[120,101],[63,105],[105,104],[104,63],[93,137],[137,227],[227,93],[15,86],[86,85],[85,15],[129,102],[102,49],[49,129],[14,87],[87,86],[86,14],[55,8],[8,9],[9,55],[100,47],[47,121],[121,100],[145,23],[23,22],[22,145],[88,89],[89,179],[179,88],[6,122],[122,196],[196,6],[88,95],[95,96],[96,88],[138,172],[172,136],[136,138],[215,58],[58,172],[172,215],[115,48],[48,219],[219,115],[42,80],[80,81],[81,42],[195,3],[3,51],[51,195],[43,146],[146,61],[61,43],[171,175],[175,199],[199,171],[81,82],[82,38],[38,81],[53,46],[46,225],[225,53],[144,163],[163,110],[110,144],[52,65],[65,66],[66,52],[229,228],[228,117],[117,229],[34,127],[127,234],[234,34],[107,108],[108,69],[69,107],[109,108],[108,151],[151,109],[48,64],[64,235],[235,48],[62,78],[78,191],[191,62],[129,209],[209,126],[126,129],[111,35],[35,143],[143,111],[117,123],[123,50],[50,117],[222,65],[65,52],[52,222],[19,125],[125,141],[141,19],[221,55],[55,65],[65,221],[3,195],[195,197],[197,3],[25,7],[7,33],[33,25],[220,237],[237,44],[44,220],[70,71],[71,139],[139,70],[122,193],[193,245],[245,122],[247,130],[130,33],[33,247],[71,21],[21,162],[162,71],[170,169],[169,150],[150,170],[188,174],[174,196],[196,188],[216,186],[186,92],[92,216],[2,97],[97,167],[167,2],[141,125],[125,241],[241,141],[164,167],[167,37],[37,164],[72,38],[38,12],[12,72],[38,82],[82,13],[13,38],[63,68],[68,71],[71,63],[226,35],[35,111],[111,226],[101,50],[50,205],[205,101],[206,92],[92,165],[165,206],[209,198],[198,217],[217,209],[165,167],[167,97],[97,165],[220,115],[115,218],[218,220],[133,112],[112,243],[243,133],[239,238],[238,241],[241,239],[214,135],[135,169],[169,214],[190,173],[173,133],[133,190],[171,208],[208,32],[32,171],[125,44],[44,237],[237,125],[86,87],[87,178],[178,86],[85,86],[86,179],[179,85],[84,85],[85,180],[180,84],[83,84],[84,181],[181,83],[201,83],[83,182],[182,201],[137,93],[93,132],[132,137],[76,62],[62,183],[183,76],[61,76],[76,184],[184,61],[57,61],[61,185],[185,57],[212,57],[57,186],[186,212],[214,207],[207,187],[187,214],[34,143],[143,156],[156,34],[79,239],[239,237],[237,79],[123,137],[137,177],[177,123],[44,1],[1,4],[4,44],[201,194],[194,32],[32,201],[64,102],[102,129],[129,64],[213,215],[215,138],[138,213],[59,166],[166,219],[219,59],[242,99],[99,97],[97,242],[2,94],[94,141],[141,2],[75,59],[59,235],[235,75],[24,110],[110,228],[228,24],[25,130],[130,226],[226,25],[23,24],[24,229],[229,23],[22,23],[23,230],[230,22],[26,22],[22,231],[231,26],[112,26],[26,232],[232,112],[189,190],[190,243],[243,189],[221,56],[56,190],[190,221],[28,56],[56,221],[221,28],[27,28],[28,222],[222,27],[29,27],[27,223],[223,29],[30,29],[29,224],[224,30],[247,30],[30,225],[225,247],[238,79],[79,20],[20,238],[166,59],[59,75],[75,166],[60,75],[75,240],[240,60],[147,177],[177,215],[215,147],[20,79],[79,166],[166,20],[187,147],[147,213],[213,187],[112,233],[233,244],[244,112],[233,128],[128,245],[245,233],[128,114],[114,188],[188,128],[114,217],[217,174],[174,114],[131,115],[115,220],[220,131],[217,198],[198,236],[236,217],[198,131],[131,134],[134,198],[177,132],[132,58],[58,177],[143,35],[35,124],[124,143],[110,163],[163,7],[7,110],[228,110],[110,25],[25,228],[356,389],[389,368],[368,356],[11,302],[302,267],[267,11],[452,350],[350,349],[349,452],[302,303],[303,269],[269,302],[357,343],[343,277],[277,357],[452,453],[453,357],[357,452],[333,332],[332,297],[297,333],[175,152],[152,377],[377,175],[347,348],[348,330],[330,347],[303,304],[304,270],[270,303],[9,336],[336,337],[337,9],[278,279],[279,360],[360,278],[418,262],[262,431],[431,418],[304,408],[408,409],[409,304],[310,415],[415,407],[407,310],[270,409],[409,410],[410,270],[450,348],[348,347],[347,450],[422,430],[430,434],[434,422],[313,314],[314,17],[17,313],[306,307],[307,375],[375,306],[387,388],[388,260],[260,387],[286,414],[414,398],[398,286],[335,406],[406,418],[418,335],[364,367],[367,416],[416,364],[423,358],[358,327],[327,423],[251,284],[284,298],[298,251],[281,5],[5,4],[4,281],[373,374],[374,253],[253,373],[307,320],[320,321],[321,307],[425,427],[427,411],[411,425],[421,313],[313,18],[18,421],[321,405],[405,406],[406,321],[320,404],[404,405],[405,320],[315,16],[16,17],[17,315],[426,425],[425,266],[266,426],[377,400],[400,369],[369,377],[322,391],[391,269],[269,322],[417,465],[465,464],[464,417],[386,257],[257,258],[258,386],[466,260],[260,388],[388,466],[456,399],[399,419],[419,456],[284,332],[332,333],[333,284],[417,285],[285,8],[8,417],[346,340],[340,261],[261,346],[413,441],[441,285],[285,413],[327,460],[460,328],[328,327],[355,371],[371,329],[329,355],[392,439],[439,438],[438,392],[382,341],[341,256],[256,382],[429,420],[420,360],[360,429],[364,394],[394,379],[379,364],[277,343],[343,437],[437,277],[443,444],[444,283],[283,443],[275,440],[440,363],[363,275],[431,262],[262,369],[369,431],[297,338],[338,337],[337,297],[273,375],[375,321],[321,273],[450,451],[451,349],[349,450],[446,342],[342,467],[467,446],[293,334],[334,282],[282,293],[458,461],[461,462],[462,458],[276,353],[353,383],[383,276],[308,324],[324,325],[325,308],[276,300],[300,293],[293,276],[372,345],[345,447],[447,372],[352,345],[345,340],[340,352],[274,1],[1,19],[19,274],[456,248],[248,281],[281,456],[436,427],[427,425],[425,436],[381,256],[256,252],[252,381],[269,391],[391,393],[393,269],[200,199],[199,428],[428,200],[266,330],[330,329],[329,266],[287,273],[273,422],[422,287],[250,462],[462,328],[328,250],[258,286],[286,384],[384,258],[265,353],[353,342],[342,265],[387,259],[259,257],[257,387],[424,431],[431,430],[430,424],[342,353],[353,276],[276,342],[273,335],[335,424],[424,273],[292,325],[325,307],[307,292],[366,447],[447,345],[345,366],[271,303],[303,302],[302,271],[423,266],[266,371],[371,423],[294,455],[455,460],[460,294],[279,278],[278,294],[294,279],[271,272],[272,304],[304,271],[432,434],[434,427],[427,432],[272,407],[407,408],[408,272],[394,430],[430,431],[431,394],[395,369],[369,400],[400,395],[334,333],[333,299],[299,334],[351,417],[417,168],[168,351],[352,280],[280,411],[411,352],[325,319],[319,320],[320,325],[295,296],[296,336],[336,295],[319,403],[403,404],[404,319],[330,348],[348,349],[349,330],[293,298],[298,333],[333,293],[323,454],[454,447],[447,323],[15,16],[16,315],[315,15],[358,429],[429,279],[279,358],[14,15],[15,316],[316,14],[285,336],[336,9],[9,285],[329,349],[349,350],[350,329],[374,380],[380,252],[252,374],[318,402],[402,403],[403,318],[6,197],[197,419],[419,6],[318,319],[319,325],[325,318],[367,364],[364,365],[365,367],[435,367],[367,397],[397,435],[344,438],[438,439],[439,344],[272,271],[271,311],[311,272],[195,5],[5,281],[281,195],[273,287],[287,291],[291,273],[396,428],[428,199],[199,396],[311,271],[271,268],[268,311],[283,444],[444,445],[445,283],[373,254],[254,339],[339,373],[282,334],[334,296],[296,282],[449,347],[347,346],[346,449],[264,447],[447,454],[454,264],[336,296],[296,299],[299,336],[338,10],[10,151],[151,338],[278,439],[439,455],[455,278],[292,407],[407,415],[415,292],[358,371],[371,355],[355,358],[340,345],[345,372],[372,340],[346,347],[347,280],[280,346],[442,443],[443,282],[282,442],[19,94],[94,370],[370,19],[441,442],[442,295],[295,441],[248,419],[419,197],[197,248],[263,255],[255,359],[359,263],[440,275],[275,274],[274,440],[300,383],[383,368],[368,300],[351,412],[412,465],[465,351],[263,467],[467,466],[466,263],[301,368],[368,389],[389,301],[395,378],[378,379],[379,395],[412,351],[351,419],[419,412],[436,426],[426,322],[322,436],[2,164],[164,393],[393,2],[370,462],[462,461],[461,370],[164,0],[0,267],[267,164],[302,11],[11,12],[12,302],[268,12],[12,13],[13,268],[293,300],[300,301],[301,293],[446,261],[261,340],[340,446],[330,266],[266,425],[425,330],[426,423],[423,391],[391,426],[429,355],[355,437],[437,429],[391,327],[327,326],[326,391],[440,457],[457,438],[438,440],[341,382],[382,362],[362,341],[459,457],[457,461],[461,459],[434,430],[430,394],[394,434],[414,463],[463,362],[362,414],[396,369],[369,262],[262,396],[354,461],[461,457],[457,354],[316,403],[403,402],[402,316],[315,404],[404,403],[403,315],[314,405],[405,404],[404,314],[313,406],[406,405],[405,313],[421,418],[418,406],[406,421],[366,401],[401,361],[361,366],[306,408],[408,407],[407,306],[291,409],[409,408],[408,291],[287,410],[410,409],[409,287],[432,436],[436,410],[410,432],[434,416],[416,411],[411,434],[264,368],[368,383],[383,264],[309,438],[438,457],[457,309],[352,376],[376,401],[401,352],[274,275],[275,4],[4,274],[421,428],[428,262],[262,421],[294,327],[327,358],[358,294],[433,416],[416,367],[367,433],[289,455],[455,439],[439,289],[462,370],[370,326],[326,462],[2,326],[326,370],[370,2],[305,460],[460,455],[455,305],[254,449],[449,448],[448,254],[255,261],[261,446],[446,255],[253,450],[450,449],[449,253],[252,451],[451,450],[450,252],[256,452],[452,451],[451,256],[341,453],[453,452],[452,341],[413,464],[464,463],[463,413],[441,413],[413,414],[414,441],[258,442],[442,441],[441,258],[257,443],[443,442],[442,257],[259,444],[444,443],[443,259],[260,445],[445,444],[444,260],[467,342],[342,445],[445,467],[459,458],[458,250],[250,459],[289,392],[392,290],[290,289],[290,328],[328,460],[460,290],[376,433],[433,435],[435,376],[250,290],[290,392],[392,250],[411,416],[416,433],[433,411],[341,463],[463,464],[464,341],[453,464],[464,465],[465,453],[357,465],[465,412],[412,357],[343,412],[412,399],[399,343],[360,363],[363,440],[440,360],[437,399],[399,456],[456,437],[420,456],[456,363],[363,420],[401,435],[435,288],[288,401],[372,383],[383,353],[353,372],[339,255],[255,249],[249,339],[448,261],[261,255],[255,448],[133,243],[243,190],[190,133],[133,155],[155,112],[112,133],[33,246],[246,247],[247,33],[33,130],[130,25],[25,33],[398,384],[384,286],[286,398],[362,398],[398,414],[414,362],[362,463],[463,341],[341,362],[263,359],[359,467],[467,263],[263,249],[249,255],[255,263],[466,467],[467,260],[260,466],[75,60],[60,166],[166,75],[238,239],[239,79],[79,238],[162,127],[127,139],[139,162],[72,11],[11,37],[37,72],[121,232],[232,120],[120,121],[73,72],[72,39],[39,73],[114,128],[128,47],[47,114],[233,232],[232,128],[128,233],[103,104],[104,67],[67,103],[152,175],[175,148],[148,152],[119,118],[118,101],[101,119],[74,73],[73,40],[40,74],[107,9],[9,108],[108,107],[49,48],[48,131],[131,49],[32,194],[194,211],[211,32],[184,74],[74,185],[185,184],[191,80],[80,183],[183,191],[185,40],[40,186],[186,185],[119,230],[230,118],[118,119],[210,202],[202,214],[214,210],[84,83],[83,17],[17,84],[77,76],[76,146],[146,77],[161,160],[160,30],[30,161],[190,56],[56,173],[173,190],[182,106],[106,194],[194,182],[138,135],[135,192],[192,138],[129,203],[203,98],[98,129],[54,21],[21,68],[68,54],[5,51],[51,4],[4,5],[145,144],[144,23],[23,145],[90,77],[77,91],[91,90],[207,205],[205,187],[187,207],[83,201],[201,18],[18,83],[181,91],[91,182],[182,181],[180,90],[90,181],[181,180],[16,85],[85,17],[17,16],[205,206],[206,36],[36,205],[176,148],[148,140],[140,176],[165,92],[92,39],[39,165],[245,193],[193,244],[244,245],[27,159],[159,28],[28,27],[30,247],[247,161],[161,30],[174,236],[236,196],[196,174],[103,54],[54,104],[104,103],[55,193],[193,8],[8,55],[111,117],[117,31],[31,111],[221,189],[189,55],[55,221],[240,98],[98,99],[99,240],[142,126],[126,100],[100,142],[219,166],[166,218],[218,219],[112,155],[155,26],[26,112],[198,209],[209,131],[131,198],[169,135],[135,150],[150,169],[114,47],[47,217],[217,114],[224,223],[223,53],[53,224],[220,45],[45,134],[134,220],[32,211],[211,140],[140,32],[109,67],[67,108],[108,109],[146,43],[43,91],[91,146],[231,230],[230,120],[120,231],[113,226],[226,247],[247,113],[105,63],[63,52],[52,105],[241,238],[238,242],[242,241],[124,46],[46,156],[156,124],[95,78],[78,96],[96,95],[70,46],[46,63],[63,70],[116,143],[143,227],[227,116],[116,123],[123,111],[111,116],[1,44],[44,19],[19,1],[3,236],[236,51],[51,3],[207,216],[216,205],[205,207],[26,154],[154,22],[22,26],[165,39],[39,167],[167,165],[199,200],[200,208],[208,199],[101,36],[36,100],[100,101],[43,57],[57,202],[202,43],[242,20],[20,99],[99,242],[56,28],[28,157],[157,56],[124,35],[35,113],[113,124],[29,160],[160,27],[27,29],[211,204],[204,210],[210,211],[124,113],[113,46],[46,124],[106,43],[43,204],[204,106],[96,62],[62,77],[77,96],[227,137],[137,116],[116,227],[73,41],[41,72],[72,73],[36,203],[203,142],[142,36],[235,64],[64,240],[240,235],[48,49],[49,64],[64,48],[42,41],[41,74],[74,42],[214,212],[212,207],[207,214],[183,42],[42,184],[184,183],[210,169],[169,211],[211,210],[140,170],[170,176],[176,140],[104,105],[105,69],[69,104],[193,122],[122,168],[168,193],[50,123],[123,187],[187,50],[89,96],[96,90],[90,89],[66,65],[65,107],[107,66],[179,89],[89,180],[180,179],[119,101],[101,120],[120,119],[68,63],[63,104],[104,68],[234,93],[93,227],[227,234],[16,15],[15,85],[85,16],[209,129],[129,49],[49,209],[15,14],[14,86],[86,15],[107,55],[55,9],[9,107],[120,100],[100,121],[121,120],[153,145],[145,22],[22,153],[178,88],[88,179],[179,178],[197,6],[6,196],[196,197],[89,88],[88,96],[96,89],[135,138],[138,136],[136,135],[138,215],[215,172],[172,138],[218,115],[115,219],[219,218],[41,42],[42,81],[81,41],[5,195],[195,51],[51,5],[57,43],[43,61],[61,57],[208,171],[171,199],[199,208],[41,81],[81,38],[38,41],[224,53],[53,225],[225,224],[24,144],[144,110],[110,24],[105,52],[52,66],[66,105],[118,229],[229,117],[117,118],[227,34],[34,234],[234,227],[66,107],[107,69],[69,66],[10,109],[109,151],[151,10],[219,48],[48,235],[235,219],[183,62],[62,191],[191,183],[142,129],[129,126],[126,142],[116,111],[111,143],[143,116],[118,117],[117,50],[50,118],[223,222],[222,52],[52,223],[94,19],[19,141],[141,94],[222,221],[221,65],[65,222],[196,3],[3,197],[197,196],[45,220],[220,44],[44,45],[156,70],[70,139],[139,156],[188,122],[122,245],[245,188],[139,71],[71,162],[162,139],[149,170],[170,150],[150,149],[122,188],[188,196],[196,122],[206,216],[216,92],[92,206],[164,2],[2,167],[167,164],[242,141],[141,241],[241,242],[0,164],[164,37],[37,0],[11,72],[72,12],[12,11],[12,38],[38,13],[13,12],[70,63],[63,71],[71,70],[31,226],[226,111],[111,31],[36,101],[101,205],[205,36],[203,206],[206,165],[165,203],[126,209],[209,217],[217,126],[98,165],[165,97],[97,98],[237,220],[220,218],[218,237],[237,239],[239,241],[241,237],[210,214],[214,169],[169,210],[140,171],[171,32],[32,140],[241,125],[125,237],[237,241],[179,86],[86,178],[178,179],[180,85],[85,179],[179,180],[181,84],[84,180],[180,181],[182,83],[83,181],[181,182],[194,201],[201,182],[182,194],[177,137],[137,132],[132,177],[184,76],[76,183],[183,184],[185,61],[61,184],[184,185],[186,57],[57,185],[185,186],[216,212],[212,186],[186,216],[192,214],[214,187],[187,192],[139,34],[34,156],[156,139],[218,79],[79,237],[237,218],[147,123],[123,177],[177,147],[45,44],[44,4],[4,45],[208,201],[201,32],[32,208],[98,64],[64,129],[129,98],[192,213],[213,138],[138,192],[235,59],[59,219],[219,235],[141,242],[242,97],[97,141],[97,2],[2,141],[141,97],[240,75],[75,235],[235,240],[229,24],[24,228],[228,229],[31,25],[25,226],[226,31],[230,23],[23,229],[229,230],[231,22],[22,230],[230,231],[232,26],[26,231],[231,232],[233,112],[112,232],[232,233],[244,189],[189,243],[243,244],[189,221],[221,190],[190,189],[222,28],[28,221],[221,222],[223,27],[27,222],[222,223],[224,29],[29,223],[223,224],[225,30],[30,224],[224,225],[113,247],[247,225],[225,113],[99,60],[60,240],[240,99],[213,147],[147,215],[215,213],[60,20],[20,166],[166,60],[192,187],[187,213],[213,192],[243,112],[112,244],[244,243],[244,233],[233,245],[245,244],[245,128],[128,188],[188,245],[188,114],[114,174],[174,188],[134,131],[131,220],[220,134],[174,217],[217,236],[236,174],[236,198],[198,134],[134,236],[215,177],[177,58],[58,215],[156,143],[143,124],[124,156],[25,110],[110,7],[7,25],[31,228],[228,25],[25,31],[264,356],[356,368],[368,264],[0,11],[11,267],[267,0],[451,452],[452,349],[349,451],[267,302],[302,269],[269,267],[350,357],[357,277],[277,350],[350,452],[452,357],[357,350],[299,333],[333,297],[297,299],[396,175],[175,377],[377,396],[280,347],[347,330],[330,280],[269,303],[303,270],[270,269],[151,9],[9,337],[337,151],[344,278],[278,360],[360,344],[424,418],[418,431],[431,424],[270,304],[304,409],[409,270],[272,310],[310,407],[407,272],[322,270],[270,410],[410,322],[449,450],[450,347],[347,449],[432,422],[422,434],[434,432],[18,313],[313,17],[17,18],[291,306],[306,375],[375,291],[259,387],[387,260],[260,259],[424,335],[335,418],[418,424],[434,364],[364,416],[416,434],[391,423],[423,327],[327,391],[301,251],[251,298],[298,301],[275,281],[281,4],[4,275],[254,373],[373,253],[253,254],[375,307],[307,321],[321,375],[280,425],[425,411],[411,280],[200,421],[421,18],[18,200],[335,321],[321,406],[406,335],[321,320],[320,405],[405,321],[314,315],[315,17],[17,314],[423,426],[426,266],[266,423],[396,377],[377,369],[369,396],[270,322],[322,269],[269,270],[413,417],[417,464],[464,413],[385,386],[386,258],[258,385],[248,456],[456,419],[419,248],[298,284],[284,333],[333,298],[168,417],[417,8],[8,168],[448,346],[346,261],[261,448],[417,413],[413,285],[285,417],[326,327],[327,328],[328,326],[277,355],[355,329],[329,277],[309,392],[392,438],[438,309],[381,382],[382,256],[256,381],[279,429],[429,360],[360,279],[365,364],[364,379],[379,365],[355,277],[277,437],[437,355],[282,443],[443,283],[283,282],[281,275],[275,363],[363,281],[395,431],[431,369],[369,395],[299,297],[297,337],[337,299],[335,273],[273,321],[321,335],[348,450],[450,349],[349,348],[359,446],[446,467],[467,359],[283,293],[293,282],[282,283],[250,458],[458,462],[462,250],[300,276],[276,383],[383,300],[292,308],[308,325],[325,292],[283,276],[276,293],[293,283],[264,372],[372,447],[447,264],[346,352],[352,340],[340,346],[354,274],[274,19],[19,354],[363,456],[456,281],[281,363],[426,436],[436,425],[425,426],[380,381],[381,252],[252,380],[267,269],[269,393],[393,267],[421,200],[200,428],[428,421],[371,266],[266,329],[329,371],[432,287],[287,422],[422,432],[290,250],[250,328],[328,290],[385,258],[258,384],[384,385],[446,265],[265,342],[342,446],[386,387],[387,257],[257,386],[422,424],[424,430],[430,422],[445,342],[342,276],[276,445],[422,273],[273,424],[424,422],[306,292],[292,307],[307,306],[352,366],[366,345],[345,352],[268,271],[271,302],[302,268],[358,423],[423,371],[371,358],[327,294],[294,460],[460,327],[331,279],[279,294],[294,331],[303,271],[271,304],[304,303],[436,432],[432,427],[427,436],[304,272],[272,408],[408,304],[395,394],[394,431],[431,395],[378,395],[395,400],[400,378],[296,334],[334,299],[299,296],[6,351],[351,168],[168,6],[376,352],[352,411],[411,376],[307,325],[325,320],[320,307],[285,295],[295,336],[336,285],[320,319],[319,404],[404,320],[329,330],[330,349],[349,329],[334,293],[293,333],[333,334],[366,323],[323,447],[447,366],[316,15],[15,315],[315,316],[331,358],[358,279],[279,331],[317,14],[14,316],[316,317],[8,285],[285,9],[9,8],[277,329],[329,350],[350,277],[253,374],[374,252],[252,253],[319,318],[318,403],[403,319],[351,6],[6,419],[419,351],[324,318],[318,325],[325,324],[397,367],[367,365],[365,397],[288,435],[435,397],[397,288],[278,344],[344,439],[439,278],[310,272],[272,311],[311,310],[248,195],[195,281],[281,248],[375,273],[273,291],[291,375],[175,396],[396,199],[199,175],[312,311],[311,268],[268,312],[276,283],[283,445],[445,276],[390,373],[373,339],[339,390],[295,282],[282,296],[296,295],[448,449],[449,346],[346,448],[356,264],[264,454],[454,356],[337,336],[336,299],[299,337],[337,338],[338,151],[151,337],[294,278],[278,455],[455,294],[308,292],[292,415],[415,308],[429,358],[358,355],[355,429],[265,340],[340,372],[372,265],[352,346],[346,280],[280,352],[295,442],[442,282],[282,295],[354,19],[19,370],[370,354],[285,441],[441,295],[295,285],[195,248],[248,197],[197,195],[457,440],[440,274],[274,457],[301,300],[300,368],[368,301],[417,351],[351,465],[465,417],[251,301],[301,389],[389,251],[394,395],[395,379],[379,394],[399,412],[412,419],[419,399],[410,436],[436,322],[322,410],[326,2],[2,393],[393,326],[354,370],[370,461],[461,354],[393,164],[164,267],[267,393],[268,302],[302,12],[12,268],[312,268],[268,13],[13,312],[298,293],[293,301],[301,298],[265,446],[446,340],[340,265],[280,330],[330,425],[425,280],[322,426],[426,391],[391,322],[420,429],[429,437],[437,420],[393,391],[391,326],[326,393],[344,440],[440,438],[438,344],[458,459],[459,461],[461,458],[364,434],[434,394],[394,364],[428,396],[396,262],[262,428],[274,354],[354,457],[457,274],[317,316],[316,402],[402,317],[316,315],[315,403],[403,316],[315,314],[314,404],[404,315],[314,313],[313,405],[405,314],[313,421],[421,406],[406,313],[323,366],[366,361],[361,323],[292,306],[306,407],[407,292],[306,291],[291,408],[408,306],[291,287],[287,409],[409,291],[287,432],[432,410],[410,287],[427,434],[434,411],[411,427],[372,264],[264,383],[383,372],[459,309],[309,457],[457,459],[366,352],[352,401],[401,366],[1,274],[274,4],[4,1],[418,421],[421,262],[262,418],[331,294],[294,358],[358,331],[435,433],[433,367],[367,435],[392,289],[289,439],[439,392],[328,462],[462,326],[326,328],[94,2],[2,370],[370,94],[289,305],[305,455],[455,289],[339,254],[254,448],[448,339],[359,255],[255,446],[446,359],[254,253],[253,449],[449,254],[253,252],[252,450],[450,253],[252,256],[256,451],[451,252],[256,341],[341,452],[452,256],[414,413],[413,463],[463,414],[286,441],[441,414],[414,286],[286,258],[258,441],[441,286],[258,257],[257,442],[442,258],[257,259],[259,443],[443,257],[259,260],[260,444],[444,259],[260,467],[467,445],[445,260],[309,459],[459,250],[250,309],[305,289],[289,290],[290,305],[305,290],[290,460],[460,305],[401,376],[376,435],[435,401],[309,250],[250,392],[392,309],[376,411],[411,433],[433,376],[453,341],[341,464],[464,453],[357,453],[453,465],[465,357],[343,357],[357,412],[412,343],[437,343],[343,399],[399,437],[344,360],[360,440],[440,344],[420,437],[437,456],[456,420],[360,420],[420,363],[363,360],[361,401],[401,288],[288,361],[265,372],[372,353],[353,265],[390,339],[339,249],[249,390],[339,448],[448,255],[255,339]]),_("VERSION","0.4.1646425229")}).call(ee);var re=function(){return(re=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)};function ae(t,e,n,r){return new(n||(n=Promise))((function(a,s){function i(t){try{u(r.next(t))}catch(t){s(t)}}function o(t){try{u(r.throw(t))}catch(t){s(t)}}function u(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,o)}u((r=r.apply(t,e||[])).next())}))}function se(t,e){var n,r,a,s,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){i.label=s[1];break}if(6===s[0]&&i.label<a[1]){i.label=a[1],a=s;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(s);break}a[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}var ie=["rightEye","leftEye","noseTip","mouthCenter","rightEarTragion","leftEarTragion"],oe={modelType:"short",runtime:"mediapipe",maxFaces:1},ue=function(){function t(t){var e=this;this.width=0,this.height=0,this.selfieMode=!1,this.faceDetectorSolution=new ne.FaceDetection({locateFile:function(e,n){return t.solutionPath?t.solutionPath.replace(/\/+$/,"")+"/"+e:n+"/"+e}}),this.faceDetectorSolution.setOptions({selfieMode:this.selfieMode,model:t.modelType}),this.faceDetectorSolution.onResults((function(t){if(e.height=t.image.height,e.width=t.image.width,e.faces=[],null!==t.detections)for(var n=0,r=t.detections;n<r.length;n++){var a=r[n];e.faces.push(e.normalizedToAbsolute(a.landmarks,{xMin:i=(s=a.boundingBox).xCenter-s.width/2,xMax:i+s.width,yMin:o=s.yCenter-s.height/2,yMax:o+s.height,width:s.width,height:s.height}))}var s,i,o}))}return t.prototype.normalizedToAbsolute=function(t,e){var n=this;return{keypoints:t.map((function(t,e){return{x:t.x*n.width,y:t.y*n.height,name:ie[e]}})),box:{xMin:e.xMin*this.width,yMin:e.yMin*this.height,xMax:e.xMax*this.width,yMax:e.yMax*this.height,width:e.width*this.width,height:e.height*this.height}}},t.prototype.estimateFaces=function(t,e){return ae(this,void 0,void 0,(function(){var n,r;return se(this,(function(a){switch(a.label){case 0:return e&&e.flipHorizontal&&e.flipHorizontal!==this.selfieMode&&(this.selfieMode=e.flipHorizontal,this.faceDetectorSolution.setOptions({selfieMode:this.selfieMode})),t instanceof S.esB?(r=ImageData.bind,[4,S.Xhn.toPixels(t)]):[3,2];case 1:return n=new(r.apply(ImageData,[void 0,a.sent(),t.shape[1],t.shape[0]])),[3,3];case 2:n=t,a.label=3;case 3:return t=n,[4,this.faceDetectorSolution.send({image:t})];case 4:return a.sent(),[2,this.faces]}}))}))},t.prototype.dispose=function(){this.faceDetectorSolution.close()},t.prototype.reset=function(){this.faceDetectorSolution.reset(),this.width=0,this.height=0,this.faces=null,this.selfieMode=!1},t.prototype.initialize=function(){return this.faceDetectorSolution.initialize()},t}();function pe(t){return ae(this,void 0,void 0,(function(){var e,n;return se(this,(function(r){switch(r.label){case 0:return e=function(t){if(null==t)return re({},oe);var e=re({},t);return e.runtime="mediapipe",null==e.modelType&&(e.modelType=oe.modelType),null==e.maxFaces&&(e.maxFaces=oe.maxFaces),e}(t),[4,(n=new ue(e)).initialize()];case 1:return r.sent(),[2,n]}}))}))}function ce(t){return t instanceof S.esB?{height:t.shape[0],width:t.shape[1]}:{height:t.height,width:t.width}}function le(t){return t instanceof S.esB?t:S.Xhn.fromPixels(t)}function he(t,e){S.D5U.assert(0!==t.width,(function(){return e+" width cannot be 0."})),S.D5U.assert(0!==t.height,(function(){return e+" height cannot be 0."}))}function fe(t){null==t.reduceBoxesInLowestLayer&&(t.reduceBoxesInLowestLayer=!1),null==t.interpolatedScaleAspectRatio&&(t.interpolatedScaleAspectRatio=1),null==t.fixedAnchorSize&&(t.fixedAnchorSize=!1);for(var e=[],n=0;n<t.numLayers;){for(var r=[],a=[],s=[],i=[],o=n;o<t.strides.length&&t.strides[o]===t.strides[n];){var u=me(t.minScale,t.maxScale,o,t.strides.length);if(0===o&&t.reduceBoxesInLowestLayer)s.push(1),s.push(2),s.push(.5),i.push(.1),i.push(u),i.push(u);else{for(var p=0;p<t.aspectRatios.length;++p)s.push(t.aspectRatios[p]),i.push(u);if(t.interpolatedScaleAspectRatio>0){var c=o===t.strides.length-1?1:me(t.minScale,t.maxScale,o+1,t.strides.length);i.push(Math.sqrt(u*c)),s.push(t.interpolatedScaleAspectRatio)}}o++}for(var l=0;l<s.length;++l){var h=Math.sqrt(s[l]);r.push(i[l]/h),a.push(i[l]*h)}var f=0,m=0;if(t.featureMapHeight.length>0)f=t.featureMapHeight[n],m=t.featureMapWidth[n];else{var d=t.strides[n];f=Math.ceil(t.inputSizeHeight/d),m=Math.ceil(t.inputSizeWidth/d)}for(var y=0;y<f;++y)for(var g=0;g<m;++g)for(var v=0;v<r.length;++v){var b={xCenter:(g+t.anchorOffsetX)/m,yCenter:(y+t.anchorOffsetY)/f,width:0,height:0};t.fixedAnchorSize?(b.width=1,b.height=1):(b.width=a[v],b.height=r[v]),e.push(b)}n=o}return e}function me(t,e,n,r){return 1===r?.5*(t+e):t+(e-t)*n/(r-1)}function de(t,e){var n=e[0],r=e[1];return[n*t[0]+r*t[1]+t[3],n*t[4]+r*t[5]+t[7]]}function ye(t,e,n,r){return ae(this,void 0,void 0,(function(){var r,a,s,i,o;return se(this,(function(u){switch(u.label){case 0:return t.sort((function(t,e){return Math.max.apply(Math,e.score)-Math.max.apply(Math,t.score)})),r=(0,S.odF)(t.map((function(t){return[t.locationData.relativeBoundingBox.yMin,t.locationData.relativeBoundingBox.xMin,t.locationData.relativeBoundingBox.yMax,t.locationData.relativeBoundingBox.xMax]}))),a=(0,S.RRF)(t.map((function(t){return t.score[0]}))),[4,S.BHj.nonMaxSuppressionAsync(r,a,e,n)];case 1:return[4,(s=u.sent()).array()];case 2:return i=u.sent(),o=t.filter((function(t,e){return i.indexOf(e)>-1})),(0,S.B90)([r,a,s]),[2,o]}}))}))}function ge(t,e,n){return ae(this,void 0,void 0,(function(){var r,a,s,i,o;return se(this,(function(u){switch(u.label){case 0:return r=t[0],a=t[1],s=function(t,e,n){return(0,S.lub)((function(){var r,a,s,i;n.reverseOutputOrder?(a=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+0],[-1,1])),r=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+1],[-1,1])),i=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+2],[-1,1])),s=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+3],[-1,1]))):(r=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+0],[-1,1])),a=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+1],[-1,1])),s=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+2],[-1,1])),i=(0,S.L9e)((0,S.tPi)(t,[0,n.boxCoordOffset+3],[-1,1]))),a=(0,S.IHx)((0,S.dC7)((0,S.hiC)(a,n.xScale),e.w),e.x),r=(0,S.IHx)((0,S.dC7)((0,S.hiC)(r,n.yScale),e.h),e.y),n.applyExponentialOnBoxSize?(s=(0,S.dC7)((0,S.Qqt)((0,S.hiC)(s,n.hScale)),e.h),i=(0,S.dC7)((0,S.Qqt)((0,S.hiC)(i,n.wScale)),e.w)):(s=(0,S.dC7)((0,S.hiC)(s,n.hScale),e.h),i=(0,S.dC7)((0,S.hiC)(i,n.wScale),e.h));var o=(0,S.luU)(r,(0,S.hiC)(s,2)),u=(0,S.luU)(a,(0,S.hiC)(i,2)),p=(0,S.IHx)(r,(0,S.hiC)(s,2)),c=(0,S.IHx)(a,(0,S.hiC)(i,2)),l=(0,S.zoF)([(0,S.XLQ)(o,[n.numBoxes,1]),(0,S.XLQ)(u,[n.numBoxes,1]),(0,S.XLQ)(p,[n.numBoxes,1]),(0,S.XLQ)(c,[n.numBoxes,1])],1);if(n.numKeypoints)for(var h=0;h<n.numKeypoints;++h){var f=n.keypointCoordOffset+h*n.numValuesPerKeypoint,m=void 0,d=void 0;n.reverseOutputOrder?(m=(0,S.L9e)((0,S.tPi)(t,[0,f],[-1,1])),d=(0,S.L9e)((0,S.tPi)(t,[0,f+1],[-1,1]))):(d=(0,S.L9e)((0,S.tPi)(t,[0,f],[-1,1])),m=(0,S.L9e)((0,S.tPi)(t,[0,f+1],[-1,1])));var y=(0,S.IHx)((0,S.dC7)((0,S.hiC)(m,n.xScale),e.w),e.x),g=(0,S.IHx)((0,S.dC7)((0,S.hiC)(d,n.yScale),e.h),e.y);l=(0,S.zoF)([l,(0,S.XLQ)(y,[n.numBoxes,1]),(0,S.XLQ)(g,[n.numBoxes,1])],1)}return l}))}(a,e,n),i=(0,S.lub)((function(){var t=r;return n.sigmoidScore?(null!=n.scoreClippingThresh&&(t=(0,S.iUl)(r,-n.scoreClippingThresh,n.scoreClippingThresh)),t=(0,S.XD2)(t)):t})),[4,ve(s,i,n)];case 1:return o=u.sent(),(0,S.B90)([s,i]),[2,o]}}))}))}function ve(t,e,n){return ae(this,void 0,void 0,(function(){var r,a,s,i,o,u,p,c,l,h,f,m;return se(this,(function(d){switch(d.label){case 0:return r=[],[4,t.data()];case 1:return a=d.sent(),[4,e.data()];case 2:for(s=d.sent(),i=0;i<n.numBoxes;++i)if(!(null!=n.minScoreThresh&&s[i]<n.minScoreThresh||(o=i*n.numCoords,u=be(a[o+0],a[o+1],a[o+2],a[o+3],s[i],n.flipVertically,i),(p=u.locationData.relativeBoundingBox).width<0||p.height<0))){if(n.numKeypoints>0)for((c=u.locationData).relativeKeypoints=[],l=n.numKeypoints*n.numValuesPerKeypoint,h=0;h<l;h+=n.numValuesPerKeypoint)f=o+n.keypointCoordOffset+h,m={x:a[f+0],y:n.flipVertically?1-a[f+1]:a[f+1]},c.relativeKeypoints.push(m);r.push(u)}return[2,r]}}))}))}function be(t,e,n,r,a,s,i){return{score:[a],ind:i,locationData:{relativeBoundingBox:{xMin:e,yMin:s?1-n:t,xMax:r,yMax:s?1-t:n,width:r-e,height:n-t}}}}var xe,Ne={reduceBoxesInLowestLayer:!1,interpolatedScaleAspectRatio:1,featureMapHeight:[],featureMapWidth:[],numLayers:4,minScale:.1484375,maxScale:.75,inputSizeHeight:128,inputSizeWidth:128,anchorOffsetX:.5,anchorOffsetY:.5,strides:[8,16,16,16],aspectRatios:[1],fixedAnchorSize:!0},Te={reduceBoxesInLowestLayer:!1,interpolatedScaleAspectRatio:0,featureMapHeight:[],featureMapWidth:[],numLayers:1,minScale:.1484375,maxScale:.75,inputSizeHeight:192,inputSizeWidth:192,anchorOffsetX:.5,anchorOffsetY:.5,strides:[4],aspectRatios:[1],fixedAnchorSize:!0},we={runtime:"tfjs",modelType:"short",maxFaces:1,detectorModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1"},Se={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:896,numCoords:16,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:6,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:128,yScale:128,hScale:128,wScale:128,minScoreThresh:.5},_e={applyExponentialOnBoxSize:!1,flipVertically:!1,ignoreClasses:[],numClasses:1,numBoxes:2304,numCoords:16,boxCoordOffset:0,keypointCoordOffset:4,numKeypoints:6,numValuesPerKeypoint:2,sigmoidScore:!0,scoreClippingThresh:100,reverseOutputOrder:!0,xScale:192,yScale:192,hScale:192,wScale:192,minScoreThresh:.6},Oe={outputTensorSize:{width:128,height:128},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},Ae={outputTensorSize:{width:192,height:192},keepAspectRatio:!0,outputTensorFloatRange:[-1,1],borderMode:"zero"},Ee=function(){function t(t,e,n){this.detectorModel=e,this.maxFaces=n,"full"===t?(this.imageToTensorConfig=Ae,this.tensorsToDetectionConfig=_e,this.anchors=fe(Te)):(this.imageToTensorConfig=Oe,this.tensorsToDetectionConfig=Se,this.anchors=fe(Ne));var r=(0,S.RRF)(this.anchors.map((function(t){return t.width}))),a=(0,S.RRF)(this.anchors.map((function(t){return t.height}))),s=(0,S.RRF)(this.anchors.map((function(t){return t.xCenter}))),i=(0,S.RRF)(this.anchors.map((function(t){return t.yCenter})));this.anchorTensor={x:s,y:i,w:r,h:a}}return t.prototype.dispose=function(){this.detectorModel.dispose(),(0,S.B90)([this.anchorTensor.x,this.anchorTensor.y,this.anchorTensor.w,this.anchorTensor.h])},t.prototype.reset=function(){},t.prototype.detectFaces=function(t,e){return void 0===e&&(e=!1),ae(this,void 0,void 0,(function(){var n,r,a,s,i,o,u,p,c,l,h;return se(this,(function(f){switch(f.label){case 0:return null==t?(this.reset(),[2,[]]):(n=(0,S.lub)((function(){var n=(0,S.pju)(le(t),"float32");return e&&(n=(0,S.L9e)(S.BHj.flipLeftRight((0,S.dt4)(n,0)),[0])),n})),r=function(t,e,n){var r=e.outputTensorSize,a=e.keepAspectRatio,s=e.borderMode,i=e.outputTensorFloatRange,o=ce(t),u=function(t,e){return e?{xCenter:e.xCenter*t.width,yCenter:e.yCenter*t.height,width:e.width*t.width,height:e.height*t.height,rotation:e.rotation}:{xCenter:.5*t.width,yCenter:.5*t.height,width:t.width,height:t.height,rotation:0}}(o,n),p=function(t,e,n){if(void 0===n&&(n=!1),!n)return{top:0,left:0,right:0,bottom:0};var r=e.height,a=e.width;he(e,"targetSize"),he(t,"roi");var s,i,o=r/a,u=t.height/t.width,p=0,c=0;return o>u?(s=t.width,i=t.width*o,c=(1-u/o)/2):(s=t.height/o,i=t.height,p=(1-o/u)/2),t.width=s,t.height=i,{top:c,left:p,right:p,bottom:c}}(u,r,a),c=function(t,e,n,r){var a=t.width,s=t.height,i=Math.cos(t.rotation),o=Math.sin(t.rotation),u=t.xCenter,p=t.yCenter,c=1/e,l=1/n,h=new Array(16);return h[0]=a*i*1*c,h[1]=-s*o*c,h[2]=0,h[3]=(-.5*a*i*1+.5*s*o+u)*c,h[4]=a*o*1*l,h[5]=s*i*l,h[6]=0,h[7]=(-.5*s*i-.5*a*o*1+p)*l,h[8]=0,h[9]=0,h[10]=a*c,h[11]=0,h[12]=0,h[13]=0,h[14]=0,h[15]=1,function(t){if(16!==t.length)throw new Error("Array length must be 16 but got "+t.length);return[[t[0],t[1],t[2],t[3]],[t[4],t[5],t[6],t[7]],[t[8],t[9],t[10],t[11]],[t[12],t[13],t[14],t[15]]]}(h)}(u,o.width,o.height);return{imageTensor:(0,S.lub)((function(){var e=le(t),n=(0,S.odF)(function(t,e,n){return he(n,"inputResolution"),[1/n.width*t[0][0]*e.width,1/n.height*t[0][1]*e.width,t[0][3]*e.width,1/n.width*t[1][0]*e.height,1/n.height*t[1][1]*e.height,t[1][3]*e.height,0,0]}(c,o,r),[1,8]),a="zero"===s?"constant":"nearest",u=S.BHj.transform((0,S.dt4)((0,S.pju)(e,"float32")),n,"bilinear",a,0,[r.height,r.width]);return null!=i?function(t,e){var n=function(t,e,n,r){var a=(r-n)/255;return{scale:a,offset:n-0*a}}(0,0,e[0],e[1]);return(0,S.lub)((function(){return(0,S.IHx)((0,S.dC7)(t,n.scale),n.offset)}))}(u,i):u})),padding:p,transformationMatrix:c}}(n,this.imageToTensorConfig),a=r.imageTensor,s=r.transformationMatrix,i=this.detectorModel.execute(a,"Identity:0"),o=function(t){return(0,S.lub)((function(){var e=function(t){return(0,S.lub)((function(){return[(0,S.tPi)(t,[0,0,0],[1,-1,1]),(0,S.tPi)(t,[0,0,1],[1,-1,-1])]}))}(t),n=e[0],r=e[1];return{boxes:(0,S.L9e)(r),logits:(0,S.L9e)(n)}}))}(i),u=o.boxes,[4,ge([p=o.logits,u],this.anchorTensor,this.tensorsToDetectionConfig)]);case 1:return 0===(c=f.sent()).length?((0,S.B90)([n,a,i,p,u]),[2,c]):[4,ye(c,this.maxFaces,.3)];case 2:return l=f.sent(),h=function(t,e){void 0===t&&(t=[]);var n,r=(n=e,[].concat.apply([],n));return t.forEach((function(t){var e=t.locationData;e.relativeKeypoints.forEach((function(t){var e=de(r,[t.x,t.y]),n=e[0],a=e[1];t.x=n,t.y=a}));var n=e.relativeBoundingBox,a=Number.MAX_VALUE,s=Number.MAX_VALUE,i=Number.MIN_VALUE,o=Number.MIN_VALUE;[[n.xMin,n.yMin],[n.xMin+n.width,n.yMin],[n.xMin+n.width,n.yMin+n.height],[n.xMin,n.yMin+n.height]].forEach((function(t){var e=de(r,t),n=e[0],u=e[1];a=Math.min(a,n),i=Math.max(i,n),s=Math.min(s,u),o=Math.max(o,u)})),e.relativeBoundingBox={xMin:a,xMax:i,yMin:s,yMax:o,width:i-a,height:o-s}})),t}(l,s),(0,S.B90)([n,a,i,p,u]),[2,h]}}))}))},t.prototype.estimateFaces=function(t,e){return ae(this,void 0,void 0,(function(){var n,r;return se(this,(function(a){return n=ce(t),r=!!e&&e.flipHorizontal,[2,this.detectFaces(t,r).then((function(t){return t.map((function(t){for(var e=t.locationData.relativeKeypoints.map((function(t,e){return re(re({},t),{x:t.x*n.width,y:t.y*n.height,name:ie[e]})})),r=t.locationData.relativeBoundingBox,a=0,s=["width","xMax","xMin"];a<s.length;a++)r[s[a]]*=n.width;for(var i=0,o=["height","yMax","yMin"];i<o.length;i++)r[o[i]]*=n.height;return{keypoints:e,box:r}}))}))]}))}))},t}();function Me(t){return ae(this,void 0,void 0,(function(){var e,n,r;return se(this,(function(a){switch(a.label){case 0:return e=function(t){if(null==t)return re({},we);var e=re({},t);return null==e.modelType&&(e.modelType=we.modelType),null==e.maxFaces&&(e.maxFaces=we.maxFaces),null==e.detectorModelUrl&&("full"===e.modelType?e.detectorModelUrl="https://tfhub.dev/mediapipe/tfjs-model/face_detection/full/1":e.detectorModelUrl="https://tfhub.dev/mediapipe/tfjs-model/face_detection/short/1"),e}(t),n="string"==typeof e.detectorModelUrl&&e.detectorModelUrl.indexOf("https://tfhub.dev")>-1,[4,Ut(e.detectorModelUrl,{fromTFHub:n})];case 1:return r=a.sent(),[2,new Ee(e.modelType,r,e.maxFaces)]}}))}))}function ke(t,e){return ae(this,void 0,void 0,(function(){var n,r;return se(this,(function(a){if(t===xe.MediaPipeFaceDetector){if(r=void 0,null!=(n=e)){if("tfjs"===n.runtime)return[2,Me(n)];if("mediapipe"===n.runtime)return[2,pe(n)];r=n.runtime}throw new Error("Expect modelConfig.runtime to be either 'tfjs' or 'mediapipe', but got "+r)}throw new Error(t+" is not a supported model name.")}))}))}function Ie(t){return t.width*t.height}function Fe(t){var e=t.xCenter-t.width/2,n=e+t.width,r=t.yCenter-t.height/2;return{xMin:e,xMax:n,yMin:r,yMax:r+t.height,width:t.width,height:t.height}}function De(t){return t instanceof S.esB?{height:t.shape[0],width:t.shape[1]}:{height:t.height,width:t.width}}function Ce(t){return t-2*Math.PI*Math.floor((t+Math.PI)/(2*Math.PI))}function Le(t){return t instanceof S.esB?t:S.Xhn.fromPixels(t)}function Re(t,e){S.D5U.assert(0!==t.width,(function(){return e+" width cannot be 0."})),S.D5U.assert(0!==t.height,(function(){return e+" height cannot be 0."}))}function je(t,e,n){var r=e.outputTensorSize,a=e.keepAspectRatio,s=e.borderMode,i=e.outputTensorFloatRange,o=De(t),u=function(t,e){return e?{xCenter:e.xCenter*t.width,yCenter:e.yCenter*t.height,width:e.width*t.width,height:e.height*t.height,rotation:e.rotation}:{xCenter:.5*t.width,yCenter:.5*t.height,width:t.width,height:t.height,rotation:0}}(o,n),p=function(t,e,n){if(void 0===n&&(n=!1),!n)return{top:0,left:0,right:0,bottom:0};var r=e.height,a=e.width;Re(e,"targetSize"),Re(t,"roi");var s,i,o=r/a,u=t.height/t.width,p=0,c=0;return o>u?(s=t.width,i=t.width*o,c=(1-u/o)/2):(s=t.height/o,i=t.height,p=(1-o/u)/2),t.width=s,t.height=i,{top:c,left:p,right:p,bottom:c}}(u,r,a),c=function(t,e,n,r){var a=t.width,s=t.height,i=r?-1:1,o=Math.cos(t.rotation),u=Math.sin(t.rotation),p=t.xCenter,c=t.yCenter,l=1/e,h=1/n,f=new Array(16);return f[0]=a*o*i*l,f[1]=-s*u*l,f[2]=0,f[3]=(-.5*a*o*i+.5*s*u+p)*l,f[4]=a*u*i*h,f[5]=s*o*h,f[6]=0,f[7]=(-.5*s*o-.5*a*u*i+c)*h,f[8]=0,f[9]=0,f[10]=a*l,f[11]=0,f[12]=0,f[13]=0,f[14]=0,f[15]=1,function(t){if(16!==t.length)throw new Error("Array length must be 16 but got "+t.length);return[[t[0],t[1],t[2],t[3]],[t[4],t[5],t[6],t[7]],[t[8],t[9],t[10],t[11]],[t[12],t[13],t[14],t[15]]]}(f)}(u,o.width,o.height,!1);return{imageTensor:S.lub((function(){var e=Le(t),n=S.odF(function(t,e,n){return Re(n,"inputResolution"),[1/n.width*t[0][0]*e.width,1/n.height*t[0][1]*e.width,t[0][3]*e.width,1/n.width*t[1][0]*e.height,1/n.height*t[1][1]*e.height,t[1][3]*e.height,0,0]}(c,o,r),[1,8]),a="zero"===s?"constant":"nearest",u=S.BHj.transform(S.dt4(S.pju(e,"float32")),n,"bilinear",a,0,[r.height,r.width]);return null!=i?function(t,e){var n=function(t,e,n,r){var a=(r-n)/255;return{scale:a,offset:n-0*a}}(0,0,e[0],e[1]);return S.lub((function(){return S.IHx(S.dC7(t,n.scale),n.offset)}))}(u,i):u})),padding:p,transformationMatrix:c}}function Pe(t){return{xCenter:t.xMin+t.width/2,yCenter:t.yMin+t.height/2,width:t.width,height:t.height}}function Ve(t){var e=t.relativeKeypoints;if(e.length<=1)throw new Error("2 or more keypoints required to calculate a rect.");var n=Number.MAX_VALUE,r=Number.MAX_VALUE,a=Number.MIN_VALUE,s=Number.MIN_VALUE;return e.forEach((function(t){n=Math.min(n,t.x),a=Math.max(a,t.x),r=Math.min(r,t.y),s=Math.max(s,t.y)})),{xCenter:(n+a)/2,yCenter:(r+s)/2,width:a-n,height:s-r}}function Be(t,e,n,r,a){var s="rect"===n?function(t,e,n){var r,a=t.locationData;if("boundingbox"===e)r=Pe(a.boundingBox);else{r=Ve(a);var s=n.width,i=n.height;r.xCenter=Math.round(r.xCenter*s),r.yCenter=Math.round(r.yCenter*i),r.width=Math.round(r.width*s),r.height=Math.round(r.height*i)}return r}(t,e,r):function(t,e){var n=t.locationData;return"boundingbox"===e?Pe(n.relativeBoundingBox):Ve(n)}(t,e);return a&&(s.rotation=function(t,e,n){var r,a=t.locationData,s=n.rotationVectorStartKeypointIndex,i=n.rotationVectorEndKeypointIndex;r=n.rotationVectorTargetAngle?n.rotationVectorTargetAngle:Math.PI*n.rotationVectorTargetAngleDegree/180;var o=a.relativeKeypoints[s].x*e.width,u=a.relativeKeypoints[s].y*e.height,p=a.relativeKeypoints[i].x*e.width,c=a.relativeKeypoints[i].y*e.height;return Ce(r-Math.atan2(-(c-u),p-o))}(t,r,a)),s}function ze(t,e,n){for(var r=0;r<e.length;++r){var a=e[r],s=n[t[r]];s.x=a.x,s.y=a.y}}function Ue(t,e,n,r){if("string"==typeof e){if("copy"===e)for(var a=0;a<n.length;++a)r[t[a]].z=n[a].z}else{var s=function(t,e){for(var n=0,r=0;r<e.length;++r)n+=t[e[r]].z;return n/e.length}(r,e);for(a=0;a<t.length;++a)r[t[a]].z=s}}function $e(t,e){for(var n=function(t){var e=[].concat.apply([],t.map((function(t){return t.indexesMapping})));if(0===e.length)throw new Error("There should be at least one landmark in indexes mapping");var n=e[0],r=e[0],a=new Set(e);a.forEach((function(t){n=Math.min(n,t),r=Math.max(r,t)}));var s=a.size;if(0!==n)throw new Error("Indexes are expected to start with 0 instead of "+n);if(r+1!==s)throw new Error("Indexes should have no gaps but "+(r-s+1)+" indexes are missing");return s}(e),r=new Array(n).fill(null).map(Object),a=0;a<t.length;++a){var s=t[a],i=e[a];if(s.length!==i.indexesMapping.length)throw new Error("There are "+s.length+" refinement landmarks while mapping has "+i.indexesMapping.length);ze(i.indexesMapping,s,r),Ue(i.indexesMapping,i.zRefinement,s,r)}return r}function He(t,e){return t.map((function(t){var n=$t($t({},t),{x:t.x*e.width,y:t.y*e.height});return null!=t.z&&(n.z=t.z*e.width),n}))}function Ge(t,e){return"none"===t?e:function(t){return 1/(1+Math.exp(-t))}(e)}function We(t,e,n,r){return Ht(this,void 0,void 0,(function(){var a,s,i,o,u,p,c,l;return Gt(this,(function(h){switch(h.label){case 0:return n=n||e.flipHorizontally||!1,r=r||e.flipVertically||!1,a=t.size,s=a/e.numLandmarks,[4,t.data()];case 1:for(i=h.sent(),o=[],u=0;u<e.numLandmarks;++u)p=u*s,(l={x:0,y:0}).x=n?e.inputImageWidth-i[p]:i[p],s>1&&(l.y=r?e.inputImageHeight-i[p+1]:i[p+1]),s>2&&(l.z=i[p+2]),s>3&&(l.score=Ge(e.visibilityActivation,i[p+3])),o.push(l);for(c=0;c<o.length;++c)(l=o[c]).x=l.x/e.inputImageWidth,l.y=l.y/e.inputImageHeight,l.z=l.z/e.inputImageWidth/(e.normalizeZ||1);return[2,o]}}))}))}function Xe(t,e,n){var r=t.width,a=t.height,s=t.rotation;if(null==n.rotation&&null==n.rotationDegree||(s=function(t,e){return null!=e.rotation?t+=e.rotation:null!=e.rotationDegree&&(t+=Math.PI*e.rotationDegree/180),Ce(t)}(s,n)),0===s)t.xCenter=t.xCenter+r*n.shiftX,t.yCenter=t.yCenter+a*n.shiftY;else{var i=(e.width*r*n.shiftX*Math.cos(s)-e.height*a*n.shiftY*Math.sin(s))/e.width,o=(e.width*r*n.shiftX*Math.sin(s)+e.height*a*n.shiftY*Math.cos(s))/e.height;t.xCenter=t.xCenter+i,t.yCenter=t.yCenter+o}if(n.squareLong){var u=Math.max(r*e.width,a*e.height);r=u/e.width,a=u/e.height}else if(n.squareShort){var p=Math.min(r*e.width,a*e.height);r=p/e.width,a=p/e.height}return t.width=r*n.scaleX,t.height=a*n.scaleY,t}(xe||(xe={})).MediaPipeFaceDetector="MediaPipeFaceDetector";var qe,Ke={runtime:"tfjs",maxFaces:1,refineLandmarks:!1,landmarkModelUrl:"https://tfhub.dev/mediapipe/tfjs-model/face_landmarks_detection/face_mesh/1"},Ye={flipHorizontal:!1,staticImageMode:!1},Qe={shiftX:0,shiftY:0,scaleX:1.5,scaleY:1.5,squareLong:!0},Je={outputTensorSize:{width:192,height:192},outputTensorFloatRange:[0,1],borderMode:"replicate"},Ze={numLandmarks:468,inputImageWidth:192,inputImageHeight:192,visibilityActivation:"none",flipHorizontally:!1,flipVertically:!1},tn={numLandmarks:80,inputImageWidth:192,inputImageHeight:192,visibilityActivation:"none",flipHorizontally:!1,flipVertically:!1},en={numLandmarks:71,inputImageWidth:192,inputImageHeight:192,visibilityActivation:"none",flipHorizontally:!1,flipVertically:!1},nn={numLandmarks:5,inputImageWidth:192,inputImageHeight:192,visibilityActivation:"none",flipHorizontally:!1,flipVertically:!1},rn={indexesMapping:Array.from(Array(468).keys()),zRefinement:"copy"},an={indexesMapping:[61,146,91,181,84,17,314,405,321,375,291,185,40,39,37,0,267,269,270,409,78,95,88,178,87,14,317,402,318,324,308,191,80,81,82,13,312,311,310,415,76,77,90,180,85,16,315,404,320,307,306,184,74,73,72,11,302,303,304,408,62,96,89,179,86,15,316,403,319,325,292,183,42,41,38,12,268,271,272,407],zRefinement:"none"},sn={indexesMapping:[33,7,163,144,145,153,154,155,133,246,161,160,159,158,157,173,130,25,110,24,23,22,26,112,243,247,30,29,27,28,56,190,226,31,228,229,230,231,232,233,244,113,225,224,223,222,221,189,35,124,46,53,52,65,143,111,117,118,119,120,121,128,245,156,70,63,105,66,107,55,193],zRefinement:"none"},on={indexesMapping:[263,249,390,373,374,380,381,382,362,466,388,387,386,385,384,398,359,255,339,254,253,252,256,341,463,467,260,259,257,258,286,414,446,261,448,449,450,451,452,453,464,342,445,444,443,442,441,413,265,353,276,283,282,295,372,340,346,347,348,349,350,357,465,383,300,293,334,296,336,285,417],zRefinement:"none"},un={indexesMapping:[468,469,470,471,472],zRefinement:[33,7,163,144,145,153,154,155,133,246,161,160,159,158,157,173]},pn={indexesMapping:[473,474,475,476,477],zRefinement:[263,249,390,373,374,380,381,382,362,466,388,387,386,385,384,398]},cn=function(){function t(t,e,n,r){this.detector=t,this.landmarkModel=e,this.maxFaces=n,this.withAttention=r,this.prevFaceRectsFromLandmarks=null}return t.prototype.estimateFaces=function(t,e){return Ht(this,void 0,void 0,(function(){var n,r,a,s,i,o,u,p,c,l,h,f,m,d=this;return Gt(this,(function(y){switch(y.label){case 0:return n=function(t){if(null==t)return $t({},Ye);var e=$t({},t);return null==e.flipHorizontal&&(e.flipHorizontal=Ye.flipHorizontal),null==e.staticImageMode&&(e.staticImageMode=Ye.staticImageMode),e}(e),null==t?(this.reset(),[2,[]]):(r=De(t),a=S.lub((function(){var e=S.pju(Le(t),"float32");return n.flipHorizontal&&(e=S.L9e(S.BHj.flipLeftRight(S.dt4(e,0)),[0])),e})),s=this.prevFaceRectsFromLandmarks,n.staticImageMode||null==s||s.length<this.maxFaces?[4,this.detector.detectFaces(a,!1)]:[3,2]);case 1:return 0===(o=y.sent()).length?(this.reset(),a.dispose(),[2,[]]):(i=o.map((function(t){return d.faceDetectionFrontDetectionToRoi(t,r)})),[3,3]);case 2:i=[],y.label=3;case 3:return.5,g=[],[i,s||[]].forEach((function(t){return t.forEach((function(t){(g=g.filter((function(e){return function(t,e){var n=Fe(t),r=Fe(e);if(!function(t,e){return!(t.xMax<e.xMin||e.xMax<t.xMin||t.yMax<e.yMin||e.yMax<t.yMin)}(n,r))return 0;var a=Ie(function(t,e){var n=Math.max(t.xMin,e.xMin),r=Math.min(t.xMax,e.xMax),a=Math.max(t.yMin,e.yMin),s=Math.min(t.yMax,e.yMax);return{xMin:n,xMax:r,yMin:a,yMax:s,width:Math.max(r-n,0),height:Math.max(s-a,0)}}(n,r)),s=Ie(n)+Ie(r)-a;return s>0?a/s:0}(t,e)<=.5}))).push(t)}))})),u=g,[4,Promise.all(u.map((function(t){return d.faceLandmark(t,a)})))];case 4:for(p=y.sent(),c=[],this.prevFaceRectsFromLandmarks=[],l=0;l<p.length;++l)null!=(h=p[l])&&(this.prevFaceRectsFromLandmarks.push(this.faceLandmarksToRoi(h,r)),null!=(f=He(h,r))&&f.forEach((function(t,e){var n=Yt.get(e);null!=n&&(t.name=n)})),m=Qt(f),c.push({keypoints:f,box:m.locationData.relativeBoundingBox}));return a.dispose(),[2,c]}var g}))}))},t.prototype.dispose=function(){this.detector.dispose(),this.landmarkModel.dispose()},t.prototype.reset=function(){this.detector.reset(),this.prevFaceRectsFromLandmarks=null},t.prototype.faceDetectionFrontDetectionToRoi=function(t,e){return Xe(Be(t,"boundingbox","normRect",e,{rotationVectorStartKeypointIndex:0,rotationVectorEndKeypointIndex:1,rotationVectorTargetAngleDegree:0}),e,Qe)},t.prototype.faceLandmark=function(t,e){return Ht(this,void 0,void 0,(function(){var n,r,a,s,i,o,u;return Gt(this,(function(p){switch(p.label){case 0:return n=je(e,Je,t).imageTensor,r=["output_faceflag"].concat(this.withAttention?["output_mesh_identity","output_lips","Identity_6:0","Identity_1:0","Identity_2:0","Identity_5:0"]:["output_mesh"]),a=this.landmarkModel.execute(n,r),s=a[0],i=a.slice(1),[4,s.data()];case 1:return p.sent()[0]<.5?(S.B90(a),S.B90(n),[2,null]):this.withAttention?[4,this.tensorsToFaceLandmarksWithAttention(i)]:[3,3];case 2:return o=p.sent(),[3,5];case 3:return[4,this.tensorsToFaceLandmarks(i)];case 4:o=p.sent(),p.label=5;case 5:return u=function(t,e,n){void 0===n&&(n={ignoreRotation:!1});for(var r=[],a=0,s=t;a<s.length;a++){var i=s[a],o=i.x-.5,u=i.y-.5,p=n.ignoreRotation?0:e.rotation,c=Math.cos(p)*o-Math.sin(p)*u,l=Math.sin(p)*o+Math.cos(p)*u;c=c*e.width+e.xCenter,l=l*e.height+e.yCenter;var h=i.z*e.width,f=$t({},i);f.x=c,f.y=l,f.z=h,r.push(f)}return r}(o,t),S.B90(a),S.B90(n),[2,u]}}))}))},t.prototype.tensorsToFaceLandmarks=function(t){return Ht(this,void 0,void 0,(function(){return Gt(this,(function(e){return[2,We(t[0],Ze)]}))}))},t.prototype.tensorsToFaceLandmarksWithAttention=function(t){return Ht(this,void 0,void 0,(function(){var e,n,r,a,s,i;return Gt(this,(function(o){switch(o.label){case 0:return[4,We(t[0],Ze)];case 1:return e=o.sent(),[4,We(t[1],tn)];case 2:return n=o.sent(),[4,We(t[3],en)];case 3:return r=o.sent(),[4,We(t[5],en)];case 4:return a=o.sent(),[4,We(t[4],nn)];case 5:return s=o.sent(),[4,We(t[2],nn)];case 6:return i=o.sent(),[2,$e([e,n,r,a,s,i],[rn,an,sn,on,un,pn])]}}))}))},t.prototype.faceLandmarksToRoi=function(t,e){return Xe(Be(Qt(t),"boundingbox","normRect",e,{rotationVectorStartKeypointIndex:33,rotationVectorEndKeypointIndex:263,rotationVectorTargetAngleDegree:0}),e,Qe)},t}();function ln(t){return Ht(this,void 0,void 0,(function(){var e,n,r,a;return Gt(this,(function(s){switch(s.label){case 0:return e=function(t){if(null==t)return $t({},Ke);var e=$t({},t);return e.runtime="tfjs",null==e.maxFaces&&(e.maxFaces=Ke.maxFaces),null==e.refineLandmarks&&(e.refineLandmarks=Ke.refineLandmarks),null==e.landmarkModelUrl&&(e.landmarkModelUrl=e.refineLandmarks?"https://tfhub.dev/mediapipe/tfjs-model/face_landmarks_detection/attention_mesh/1":"https://tfhub.dev/mediapipe/tfjs-model/face_landmarks_detection/face_mesh/1"),e}(t),n="string"==typeof e.landmarkModelUrl&&e.landmarkModelUrl.indexOf("https://tfhub.dev")>-1,[4,Ut(e.landmarkModelUrl,{fromTFHub:n})];case 1:return r=s.sent(),[4,ke(xe.MediaPipeFaceDetector,{modelType:"short",maxFaces:e.maxFaces,detectorModelUrl:e.detectorModelUrl,runtime:e.runtime})];case 2:return a=s.sent(),[2,new cn(a,r,e.maxFaces,e.refineLandmarks)]}}))}))}function hn(t,e){return Ht(this,void 0,void 0,(function(){var n,r;return Gt(this,(function(a){if(t===qe.MediaPipeFaceMesh){if(r=void 0,null!=(n=e)){if("tfjs"===n.runtime)return[2,ln(n)];if("mediapipe"===n.runtime)return[2,te(n)];r=n.runtime}throw new Error("Expect modelConfig.runtime to be either 'tfjs' or 'mediapipe', but got "+r)}throw new Error(t+" is not a supported model name.")}))}))}(qe||(qe={})).MediaPipeFaceMesh="MediaPipeFaceMesh";var fn=Object.freeze({__proto__:null,getKeypointIndexByContour:function(t){if(t===qe.MediaPipeFaceMesh)return Xt;throw new Error("Model "+t+" is not supported.")},getAdjacentPairs:function(t){if(t===qe.MediaPipeFaceMesh)return qt;throw new Error("Model "+t+" is not supported.")}})}}]);